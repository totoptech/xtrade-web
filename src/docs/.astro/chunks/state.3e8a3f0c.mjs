import { i as createVNode, F as Fragment, s as spreadAttributes } from './astro.7b6fbd1f.mjs';
import '@astrojs/internal-helpers/path';
import 'node:fs';
import 'node:path';
import 'node:url';
import 'slash';
import 'node:fs/promises';
import './pages/404.astro.1d69ba63.mjs';
import 'html-escaper';
import 'fs';
import 'path';
/* empty css                        */import 'zod';
/* empty css                                                             */import 'execa';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<p>The chart data state defines what information the chart displays.</p>\n<ul>\n<li>price history</li>\n<li>indicators</li>\n<li>trades</li>\n<li>drawings</li>\n<li>events</li>\n<li>annotations</li>\n</ul>\n<p>Data states can be provided to the chart either via the config object at <code>chart.start(config)</code>, or by creating a state separately and telling the chart to use it.</p>\n<p>If no state is provided through the config at <code>chart.start(config)</code> then the chart will automatically use a default empty state.</p>\n<p>Data can be then later added via a price stream (typically provided by an exchange websocket) or by merging a block of back history.</p>\n<h2 id=\"config\">Config</h2>\n<p>The chart config object has a state property <code>config.state</code>. It requires a valid <a href=\"#state-config-object\">state config object</a>.</p>\n<h2 id=\"create-and-use-a-state\">Create and Use a State</h2>\n<p>A <a href=\"#state-config-object\">data state (object)</a> must be first validated by the chart. If valid, will register it for later use and return the id key assigned to it. This means the chart can hold multiple states in memory to be used as desired allowing for easy swapping.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">key</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">state</span><span style=\"color: #B392F0\">.create(state)</span></span></code></pre>\n<p>For more information parameters see: TODO: State API documentation</p>\n<p>To have the chart use a state:</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart</span><span style=\"color: #B392F0\">.useState(key)</span></span></code></pre>\n<ul>\n<li>will remove any indicators the chart was previously using</li>\n<li>stop listening for and displaying the price stream, if any</li>\n<li>point the chart to the new data state</li>\n<li>add any indicators specified in the new state</li>\n<li>redraw the chart</li>\n</ul>\n<div><p>Unless a new chart title is provided in the selected state, the chart title has to be changed manually.</p><p>chart.setTitle(“New Title”)</p></div>\n<h2 id=\"merging-data-into-the-state\">Merging Data Into the State</h2>\n<p>Blocks of back history can be merged into the chart via the following method.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart</span><span style=\"color: #B392F0\">.mergeData(data)</span></span></code></pre>\n<p>The data must be formatted as a valid <a href=\"#state-config-object\">state config object</a>.</p>\n<p>Any of the following data can be merged into the chart data:</p>\n<ul>\n<li>Price history (candles)</li>\n<li>Indicator data</li>\n</ul>\n<p>A price history data merge into the state does the following:</p>\n<ul>\n<li>checking that time frames match between current (if any) chart data and the incoming, otherwise will fail the merge returning false</li>\n<li>merging the data when there is an overlap, incoming will overwrite current</li>\n<li>filling (null) any potential gap between between current (if any) chart data and the incoming</li>\n<li><strong>optionally</strong> calculate indicator data for incoming data if missing</li>\n</ul>\n<p><code>mergeData(merge, newRange, calc)</code> takes the following parameters:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Parameter</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>merge</td><td>object</td><td>yes</td><td>none</td><td>An object same format as the initial<a href=\"../state#state-config-object\">chart config state object</a>.</td></tr><tr><td>newRange</td><td>boolean</td><td>no</td><td>false</td><td>Position the chart display range on the newly imported data.</td></tr><tr><td>calc</td><td>boolean</td><td>no</td><td>false</td><td>Calculate any (missing) indicator data. If you are supply indicator data in the<code>merge</code> this is not necessary.</td></tr></tbody></table>\n<h2 id=\"delete\">Delete</h2>\n<p>Depending upon the size of the datasets the state contains, it may be beneficial to conserve memory and delete those that are no longer needed, as the chart by default retains a library of states in memory.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart</span><span style=\"color: #B392F0\">.deleteState(key)</span></span></code></pre>\n<h2 id=\"export\">Export</h2>\n<p>The chart can export any data state contained in memory to a JSoN object. The export will be formatted as a <a href=\"#state-config-object\">state config object</a>.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">xport</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart</span><span style=\"color: #B392F0\">.exportState(key)</span></span></code></pre>\n<h2 id=\"list\">List</h2>\n<p>Return a <code>Map()</code> of all <a href=\"#internal-chart-data-state\">chart data states</a> currently in memory. This includes states in use by other charts.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">list</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">state</span><span style=\"color: #B392F0\">.list()</span></span></code></pre>\n<h2 id=\"has\">Has</h2>\n<p>Return <code>true</code> or <code>false</code> if the specified state exists.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">exists</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">state</span><span style=\"color: #B392F0\">.has(key)</span></span></code></pre>\n<h2 id=\"get\">Get</h2>\n<p>Return the specified <a href=\"#internal-chart-data-state\">internal data state object</a>.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">theState</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">state</span><span style=\"color: #B392F0\">.get(key)</span></span></code></pre>\n<h2 id=\"state-config-object\">State Config Object</h2>\n<p>The following data state config object example demonstrates the possible options that can be submitted to the chart on initial <code>chart.start(config)</code> as the <code>config.state</code> property, or at a later time as a <a href=\"#merging-data-into-the-state\">merge of data</a> into the existing chart state. Usually such a merge is done when the chart scrolls to the left / past boundary, and more back history needs to be loaded into the chart. <code>chart.mergeData(data)</code></p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// [timestamp, open, hight, low, close, volume]</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  ohlcv</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\"> []</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// list of indicators and overlays for the primary chart pane (price history)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  primary</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\"> [</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// indicator</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      name</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"EMA 25\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      type</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"EMA\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      settings</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      data</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    }</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// list of trades</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      name</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"Trades\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      type</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"trades\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      settings</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      data</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    }</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// list of news / events</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      name</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"Events\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      type</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"events\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      settings</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      data</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    }</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// list of drawing tools used</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      name</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"Drawings\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      type</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"drawings\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      settings</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      data</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    }</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// list of user defined annotations</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      name</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"Annotations\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      type</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"annotations\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      settings</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      data</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  ]</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// list of indicators and overlays not displayed on the primary chart pane</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  secondary</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\"> [</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// indicator</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      name</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"RSI 20\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      type</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"RSI\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      settings</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      data</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      drawings</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    }</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  ]</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// user defined data</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  datasets</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\"> []</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">}</span></span></code></pre>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p>State Config properties are optional, you do not have to include all of them for the state to be valid.</p></section></aside>\n<h3 id=\"time-series-datasets---candles-and-indicators\">Time Series Datasets - Candles and Indicators</h3>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p>The chart expects all time series datasets to be contiguous, having no gaps in the data.</p></section></aside>\n<p>Any gaps in time series data should be filled with a “null” entry such as the following:</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6B737C\">// [number, number, number, number, number, number]</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">[timestamp</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #B392F0\">]</span></span></code></pre>\n<p>For candle and standard indicator data, the chart expects the values of each entry array to be <strong>numbers</strong>. Some exchanges return their data as strings and thus must be converted to numbers.</p>\n<p>All timestamps must be <strong>milliseconds</strong>!</p>\n<p>So check your exchange data carefully and feed the chart a diet of good data.</p>\n<h2 id=\"internal-chart-data-state\">Internal Chart Data State</h2>");

				const frontmatter = {"title":"State","description":"The chart data state defines what information the chart displays."};
				const file = "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/state.md";
				const url = undefined;
				function rawContent() {
					return "The chart data state defines what information the chart displays.\n\n* price history\n* indicators\n* trades\n* drawings\n* events\n* annotations\n\nData states can be provided to the chart either via the config object at ``chart.start(config)``, or by creating a state separately and telling the chart to use it.\n\nIf no state is provided through the config at ``chart.start(config)`` then the chart will automatically use a default empty state.\n\nData can be then later added via a price stream (typically provided by an exchange websocket) or by merging a block of back history.\n\n## Config\n\nThe chart config object has a state property ``config.state``. It requires a valid [state config object](#state-config-object).\n\n## Create and Use a State\n\nA [data state (object)](#state-config-object) must be first validated by the chart. If valid, will register it for later use and return the id key assigned to it. This means the chart can hold multiple states in memory to be used as desired allowing for easy swapping.\n\n```javascript\nconst key = chart.state.create(state)\n```\n\nFor more information parameters see: TODO: State API documentation\n\nTo have the chart use a state:\n\n```javascript\nchart.useState(key)\n```\n\n* will remove any indicators the chart was previously using\n* stop listening for and displaying the price stream, if any\n* point the chart to the new data state\n* add any indicators specified in the new state\n* redraw the chart\n\n:::info\nUnless a new chart title is provided in the selected state, the chart title has to be changed manually.\n\nchart.setTitle(\"New Title\")\n:::\n\n## Merging Data Into the State\n\nBlocks of back history can be merged into the chart via the following method.\n\n```javascript\nchart.mergeData(data)\n```\n\nThe data must be formatted as a valid [state config object](#state-config-object).\n\nAny of the following data can be merged into the chart data:\n\n* Price history (candles)\n* Indicator data\n\nA price history data merge into the state does the following:\n\n* checking that time frames match between current (if any) chart data and the incoming, otherwise will fail the merge returning false\n* merging the data when there is an overlap, incoming will overwrite current\n* filling (null) any potential gap between between current (if any) chart data and the incoming\n* **optionally** calculate indicator data for incoming data if missing\n\n``mergeData(merge, newRange, calc)`` takes the following parameters:\n\n\n| Parameter | Type    | Required | Default | Description                                                                                                     |\n| ----------- | --------- | ---------- | --------- | ----------------------------------------------------------------------------------------------------------------- |\n| merge     | object  | yes      | none    | An object same format as the initial[chart config state object](../state#state-config-object).                  |\n| newRange  | boolean | no       | false   | Position the chart display range on the newly imported data.                                                    |\n| calc      | boolean | no       | false   | Calculate any (missing) indicator data. If you are supply indicator data in the``merge`` this is not necessary. |\n\n## Delete\n\nDepending upon the size of the datasets the state contains, it may be beneficial to conserve memory and delete those that are no longer needed, as the chart by default retains a library of states in memory.\n\n```javascript\nchart.deleteState(key)\n```\n\n## Export\n\nThe chart can export any data state contained in memory to a JSoN object. The export will be formatted as a [state config object](#state-config-object).\n\n```javascript\nconst xport = chart.exportState(key)\n```\n\n## List\n\nReturn a ``Map()`` of all [chart data states](#internal-chart-data-state) currently in memory. This includes states in use by other charts.\n\n```javascript\nconst list = chart.state.list()\n```\n\n## Has\n\nReturn ``true`` or ``false`` if the specified state exists.\n\n```javascript\nconst exists = chart.state.has(key)\n```\n\n## Get\n\nReturn the specified [internal data state object](#internal-chart-data-state).\n\n```javascript\nconst theState = chart.state.get(key)\n```\n\n## State Config Object\n\nThe following data state config object example demonstrates the possible options that can be submitted to the chart on initial ``chart.start(config)`` as the ``config.state`` property, or at a later time as a [merge of data](#merging-data-into-the-state) into the existing chart state. Usually such a merge is done when the chart scrolls to the left / past boundary, and more back history needs to be loaded into the chart. ``chart.mergeData(data)``\n\n```javascript\n{\n\n  // [timestamp, open, hight, low, close, volume]\n  ohlcv: [],\n\n  // list of indicators and overlays for the primary chart pane (price history)\n  primary: [\n    // indicator\n    {\n      name: \"EMA 25\",\n      type: \"EMA\",\n      settings: {},\n      data: {}\n    },\n    // list of trades\n    {\n      name: \"Trades\",\n      type: \"trades\",\n      settings: {},\n      data: {}\n    },\n    // list of news / events\n    {\n      name: \"Events\",\n      type: \"events\",\n      settings: {},\n      data: {}\n    },\n    // list of drawing tools used\n    {\n      name: \"Drawings\",\n      type: \"drawings\",\n      settings: {},\n      data: {}\n    },\n    // list of user defined annotations\n    {\n      name: \"Annotations\",\n      type: \"annotations\",\n      settings: {},\n      data: {}\n    }\n  ],\n\n  // list of indicators and overlays not displayed on the primary chart pane\n  secondary: [\n    // indicator\n    {\n      name: \"RSI 20\",\n      type: \"RSI\",\n      settings: {},\n      data: {},\n      drawings: {}\n    },\n  ],\n\n  // user defined data\n  datasets: [],\n\n\n}\n```\n\n:::note\nState Config properties are optional, you do not have to include all of them for the state to be valid.\n:::\n\n### Time Series Datasets - Candles and Indicators\n\n:::note\nThe chart expects all time series datasets to be contiguous, having no gaps in the data.\n:::\n\nAny gaps in time series data should be filled with a \"null\" entry such as the following:\n\n```javascript\n// [number, number, number, number, number, number]\n[timestamp, null, null, null, null, null]\n```\n\nFor candle and standard indicator data, the chart expects the values of each entry array to be **numbers**. Some exchanges return their data as strings and thus must be converted to numbers.\n\nAll timestamps must be **milliseconds**!\n\nSo check your exchange data carefully and feed the chart a diet of good data.\n\n## Internal Chart Data State\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"config","text":"Config"},{"depth":2,"slug":"create-and-use-a-state","text":"Create and Use a State"},{"depth":2,"slug":"merging-data-into-the-state","text":"Merging Data Into the State"},{"depth":2,"slug":"delete","text":"Delete"},{"depth":2,"slug":"export","text":"Export"},{"depth":2,"slug":"list","text":"List"},{"depth":2,"slug":"has","text":"Has"},{"depth":2,"slug":"get","text":"Get"},{"depth":2,"slug":"state-config-object","text":"State Config Object"},{"depth":3,"slug":"time-series-datasets---candles-and-indicators","text":"Time Series Datasets - Candles and Indicators"},{"depth":2,"slug":"internal-chart-data-state","text":"Internal Chart Data State"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
