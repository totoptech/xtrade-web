const id = "reference/02_configuration.md";
						const collection = "docs";
						const slug = "reference/02_configuration";
						const body = "\nThe configuration object is passed to the chart after an instance of it has been inserted into the DOM. The config provides:\n\n* Time frame\n* Layout definition\n* Optionally\n  * Datasets - price, indicators, drawings\n  * Theme\n\n## Defining and Starting the Chart\n\n```javascript\nimport { Chart } from 'tradex-chart'\n\n// After the chart has mounted on the DOM,\n// Start it with a configuration object\nchart.start(config)\n```\n\n## Minimal Config\n\nConfig describes the basics of the chart, size, ect. It requires the following minimum properties to be valid:\n\n```javascript\nimport * as talib from './node_modules/talib-web/lib/index.esm'\n\n// minimal config\nconst config = {\n  title: \"BTC/USDT\",\n  talib: talib,\n  // talib: `${window.location.origin}/talib.wasm`\n}\n```\n``title`` is required so you know what asset you are looking at.\n\n``talib`` is a pointer to the [talib-web](https://https//anchegt.github.io/talib-web/) technical indicator library compiled as a WebAssembly module. TradeX-chart will take care of instantiating it.\n\n:::caution\nDepending upon the server configuration, ``.wasm`` files might be served with an incorrect mime type when loaded from a subdirectory.  \nIf that is the case, copy ``tablib.wasm`` from ``./modules/talib-web/lib/`` to the web server root, and reference it in the config as following:  \n``talib: `${window.location.origin}/talib.wasm` ``\n:::\n\n## Basic Config\n\n``height`` and ``width`` default to 100% of the parent element's height and width if not defined in the config. ``height`` and ``width`` are the number of pixels. The chart has a minimal height `300` and width of `400` pixels.\n\n``rangeLimit`` defines the initial number of candles to display. It is treated as the \"zoom\" level of the timeline. \n\n[Config Object Options](#config-object-options) provides a complete overview of all settings.\n\n## State\n\nState is a snapshot of the entirety of the chart data state, including chart price data, indicators, drawing tools, datasets and theme. Where properties of Config and ``state.settings`` overlap, Config properties take priority.\n\nChart states can be loaded (swapped) as desired. By default the chart can hold multiple states in memory.\n\nThe chart state can be exported to be reused later.\n\n```javascript\nchart.state.export(key)\n```\n\nMore information the chart data state are found in the [state documentation](../state) .\n\n## Range\n\nRange determines the initial start and end timestamps for the price history (candles) that the chart displays.\n\nRefer to [Initial Range Config](../range#initial-range-config) for more detail.\n\n## Themes\n\nFor API methods to manipulate chart themes refer to [themes](../themes)\n\n### Candle Types\n\n```javascript\nexport const CandleType = {\n  CANDLE_SOLID: 'candle_solid',\n  CANDLE_HOLLOW: 'candle_hollow',\n  CANDLE_UP_HOLLOW: 'candle_up_hollow',\n  CANDLE_DOWN_HOLLOW: 'candle_down_hollow',\n  OHLC: 'ohlc',\n  AREA: 'area',\n  LINE: 'line'\n}\n```\nRefer to [Candle Type Theme](themes#candle-types) for visual examples of each candle type.\n\n\n# Config Object Options\n\nMore detailed configuration options not included below:\n\n* [Initial Range Config](../range/#intial-range-config)\n* [Theme Properties](../themes/#theme-properties)\n\n```javascript\nconst config = {\n  id: \"TradeX_test\",\n  title: \"BTC/USDT\",\n  // width and height are pixel values.\n  // if none are provided, the chart will responsively resize to the parent element that contains it\n  width: 1000,\n  height: 800,\n  // utils bar config\n  utils: {},\n  // tools bar config\n  tools: {},\n  // timeframes: s, m, h, d, M, y\n  timeFrame: \"1m\",\n  // initial Range Config\n  range: {\n    // see documentation Range, Initial Range Config\n  }\n\n  // chart theme - see Theme Properties for more detail\n  theme: {\n    candle: {\n      // candle types: 'candle_hollow','candle_up_hollow','candle_down_hollow','ohlc','area','line'\n      Type: \"candle_solid\",\n      AreaLineColour: \"#4c5fe7\",\n      AreaFillColour: [\"#4c5fe780\", \"#4c5fe700\"],\n      UpBodyColour: \"#00F04088\",\n      UpWickColour: \"#0F4\",\n      DnBodyColour: \"#F0004088\",\n      DnWickColour: \"#F04\",\n    },\n    volume: {\n      Height: 15,\n      UpColour: \"#00F04044\",\n      DnColour: \"#F0004044\",\n    },\n    xAxis: {\n      colourTick: \"#6a6f80\",\n      colourLabel: \"#6a6f80\",\n      colourCursor: \"#2A2B3A\",\n      colourCursorBG: \"#aac0f7\",\n      // fontFamily: XAxisStyle.FONTFAMILY,\n      // fontSize: XAxisStyle.FONTSIZE,\n      // fontWeight: XAxisStyle.FONTWEIGHT,\n      // line: \"#656565\"\n      slider: \"#586ea6\",\n      handle: \"#586ea688\",\n      tickMarker: false,\n    },\n    yAxis: {\n      colourTick: \"#6a6f80\",\n      colourLabel: \"#6a6f80\",\n      colourCursor: \"#2A2B3A\",\n      colourCursorBG: \"#aac0f7\",\n      // fontFamily: YAxisStyle.FONTFAMILY,\n      // fontSize: YAxisStyle.FONTSIZE,\n      // fontWeight: YAxisStyle.FONTWEIGHT,\n      // line: \"#656565\"\n      tickMarker: false,\n      location:\"left\",\n    },\n    chart: {\n      Background: \"#141414\",\n      BorderColour: \"#666\",\n      GridColour: \"#333\",\n      TextColour: \"#ccc\"\n    },\n    primaryPane: {\n\n    },\n    secondaryPane: {\n\n    },\n    tools: {\n      // tool bar locations: \"left\", \"right\", false - defaults to left\n      location: false\n    },\n    utils: {\n      // utils bar locations: false - defaults to true\n      location: false\n    },\n    time: {\n      // timeline navigation: false - defaults to true\n      navigation: false\n    },\n    legend: {\n      // legend controls: false - defaults to true\n      // display icons, order, visible, remove, config\n      controls: false\n      // default text colour\n      colour: \"#96a9db\",\n    }\n  },\n  // used for chart data validation, timestamps compared against BTC genisis block\n  isCrypto: true,\n  // enable console.log output - WARNING! my impact performance\n  logs: false,\n  // enable console.info output - WARNING! my impact performance\n  infos: true,\n  // enable console.warning output - WARNING! my impact performance\n  warnings: true,\n  // enable console.error output - WARNING! my impact performance\n  errors: true,\n  // enable live updates for a price stream\n  stream: {},\n  // maximum rate in milliseconds that a live stream should be REDRAWN, does not throttle actual stream rate\n  maxCandleUpdate: 250,\n  // pointer to talib-web library, required if you want to see indicators\n  talib: talib,\n  // file path (relative to server document root) for the talib-web .wasm file\n  // required if you want to see indicators\n  wasm: wasm,\n  // initial data sate provided to the chart, price history, indicators, datasets\n  // is optional - chart will start without one, and await data via the API\n  state: {\n    // Details of the state structure are found in [state](state)\n  },\n  // user defined functions to run with or replace default methods\n  callbacks: {\n    indicatorSettings: {fn: (c)=>{ alert(c.id) }, own: true}\n  }\n}\n```\n";
						const data = {title:"Configuration",description:"How to configure TradeX Chart",editUrl:true,head:[],template:"doc"};
						const _internal = {
							type: 'content',
							filePath: "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/02_configuration.md",
							rawData: "\ntitle: Configuration\ndescription: How to configure TradeX Chart",
						};

export { _internal, body, collection, data, id, slug };
