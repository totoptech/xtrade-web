const id = "reference/canvas_extension_layers.md";
						const collection = "docs";
						const slug = "reference/canvas_extension_layers";
						const body = "\nCanvas Extension Layers are a Html5 Canvas framework that enables hit detection, layering, pixel ratio management, exports, and downloads for either ``2d`` or ``webgl`` canvas modes.\n\n## CEL\n\n### viewports\n\nReturn an array of instantiated viewports\n\n```javascript\nconst viewports = CEL.viewports;\n```\n\n## CEL.Viewport\n\nThe viewport hosts the layer stack and renders this into the final HTML ``canvas`` element visible to the end user.\n\n### constructor\n\nCreate a multi-layered canvas.\n\n```javascript\nconst viewport = new CEL.Viewport();\n```\n\n### scene\n\nReturn the viewport scene which all of the layers are composited into.\n\n```javascript\nconst scene = viewport.scene;\n```\n\n### index\n\n```javascript\nconst index = viewport.index;\n```\n\n### add()\n\nAdd a layer to the viewport.\n\n```javascript\nviewport.add(layer);\n```\n\n### render()\n\nRender the viewport by compositing all layers into a single viewport scene canvas which is visible to the end user.\n\n```javascript\nviewport.render();\n```\n\n### setSize()\n\nSet the viewport size in pixels and all layers in the stack which are composited into the viewport. This also includes each associated hit detection layer. This can be utilized for pointer events.\n\n```javascript\nviewport.setSize(600, 300);\n```\n\n### getIntersection()\n\nReturn the layer index, if any, for the supplied x and y coordinates. If none (transparent) then return a value of -1. This can be used for pointer detection.\n\n```javascript\nconst key = viewport.getIntersection(20, 30);\n```\n\n### destroy()\n\n```javascript\n// goodbye forever\nviewport.destroy();\n```\n\n## CEL.Layer\n\nA CEL layer provides a ``scene`` and ``hit``, both of which contain a HTML canvas element. The scene canvases composited into the final ``viewport`` canvas that the end user can see. The hit canvas remains hidden from the end user, and is used for pointer interaction detection.\n\n### constructor\n\n```javascript\nconst layer = new CEL.Layer();\n```\n\n### scene\n\nDraw a rectangle on the scene canvas. This will be visible to the end user.\n\n```javascript\nlayer.scene.context.fillStyle = 'red';\nlayer.scene.context.fillRect(0, 0, 100, 50);\n```\n\n### hit\n\nDraw a rectangle on the hit canvas for hit detection. This is not visible to the end user.\n\n```javascript\nlayer.hit.context.fillStyle = layer.hit.getIndexValue(0);\nlayer.hit.context.fillRect(0, 0, 100, 50);\n```\n\n### visible\n\nSet the layer visibility: true, false.\n\n```javascript\n// hide layer\nlayer.visible=false;\nviewport.render();\n\n// show layer\nlayer.visible=true;\nviewport.render();\n```\n\n### setPosition()\n\nSet the layer position relative to the viewport.\n\n```javascript\nlayer.setPosition(50, 50);\n```\n\n### setSize()\n\nSet layer size and associated hit detection layer\n\n```javascript\nlayer.setSize(600, 200);\n```\n\n### setComposition()\n\nSet layer composition / blending mode.\n\n```javascript\nlayer.setCompositin(\"multiply\");\n```\n\n| Value            | Description                                                                                                                                          |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| source-over      | **Default**<br>Displays the source over the destination                                                                                              |\n| source-atop      | Displays the source on top of the destination. The part of the source image that is outside the destination is not shown                             |\n| source-in        | Displays the source in the destination. Only the part of the source that is INSIDE the destination is shown, and the destination is transparent      |\n| source-out       | Displays the source out of the destination. Only the part of the source that is OUTSIDE the destination is shown, and the destination is transparent |\n| destination-over | Displays the destination over the source                                                                                                             |\n| destination-atop | Displays the destination on top of the source. The part of the destination that is outside the source is not shown                                   |\n| destination-in   | Displays the destination in the source. Only the part of the destination that is INSIDE the source is shown, and the source is transparent           |\n| destination-out  | Displays the destination out of the source. Only the part of the destination that is OUTSIDE the source is shown, and the source is transparent      |\n| lighter          | Displays the source + the destination                                                                                                                |\n| copy             | Displays the source. The destination is ignored                                                                                                      |\n| xor              | The source is combined by using an exclusive OR with the destination                                                                                 |\n| multiply         |                                                                                                                                                      |\n| screen           |                                                                                                                                                      |\n| overlay          |                                                                                                                                                      |\n| darken           |                                                                                                                                                      |\n| lighten          |                                                                                                                                                      |\n| color-dodge      |                                                                                                                                                      |\n| color-burn       |                                                                                                                                                      |\n| hard-light       |                                                                                                                                                      |\n| soft-light       |                                                                                                                                                      |\n| difference       |                                                                                                                                                      |\n| exclusion        |                                                                                                                                                      |\n| hue              |                                                                                                                                                      |\n| saturation       |                                                                                                                                                      |\n| color            |                                                                                                                                                      |\n| luminosity       |                                                                                                                                                      |\n\n### move()\n\nChange the stacking order of the layer. It accepts one parameter of type ``string`` from the following values: ``\"up\", \"down\", \"top\", \"bottom\"`` or of type ``number`` specifying which layer order to set it to with the lowest layer having a value of zero. Negative values will position the layer after the topmost layer.\n\n```javascript\n// move to top of layer stack\nlayer.move(\"top\");\n```\n\n### moveUp()\n\nMove layer on position up the stack.\n\n```javascript\nlayer.moveUp();\n```\n\n### moveDown()\n\nMove layer on position down the stack.\n\n```javascript\nlayer.moveDown();\n```\n\n### moveToTop()\n\nPlace the layer on the top of the stack, giving it the highest index value.\n\n```javascript\nlayer.moveToTop();\n```\n\n### moveToBottom()\n\nPlace the layer at the bottom of the stack, giving it an index value of zero.\n\n```javascript\nlayer.moveToBottom();\n```\n\n### getIndex()\n\nReturn the index of the layer in the stack order. A value of zero is the bottom of the layer stack with the layer order being ascending.\n\n```javascript\nconst index = layer.getIndex();\n```\n\n### destroy()\n\nRemove the layer.\n\n```javascript\nlayer.destroy();\n```\n\n## CEL.Scene\n\n### constructor\n\n```javascript\nconst scene = new CEL.Scene();\n```\n\n### context\n\nReturn canvas context for drawing operations.\n\n```javascript\nconst context = scene.context;\n```\n\n### canvas\n\nReturn canvas element\n\n```javascript\nconst canvas = scene.canvas;\n```\n\n### setSize()\n\n```javascript\nscene.setSize(600, 200);\n```\n\n### clear()\n\n```javascript\nscene.clear();\n```\n\n### toImage()\n\n\n| Parameter | Type     | Description                                                  | Required |\n| ----------- | ---------- | :------------------------------------------------------------- | ---------- |\n| type      | string   | image type, \"image/png\" (default), \"image/jpg\", \"image/webp\" | false    |\n| quality   | number   | image quality                                                | false    |\n| cb        | function | callback to receive the data URL                             | true     |\n\n```javascript\nconst cb = function(imageURL) {\n  // do something with the image\n}\nscene.toImage(type, quality, cb);\n```\n\nA callback function is **required** to receive the data URL. ``toImage`` will export a ``.png`` image by default.\n\n### export()\n\n``export()`` will trigger a file download, exporting a ``.png`` image snapshot of the scene.\n\n\n| Parameter | Type     | Description                                                  | Required |\n| :---------- | ---------- | :------------------------------------------------------------- | ---------- |\n| cfg       | object   | {fileName}                                                   | false    |\n| cb        | function | alternative handler                                          | false    |\n| type      | string   | image type, \"image/png\" (default), \"image/jpg\", \"image/webp\" | false    |\n| quality   | number   | image quality                                                | false    |\n\n```javascript\n// download the canvas as an image to your computer.\nconst cfg = {fileName: 'my-file.png'}\nscene.export(cfg, null, type, quality);\n```\n\nBy default, ``export()`` will export a ``.png`` image for download. If no file name is supplied, it will use the chart id by default.\n\n## Hit Detection\n\nCanvas Extension Layers provides an API for pixel perfect hit detection of pointers. \n\n:::note\nHit detection is automatically provided with each layer.\n:::\n\n```javascript\nconst layer = new CEL.Layer(cfg);\nconst hit = layer.hit\n```\nSee [Hit Detection](../hit_detection) for information on how to implement it.\n\n### constructor\n\n```javascript\nconst hit = new CEL.Hit();\n```\n\n### canvas\n\nReturn canvas HTML element\n\n```javascript\nconst canvas = hit.canvas;\n```\n\n### context\n\nReturn canvas index for drawing operations.\n\n```javascript\nconst context = hit.context;\n```\n\n### setSize()\n\nSet the hit detection layer.\n\n```javascript\nhit.setSize(600, 200);\n```\n\n### clear()\n\nClear the hit detection layer.\n\n```javascript\nhit.clear();\n```\n\n### getIndexValue()\n\nGet hit value (colour) from index. This value is used as the fill or stroke value for the hit mask which is used for [pointer detection](#getintersection-1).\n\n```javascript\nfunction drawHitCircle(config) {\n  var hit = config.layer.hit,\n      context = hit.context;\n\n  hit.clear();\n  context.save();\n  context.beginPath();\n  context.arc(config.x, config.y, 60, 0, Math.PI*2, false);\n  context.fillStyle = hit.getIndexValue(config.key);\n  context.fill();\n  context.restore();\n}\n```\n\n### getIntersection()\n\n``getIntersection(x, y)`` tests if a hit for coordinates. This can be used for pointer interactivity. Returns the associated layer index value or -1 if not hit.\n\n```javascript\nconst dataIndex = hit.getIntersection(20, 30);\n```\n\n";
						const data = {title:"Canvas Extension Layers",description:"Provides a layered functionality to HTML canvas",editUrl:true,head:[],template:"doc"};
						const _internal = {
							type: 'content',
							filePath: "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/canvas_extension_layers.md",
							rawData: "\ntitle: Canvas Extension Layers\ndescription: Provides a layered functionality to HTML canvas",
						};

export { _internal, body, collection, data, id, slug };
