import { i as createVNode, F as Fragment, s as spreadAttributes } from './astro.8a1fcc00.mjs';
import '@astrojs/internal-helpers/path';
import 'node:fs';
import 'node:path';
import 'node:url';
import 'slash';
import 'node:fs/promises';
import './pages/404.astro.3b1f3a71.mjs';
import 'html-escaper';
import 'fs';
import 'path';
/* empty css                        */import 'zod';
/* empty css                                                             */import 'execa';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<p>Canvas Extension Layers are a Html5 Canvas framework that enables hit detection, layering, pixel ratio management, exports, and downloads for either <code>2d</code> or <code>webgl</code> canvas modes.</p>\n<h2 id=\"cel\">CEL</h2>\n<h3 id=\"viewports\">viewports</h3>\n<p>Return an array of instantiated viewports</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">viewports</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">CEL</span><span style=\"color: #B392F0\">.viewports;</span></span></code></pre>\n<h2 id=\"celviewport\">CEL.Viewport</h2>\n<p>The viewport hosts the layer stack and renders this into the final HTML <code>canvas</code> element visible to the end user.</p>\n<h3 id=\"constructor\">constructor</h3>\n<p>Create a multi-layered canvas.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">viewport</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">CEL</span><span style=\"color: #B392F0\">.Viewport();</span></span></code></pre>\n<h3 id=\"scene\">scene</h3>\n<p>Return the viewport scene which all of the layers are composited into.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">viewport</span><span style=\"color: #B392F0\">.scene;</span></span></code></pre>\n<h3 id=\"index\">index</h3>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">index</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">viewport</span><span style=\"color: #B392F0\">.index;</span></span></code></pre>\n<h3 id=\"add\">add()</h3>\n<p>Add a layer to the viewport.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">viewport</span><span style=\"color: #B392F0\">.add(layer);</span></span></code></pre>\n<h3 id=\"render\">render()</h3>\n<p>Render the viewport by compositing all layers into a single viewport scene canvas which is visible to the end user.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">viewport</span><span style=\"color: #B392F0\">.render();</span></span></code></pre>\n<h3 id=\"setsize\">setSize()</h3>\n<p>Set the viewport size in pixels and all layers in the stack which are composited into the viewport. This also includes each associated hit detection layer. This can be utilized for pointer events.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">viewport</span><span style=\"color: #B392F0\">.setSize(</span><span style=\"color: #F8F8F8\">600</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">300</span><span style=\"color: #B392F0\">);</span></span></code></pre>\n<h3 id=\"getintersection\">getIntersection()</h3>\n<p>Return the layer index, if any, for the supplied x and y coordinates. If none (transparent) then return a value of -1. This can be used for pointer detection.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">key</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">viewport</span><span style=\"color: #B392F0\">.getIntersection(</span><span style=\"color: #F8F8F8\">20</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">30</span><span style=\"color: #B392F0\">);</span></span></code></pre>\n<h3 id=\"destroy\">destroy()</h3>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6B737C\">// goodbye forever</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">viewport</span><span style=\"color: #B392F0\">.destroy();</span></span></code></pre>\n<h2 id=\"cellayer\">CEL.Layer</h2>\n<p>A CEL layer provides a <code>scene</code> and <code>hit</code>, both of which contain a HTML canvas element. The scene canvases composited into the final <code>viewport</code> canvas that the end user can see. The hit canvas remains hidden from the end user, and is used for pointer interaction detection.</p>\n<h3 id=\"constructor-1\">constructor</h3>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">CEL</span><span style=\"color: #B392F0\">.Layer();</span></span></code></pre>\n<h3 id=\"scene-1\">scene</h3>\n<p>Draw a rectangle on the scene canvas. This will be visible to the end user.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">context</span><span style=\"color: #B392F0\">.fillStyle </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">'red'</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">context</span><span style=\"color: #B392F0\">.fillRect(</span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">100</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">50</span><span style=\"color: #B392F0\">);</span></span></code></pre>\n<h3 id=\"hit\">hit</h3>\n<p>Draw a rectangle on the hit canvas for hit detection. This is not visible to the end user.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">context</span><span style=\"color: #B392F0\">.fillStyle </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.getIndexValue(</span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">context</span><span style=\"color: #B392F0\">.fillRect(</span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">100</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">50</span><span style=\"color: #B392F0\">);</span></span></code></pre>\n<h3 id=\"visible\">visible</h3>\n<p>Set the layer visibility: true, false.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6B737C\">// hide layer</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.visible</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">false</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">viewport</span><span style=\"color: #B392F0\">.render();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// show layer</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.visible</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">true</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">viewport</span><span style=\"color: #B392F0\">.render();</span></span></code></pre>\n<h3 id=\"setposition\">setPosition()</h3>\n<p>Set the layer position relative to the viewport.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.setPosition(</span><span style=\"color: #F8F8F8\">50</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">50</span><span style=\"color: #B392F0\">);</span></span></code></pre>\n<h3 id=\"setsize-1\">setSize()</h3>\n<p>Set layer size and associated hit detection layer</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.setSize(</span><span style=\"color: #F8F8F8\">600</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">200</span><span style=\"color: #B392F0\">);</span></span></code></pre>\n<h3 id=\"setcomposition\">setComposition()</h3>\n<p>Set layer composition / blending mode.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.setCompositin(</span><span style=\"color: #FFAB70\">\"multiply\"</span><span style=\"color: #B392F0\">);</span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>source-over</td><td><strong>Default</strong><br>Displays the source over the destination</td></tr><tr><td>source-atop</td><td>Displays the source on top of the destination. The part of the source image that is outside the destination is not shown</td></tr><tr><td>source-in</td><td>Displays the source in the destination. Only the part of the source that is INSIDE the destination is shown, and the destination is transparent</td></tr><tr><td>source-out</td><td>Displays the source out of the destination. Only the part of the source that is OUTSIDE the destination is shown, and the destination is transparent</td></tr><tr><td>destination-over</td><td>Displays the destination over the source</td></tr><tr><td>destination-atop</td><td>Displays the destination on top of the source. The part of the destination that is outside the source is not shown</td></tr><tr><td>destination-in</td><td>Displays the destination in the source. Only the part of the destination that is INSIDE the source is shown, and the source is transparent</td></tr><tr><td>destination-out</td><td>Displays the destination out of the source. Only the part of the destination that is OUTSIDE the source is shown, and the source is transparent</td></tr><tr><td>lighter</td><td>Displays the source + the destination</td></tr><tr><td>copy</td><td>Displays the source. The destination is ignored</td></tr><tr><td>xor</td><td>The source is combined by using an exclusive OR with the destination</td></tr><tr><td>multiply</td><td></td></tr><tr><td>screen</td><td></td></tr><tr><td>overlay</td><td></td></tr><tr><td>darken</td><td></td></tr><tr><td>lighten</td><td></td></tr><tr><td>color-dodge</td><td></td></tr><tr><td>color-burn</td><td></td></tr><tr><td>hard-light</td><td></td></tr><tr><td>soft-light</td><td></td></tr><tr><td>difference</td><td></td></tr><tr><td>exclusion</td><td></td></tr><tr><td>hue</td><td></td></tr><tr><td>saturation</td><td></td></tr><tr><td>color</td><td></td></tr><tr><td>luminosity</td><td></td></tr></tbody></table>\n<h3 id=\"move\">move()</h3>\n<p>Change the stacking order of the layer. It accepts one parameter of type <code>string</code> from the following values: <code>\"up\", \"down\", \"top\", \"bottom\"</code> or of type <code>number</code> specifying which layer order to set it to with the lowest layer having a value of zero. Negative values will position the layer after the topmost layer.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6B737C\">// move to top of layer stack</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.move(</span><span style=\"color: #FFAB70\">\"top\"</span><span style=\"color: #B392F0\">);</span></span></code></pre>\n<h3 id=\"moveup\">moveUp()</h3>\n<p>Move layer on position up the stack.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.moveUp();</span></span></code></pre>\n<h3 id=\"movedown\">moveDown()</h3>\n<p>Move layer on position down the stack.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.moveDown();</span></span></code></pre>\n<h3 id=\"movetotop\">moveToTop()</h3>\n<p>Place the layer on the top of the stack, giving it the highest index value.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.moveToTop();</span></span></code></pre>\n<h3 id=\"movetobottom\">moveToBottom()</h3>\n<p>Place the layer at the bottom of the stack, giving it an index value of zero.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.moveToBottom();</span></span></code></pre>\n<h3 id=\"getindex\">getIndex()</h3>\n<p>Return the index of the layer in the stack order. A value of zero is the bottom of the layer stack with the layer order being ascending.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">index</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.getIndex();</span></span></code></pre>\n<h3 id=\"destroy-1\">destroy()</h3>\n<p>Remove the layer.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.destroy();</span></span></code></pre>\n<h2 id=\"celscene\">CEL.Scene</h2>\n<h3 id=\"constructor-2\">constructor</h3>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">CEL</span><span style=\"color: #B392F0\">.Scene();</span></span></code></pre>\n<h3 id=\"context\">context</h3>\n<p>Return canvas context for drawing operations.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">context</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\">.context;</span></span></code></pre>\n<h3 id=\"canvas\">canvas</h3>\n<p>Return canvas element</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">canvas</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\">.canvas;</span></span></code></pre>\n<h3 id=\"setsize-2\">setSize()</h3>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\">.setSize(</span><span style=\"color: #F8F8F8\">600</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">200</span><span style=\"color: #B392F0\">);</span></span></code></pre>\n<h3 id=\"clear\">clear()</h3>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\">.clear();</span></span></code></pre>\n<h3 id=\"toimage\">toImage()</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Parameter</th><th>Type</th><th align=\"left\">Description</th><th>Required</th></tr></thead><tbody><tr><td>type</td><td>string</td><td align=\"left\">image type, “image/png” (default), “image/jpg”, “image/webp”</td><td>false</td></tr><tr><td>quality</td><td>number</td><td align=\"left\">image quality</td><td>false</td></tr><tr><td>cb</td><td>function</td><td align=\"left\">callback to receive the data URL</td><td>true</td></tr></tbody></table>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> cb </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">function</span><span style=\"color: #B392F0\">(imageURL) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// do something with the image</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">}</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\">.toImage(type</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> quality</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> cb);</span></span></code></pre>\n<p>A callback function is <strong>required</strong> to receive the data URL. <code>toImage</code> will export a <code>.png</code> image by default.</p>\n<h3 id=\"export\">export()</h3>\n<p><code>export()</code> will trigger a file download, exporting a <code>.png</code> image snapshot of the scene.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Parameter</th><th>Type</th><th align=\"left\">Description</th><th>Required</th></tr></thead><tbody><tr><td align=\"left\">cfg</td><td>object</td><td align=\"left\">{fileName}</td><td>false</td></tr><tr><td align=\"left\">cb</td><td>function</td><td align=\"left\">alternative handler</td><td>false</td></tr><tr><td align=\"left\">type</td><td>string</td><td align=\"left\">image type, “image/png” (default), “image/jpg”, “image/webp”</td><td>false</td></tr><tr><td align=\"left\">quality</td><td>number</td><td align=\"left\">image quality</td><td>false</td></tr></tbody></table>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6B737C\">// download the canvas as an image to your computer.</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">cfg</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> {fileName</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">'my-file.png'</span><span style=\"color: #B392F0\">}</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\">.export(cfg</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> type</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> quality);</span></span></code></pre>\n<p>By default, <code>export()</code> will export a <code>.png</code> image for download. If no file name is supplied, it will use the chart id by default.</p>\n<h2 id=\"hit-detection\">Hit Detection</h2>\n<p>Canvas Extension Layers provides an API for pixel perfect hit detection of pointers.</p>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p>Hit detection is automatically provided with each layer.</p></section></aside>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">CEL</span><span style=\"color: #B392F0\">.Layer(cfg);</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.hit</span></span></code></pre>\n<p>See <a href=\"../hit_detection\">Hit Detection</a> for information on how to implement it.</p>\n<h3 id=\"constructor-3\">constructor</h3>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">CEL</span><span style=\"color: #B392F0\">.Hit();</span></span></code></pre>\n<h3 id=\"canvas-1\">canvas</h3>\n<p>Return canvas HTML element</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">canvas</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.canvas;</span></span></code></pre>\n<h3 id=\"context-1\">context</h3>\n<p>Return canvas index for drawing operations.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">context</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.context;</span></span></code></pre>\n<h3 id=\"setsize-3\">setSize()</h3>\n<p>Set the hit detection layer.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.setSize(</span><span style=\"color: #F8F8F8\">600</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">200</span><span style=\"color: #B392F0\">);</span></span></code></pre>\n<h3 id=\"clear-1\">clear()</h3>\n<p>Clear the hit detection layer.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.clear();</span></span></code></pre>\n<h3 id=\"getindexvalue\">getIndexValue()</h3>\n<p>Get hit value (colour) from index. This value is used as the fill or stroke value for the hit mask which is used for <a href=\"#getintersection-1\">pointer detection</a>.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">function</span><span style=\"color: #B392F0\"> drawHitCircle(config) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">var</span><span style=\"color: #B392F0\"> hit </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">config</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.hit</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      context </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.context;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.clear();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #79B8FF\">context</span><span style=\"color: #B392F0\">.save();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #79B8FF\">context</span><span style=\"color: #B392F0\">.beginPath();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #79B8FF\">context</span><span style=\"color: #B392F0\">.arc(</span><span style=\"color: #79B8FF\">config</span><span style=\"color: #B392F0\">.x</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">config</span><span style=\"color: #B392F0\">.y</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">60</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">Math</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">PI</span><span style=\"color: #F97583\">*</span><span style=\"color: #F8F8F8\">2</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">false</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #79B8FF\">context</span><span style=\"color: #B392F0\">.fillStyle </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.getIndexValue(</span><span style=\"color: #79B8FF\">config</span><span style=\"color: #B392F0\">.key);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #79B8FF\">context</span><span style=\"color: #B392F0\">.fill();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #79B8FF\">context</span><span style=\"color: #B392F0\">.restore();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">}</span></span></code></pre>\n<h3 id=\"getintersection-1\">getIntersection()</h3>\n<p><code>getIntersection(x, y)</code> tests if a hit for coordinates. This can be used for pointer interactivity. Returns the associated layer index value or -1 if not hit.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">dataIndex</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.getIntersection(</span><span style=\"color: #F8F8F8\">20</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">30</span><span style=\"color: #B392F0\">);</span></span></code></pre>");

				const frontmatter = {"title":"Canvas Extension Layers","description":"Provides a layered functionality to HTML canvas"};
				const file = "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/canvas_extension_layers.md";
				const url = undefined;
				function rawContent() {
					return "\nCanvas Extension Layers are a Html5 Canvas framework that enables hit detection, layering, pixel ratio management, exports, and downloads for either ``2d`` or ``webgl`` canvas modes.\n\n## CEL\n\n### viewports\n\nReturn an array of instantiated viewports\n\n```javascript\nconst viewports = CEL.viewports;\n```\n\n## CEL.Viewport\n\nThe viewport hosts the layer stack and renders this into the final HTML ``canvas`` element visible to the end user.\n\n### constructor\n\nCreate a multi-layered canvas.\n\n```javascript\nconst viewport = new CEL.Viewport();\n```\n\n### scene\n\nReturn the viewport scene which all of the layers are composited into.\n\n```javascript\nconst scene = viewport.scene;\n```\n\n### index\n\n```javascript\nconst index = viewport.index;\n```\n\n### add()\n\nAdd a layer to the viewport.\n\n```javascript\nviewport.add(layer);\n```\n\n### render()\n\nRender the viewport by compositing all layers into a single viewport scene canvas which is visible to the end user.\n\n```javascript\nviewport.render();\n```\n\n### setSize()\n\nSet the viewport size in pixels and all layers in the stack which are composited into the viewport. This also includes each associated hit detection layer. This can be utilized for pointer events.\n\n```javascript\nviewport.setSize(600, 300);\n```\n\n### getIntersection()\n\nReturn the layer index, if any, for the supplied x and y coordinates. If none (transparent) then return a value of -1. This can be used for pointer detection.\n\n```javascript\nconst key = viewport.getIntersection(20, 30);\n```\n\n### destroy()\n\n```javascript\n// goodbye forever\nviewport.destroy();\n```\n\n## CEL.Layer\n\nA CEL layer provides a ``scene`` and ``hit``, both of which contain a HTML canvas element. The scene canvases composited into the final ``viewport`` canvas that the end user can see. The hit canvas remains hidden from the end user, and is used for pointer interaction detection.\n\n### constructor\n\n```javascript\nconst layer = new CEL.Layer();\n```\n\n### scene\n\nDraw a rectangle on the scene canvas. This will be visible to the end user.\n\n```javascript\nlayer.scene.context.fillStyle = 'red';\nlayer.scene.context.fillRect(0, 0, 100, 50);\n```\n\n### hit\n\nDraw a rectangle on the hit canvas for hit detection. This is not visible to the end user.\n\n```javascript\nlayer.hit.context.fillStyle = layer.hit.getIndexValue(0);\nlayer.hit.context.fillRect(0, 0, 100, 50);\n```\n\n### visible\n\nSet the layer visibility: true, false.\n\n```javascript\n// hide layer\nlayer.visible=false;\nviewport.render();\n\n// show layer\nlayer.visible=true;\nviewport.render();\n```\n\n### setPosition()\n\nSet the layer position relative to the viewport.\n\n```javascript\nlayer.setPosition(50, 50);\n```\n\n### setSize()\n\nSet layer size and associated hit detection layer\n\n```javascript\nlayer.setSize(600, 200);\n```\n\n### setComposition()\n\nSet layer composition / blending mode.\n\n```javascript\nlayer.setCompositin(\"multiply\");\n```\n\n| Value            | Description                                                                                                                                          |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| source-over      | **Default**<br>Displays the source over the destination                                                                                              |\n| source-atop      | Displays the source on top of the destination. The part of the source image that is outside the destination is not shown                             |\n| source-in        | Displays the source in the destination. Only the part of the source that is INSIDE the destination is shown, and the destination is transparent      |\n| source-out       | Displays the source out of the destination. Only the part of the source that is OUTSIDE the destination is shown, and the destination is transparent |\n| destination-over | Displays the destination over the source                                                                                                             |\n| destination-atop | Displays the destination on top of the source. The part of the destination that is outside the source is not shown                                   |\n| destination-in   | Displays the destination in the source. Only the part of the destination that is INSIDE the source is shown, and the source is transparent           |\n| destination-out  | Displays the destination out of the source. Only the part of the destination that is OUTSIDE the source is shown, and the source is transparent      |\n| lighter          | Displays the source + the destination                                                                                                                |\n| copy             | Displays the source. The destination is ignored                                                                                                      |\n| xor              | The source is combined by using an exclusive OR with the destination                                                                                 |\n| multiply         |                                                                                                                                                      |\n| screen           |                                                                                                                                                      |\n| overlay          |                                                                                                                                                      |\n| darken           |                                                                                                                                                      |\n| lighten          |                                                                                                                                                      |\n| color-dodge      |                                                                                                                                                      |\n| color-burn       |                                                                                                                                                      |\n| hard-light       |                                                                                                                                                      |\n| soft-light       |                                                                                                                                                      |\n| difference       |                                                                                                                                                      |\n| exclusion        |                                                                                                                                                      |\n| hue              |                                                                                                                                                      |\n| saturation       |                                                                                                                                                      |\n| color            |                                                                                                                                                      |\n| luminosity       |                                                                                                                                                      |\n\n### move()\n\nChange the stacking order of the layer. It accepts one parameter of type ``string`` from the following values: ``\"up\", \"down\", \"top\", \"bottom\"`` or of type ``number`` specifying which layer order to set it to with the lowest layer having a value of zero. Negative values will position the layer after the topmost layer.\n\n```javascript\n// move to top of layer stack\nlayer.move(\"top\");\n```\n\n### moveUp()\n\nMove layer on position up the stack.\n\n```javascript\nlayer.moveUp();\n```\n\n### moveDown()\n\nMove layer on position down the stack.\n\n```javascript\nlayer.moveDown();\n```\n\n### moveToTop()\n\nPlace the layer on the top of the stack, giving it the highest index value.\n\n```javascript\nlayer.moveToTop();\n```\n\n### moveToBottom()\n\nPlace the layer at the bottom of the stack, giving it an index value of zero.\n\n```javascript\nlayer.moveToBottom();\n```\n\n### getIndex()\n\nReturn the index of the layer in the stack order. A value of zero is the bottom of the layer stack with the layer order being ascending.\n\n```javascript\nconst index = layer.getIndex();\n```\n\n### destroy()\n\nRemove the layer.\n\n```javascript\nlayer.destroy();\n```\n\n## CEL.Scene\n\n### constructor\n\n```javascript\nconst scene = new CEL.Scene();\n```\n\n### context\n\nReturn canvas context for drawing operations.\n\n```javascript\nconst context = scene.context;\n```\n\n### canvas\n\nReturn canvas element\n\n```javascript\nconst canvas = scene.canvas;\n```\n\n### setSize()\n\n```javascript\nscene.setSize(600, 200);\n```\n\n### clear()\n\n```javascript\nscene.clear();\n```\n\n### toImage()\n\n\n| Parameter | Type     | Description                                                  | Required |\n| ----------- | ---------- | :------------------------------------------------------------- | ---------- |\n| type      | string   | image type, \"image/png\" (default), \"image/jpg\", \"image/webp\" | false    |\n| quality   | number   | image quality                                                | false    |\n| cb        | function | callback to receive the data URL                             | true     |\n\n```javascript\nconst cb = function(imageURL) {\n  // do something with the image\n}\nscene.toImage(type, quality, cb);\n```\n\nA callback function is **required** to receive the data URL. ``toImage`` will export a ``.png`` image by default.\n\n### export()\n\n``export()`` will trigger a file download, exporting a ``.png`` image snapshot of the scene.\n\n\n| Parameter | Type     | Description                                                  | Required |\n| :---------- | ---------- | :------------------------------------------------------------- | ---------- |\n| cfg       | object   | {fileName}                                                   | false    |\n| cb        | function | alternative handler                                          | false    |\n| type      | string   | image type, \"image/png\" (default), \"image/jpg\", \"image/webp\" | false    |\n| quality   | number   | image quality                                                | false    |\n\n```javascript\n// download the canvas as an image to your computer.\nconst cfg = {fileName: 'my-file.png'}\nscene.export(cfg, null, type, quality);\n```\n\nBy default, ``export()`` will export a ``.png`` image for download. If no file name is supplied, it will use the chart id by default.\n\n## Hit Detection\n\nCanvas Extension Layers provides an API for pixel perfect hit detection of pointers. \n\n:::note\nHit detection is automatically provided with each layer.\n:::\n\n```javascript\nconst layer = new CEL.Layer(cfg);\nconst hit = layer.hit\n```\nSee [Hit Detection](../hit_detection) for information on how to implement it.\n\n### constructor\n\n```javascript\nconst hit = new CEL.Hit();\n```\n\n### canvas\n\nReturn canvas HTML element\n\n```javascript\nconst canvas = hit.canvas;\n```\n\n### context\n\nReturn canvas index for drawing operations.\n\n```javascript\nconst context = hit.context;\n```\n\n### setSize()\n\nSet the hit detection layer.\n\n```javascript\nhit.setSize(600, 200);\n```\n\n### clear()\n\nClear the hit detection layer.\n\n```javascript\nhit.clear();\n```\n\n### getIndexValue()\n\nGet hit value (colour) from index. This value is used as the fill or stroke value for the hit mask which is used for [pointer detection](#getintersection-1).\n\n```javascript\nfunction drawHitCircle(config) {\n  var hit = config.layer.hit,\n      context = hit.context;\n\n  hit.clear();\n  context.save();\n  context.beginPath();\n  context.arc(config.x, config.y, 60, 0, Math.PI*2, false);\n  context.fillStyle = hit.getIndexValue(config.key);\n  context.fill();\n  context.restore();\n}\n```\n\n### getIntersection()\n\n``getIntersection(x, y)`` tests if a hit for coordinates. This can be used for pointer interactivity. Returns the associated layer index value or -1 if not hit.\n\n```javascript\nconst dataIndex = hit.getIntersection(20, 30);\n```\n\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"cel","text":"CEL"},{"depth":3,"slug":"viewports","text":"viewports"},{"depth":2,"slug":"celviewport","text":"CEL.Viewport"},{"depth":3,"slug":"constructor","text":"constructor"},{"depth":3,"slug":"scene","text":"scene"},{"depth":3,"slug":"index","text":"index"},{"depth":3,"slug":"add","text":"add()"},{"depth":3,"slug":"render","text":"render()"},{"depth":3,"slug":"setsize","text":"setSize()"},{"depth":3,"slug":"getintersection","text":"getIntersection()"},{"depth":3,"slug":"destroy","text":"destroy()"},{"depth":2,"slug":"cellayer","text":"CEL.Layer"},{"depth":3,"slug":"constructor-1","text":"constructor"},{"depth":3,"slug":"scene-1","text":"scene"},{"depth":3,"slug":"hit","text":"hit"},{"depth":3,"slug":"visible","text":"visible"},{"depth":3,"slug":"setposition","text":"setPosition()"},{"depth":3,"slug":"setsize-1","text":"setSize()"},{"depth":3,"slug":"setcomposition","text":"setComposition()"},{"depth":3,"slug":"move","text":"move()"},{"depth":3,"slug":"moveup","text":"moveUp()"},{"depth":3,"slug":"movedown","text":"moveDown()"},{"depth":3,"slug":"movetotop","text":"moveToTop()"},{"depth":3,"slug":"movetobottom","text":"moveToBottom()"},{"depth":3,"slug":"getindex","text":"getIndex()"},{"depth":3,"slug":"destroy-1","text":"destroy()"},{"depth":2,"slug":"celscene","text":"CEL.Scene"},{"depth":3,"slug":"constructor-2","text":"constructor"},{"depth":3,"slug":"context","text":"context"},{"depth":3,"slug":"canvas","text":"canvas"},{"depth":3,"slug":"setsize-2","text":"setSize()"},{"depth":3,"slug":"clear","text":"clear()"},{"depth":3,"slug":"toimage","text":"toImage()"},{"depth":3,"slug":"export","text":"export()"},{"depth":2,"slug":"hit-detection","text":"Hit Detection"},{"depth":3,"slug":"constructor-3","text":"constructor"},{"depth":3,"slug":"canvas-1","text":"canvas"},{"depth":3,"slug":"context-1","text":"context"},{"depth":3,"slug":"setsize-3","text":"setSize()"},{"depth":3,"slug":"clear-1","text":"clear()"},{"depth":3,"slug":"getindexvalue","text":"getIndexValue()"},{"depth":3,"slug":"getintersection-1","text":"getIntersection()"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
