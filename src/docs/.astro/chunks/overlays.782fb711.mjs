const id = "reference/overlays.md";
						const collection = "docs";
						const slug = "reference/overlays";
						const body = "Overlays in the simplest form are a layer, that exist either on:\n\n* Primary chart (candlestick price view)\n* Secondary chart panes (indicators that don't live on the primary chart)\n* Y Axis price scale\n* X Axis time line\n\n![Chart Overlay Regions](../../../assets/Overly-Regions.png)\n\n## Features\n\nOverlays (layers) have the following features:\n\n* passive, responding the price date range that chart is viewing eg.:\n  * candles\n  * indicators\n* active, can respond to input such as the cursor / mouse / pointer position eg.:\n  * cursor cross hair,\n  * floating timeline label,\n  * Y Axis floating live streaming price label\n* static remain fixed and do not scroll with the chart or cursor / mouse / pointer eg:\n  * watermark - can be text or image\n* stacked, which means their visual order can be changed\n* visibility can be toggled on or off\n* can be arbitrarily added or removed\n* can have their own visual theme\n* have access to the in-built canvas methods for drawing to the overlay, lines,\n* boxes, circles, text, images...\n* automatically resize with the chart or pane displaying them.\n\n## Built-in Overlays\n\n\n| Name                                   | Key    | Default  |\n| ---------------------------------------- | -------- | ---------- |\n| Chart Candles                          |        |          |\n| Chart Cursor                           |        |          |\n| Chart Grid                             |        |          |\n| Chart High Low                         |        | optional |\n| [Chart News Events](../overlays_news_events) | events | optional |\n| Chart Streaming Candle                 |        |          |\n| [Chart Trades](../overlays_trades)           | trades | optional |\n| Chart Volume                           |        |          |\n| Chart Watermark                        |        | optional |\n| [Indicators](../../indicators)         |        | optional |\n| Scale Cursor                           |        |          |\n| Scale Labels                           |        |          |\n| Scale Price Line                       |        | optional |\n| Time Cursor                            |        |          |\n| Time Labels                            |        |          |\n\n:::note\n[Indicators](../indicators.md) are a special (child) class of overlays.\nBoth standard and custom indicators are extensions of the indicator class.\nIndicators draw a visual interpretation (calculation) of either the price history data (candles) or their own unique dataset.\n:::\n\n## Adding Optional Overlays\n\nTo add indicators to the chart, refer to the [indicator documentation](../indicators).\n\nOptional overlays are always present, but must be enabled via the [chart config](../02_configuration).\n\n* Scale Price Line - ``stream: {}`` see: [Streaming Price Data](../streaming_price_data)\n* Chart High Low - ``hightLow: true``\n* Chart Watermark - ``watermark: { text: \"text goes here\" }`` see: TODO: Watermark Options\n\nThe following ovelays are an exception and are added via the [initial chart state](../state) supplied by the chart config, because they may provide a dataset to be included in the chart data state. See their corresponding documentation for more detail.\n\n* [Chart News Events](../../news_events)\n* [Chart Trades](../../trades)\n\n## Custom Overlays\n\nTradeX-chart exports the ``Overlay`` class for you extend to build your own custom overlays.\n\n```javascript\nimport { overlays } from \"tradex-chart\"\n```\n\nThe [TradeX-chart GitHub repository](https://github.com/tradex-app/TradeX-chart/tree/master/src/components/overlays) is a good starting point for examples of how to build overlays.\n\n### Basic Custom Overlay\n\nThe foundation of an overlay looks like the following:\n\n```javascript\nimport { overlays } from \"tradex-chart\"\n\nexport default class customOverlay extends Overlay {\n\n  constructor(target, xAxis=false, yAxis=false, theme, parent) {\n    // instantiate parent class Overlay\n    super(target, xAxis, yAxis, theme, parent)\n  }\n\n  // position() will pan / scroll your overlay with the rest of the chart\n  set position(p) { this.target.setPosition(p[0], p[1]) }\n  // if you want your overlay NOT to pan / scroll, then replace the above with:\n  // set position(p) { this.target.setPosition(0, 0) }\n\n  // draw your overlay\n  draw(range=this.core.range) {\n  \n    // clear the layer provided to your overlay\n    this.scene.clear()\n    // HTML canvas context\n    const ctx = this.scene.context\n    ctx.save();\n\n    // draw something on the canvas\n\n    ctx.restore()\n  }\n}\n```\n\n### What the Parent Overlay Class Provides\n\nThe parent ``Overlay`` class provides everything needed to draw on the chart.\n\n| Name    | Description                                            |\n| --------- | -------------------------------------------------------- |\n| core    | [chart root API](../../api/core)                       |\n| parent  | pane that overlay is applied to                        |\n| config  | [chart config](../02_configuration)                    |\n| theme   | [chart theme](../themes)                               |\n| params  | parameters that the overlay was created with           |\n| target  | layer methods and properties                           |\n| scene   | layer canvas provided to the overlay                   |\n| chart   | chart pane                                             |\n| xAxis   | methods and properties for the timeline                |\n| yAxis   | methods and properties for the (price) scale           |\n| context | \"chart\", \"xAxis\", \"yAxis\" - where the overlay is added |\n\n### Drawing on the Overlay\n\nTODO:\n\n### Adding a Custom Overlay to the Chart\n\nTODO:\n";
						const data = {title:"Overlays",description:"Overlays in the simplest form are a chart pane layer",editUrl:true,head:[],template:"doc"};
						const _internal = {
							type: 'content',
							filePath: "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/overlays.md",
							rawData: "\ntitle: Overlays\ndescription: Overlays in the simplest form are a chart pane layer",
						};

export { _internal, body, collection, data, id, slug };
