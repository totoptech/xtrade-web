const id = "reference/hit_detection.md";
						const collection = "docs";
						const slug = "reference/hit_detection";
						const body = "\nThe TradeX-chart [Canvas Extension Layers](../canvas_extension_layers) (CEL)provides and API for pixel perfect [hit detection](../canvas_extension_layers#hit-detection) of pointers.\n\nThe Hit Detection API is accessible for each layer created with CEL via the hit property.\n\n```javascript\nconst layer = new CEL.Layer(cfg);\nconst hit = layer.hit\n```\nHowever you typically will be accessing this through your own [custom indicator](../indicators/#custom-indicators) or [overlays](../overlays/#custom-overlays).\n\nThe Hit Detection is a non-visible ``<canvas></canvas>`` of the same dimensions as it's parent layer. As it is a HTML canvas element, all of the same canvas methods are used to draw on it.\n\nTypically, the image (icon, line, candle) that you draw on your indicator or overlay layer, you repeat on the hit layer, but with one major difference.\n\nImages drawn on the hit layer are of one single colour and that colour is provided to you by the Hit API.\n\n```javascript\nconst hit = layer.hit\nconst col = hit.getIndexValue(key)\n```\nThe ``key`` or ``ID`` value provided to ``getIndexValue(key)`` is a unique user assigned ``number`` for each item on the layer that you wish to detect any pointer interaction with.\n\nThe returned value is used as the fill or stroke on the Hit canvas.\n\n```javascript\nconst ctx = layer.scene.context\nconst hit = layer.hit\nconst col = hit.getIndexValue(key)\n\nctx.stroke = col\nctx.fillStyle = col\n// draw something\n```\n\nYour custom indicator or overlay would subscribe to one of the chart pointer events and on a pointer event, test if the pointer x,y position returns a match from the Hit API.\n\n```javascript\nconstructor() {\n  this.core.on(\"primary_pointerdown\", this.isSelected.bind(this))\n}\n\nisSelected(e) {\n  const x = e[0]\n  const y = e[1]\n  const k = this.layer.hit.getIntersection(x,y)\n\n  // no hit on layer\n  if (k == -1) return\n\n  switch(k) {\n    case 0: \n      // do something for first item\n      break;\n    case 1:\n      // do something for second item\n      break;\n  }\n}\n```\n\nThe Hit API can test for a potential maximum of 16777216 items, but effectively, this would very likely be much less owing to browser resource limitations.";
						const data = {title:"Hit Detection",description:"How to make use of pixel perfect hit detection for pointers",editUrl:true,head:[],template:"doc"};
						const _internal = {
							type: 'content',
							filePath: "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/hit_detection.md",
							rawData: "\ntitle: \"Hit Detection\"\ndescription: \"How to make use of pixel perfect hit detection for pointers\"",
						};

export { _internal, body, collection, data, id, slug };
