const id = "reference/canvas_methods.md";
						const collection = "docs";
						const slug = "reference/canvas_methods";
						const body = "\n\nTradeX-chart provides a collection of ``canvas`` drawing methods.\n\nThey are available via the exported ``canvas`` object.\n\n```javascript\nimport { canvas } from 'tradex-chart'\n```\nAnd also via the ``Indicator`` class used for [building custom indicators](../indicators/#custom-indicators), accessable via the ``plot( plots, type, opts )`` method.\n\n* [``renderLine``](#renderline)\n* [``renderLineHorizontal``](#renderlinehorizontal)\n* [``renderLineVertical``](#renderlinevertical)\n* [``renderPathStroke``](#renderpathstroke)\n* [``renderPathClosed``](#renderpathclosed)\n* [``renderSpline``](#renderspline)\n* [``renderRect``](#renderrect)\n* [``renderPolygonRegular``](#renderpolygonregular)\n* [``renderPolygonIrregular``](#renderpolygonirregular)\n* [``renderRectRound``](#renderrectround)\n* [``renderTriangle``](#rendertriangle)\n* [``renderDiamond``](#renderdiamond)\n* [``renderCircle``](#rendercircle)\n* [``renderImage``](#renderimage)\n\n## renderLine\nRender line - open path\n\n* @param {Object} ctx - canvas reference\n* @param {Array} coords - array of x y coords ``[{x:x, y:y}, ...]``\n* @param {Object} opts \n\n## renderLineHorizontal\nDraw a horizontal straight line\n\n* @param {Object} ctx - canvas reference\n* @param {number} y - canvas pixel position\n* @param {number} left - canvas pixel position\n* @param {number} right - canvas pixel position\n* @param {Object} opts \n\n## renderLineVertical\nDraw a vertical straight line\n\n* @param {Object} ctx - canvas reference\n* @param {number} x - canvas pixel position\n* @param {number} top - canvas pixel position\n* @param {number} bottom - canvas pixel position\n* @param {Object} opts \n## renderPathStroke\nRender an open path of multiple points\n\n* @param {Object} ctx - canvas reference\n* @param {Array} coords - array of x y coords ``[{x:x, y:y}, ...]``\n* @param {Object} style - {width, stroke, dash}\n## renderPathClosed\nRender unfilled closed path of multiple points\n\n* @param {Object} ctx - canvas reference\n* @param {Array} coords - array of x y coords ``[{x:x, y:y}, ...]``\n* @param {Object} style - {width, stroke, fill, dash}\n## renderSpline\nDraw Spline of multiple points\n\n* @param {canvas} ctx - HTML Canvas\n* @param {Array} points - array of points ``[{x:x, y:y}, ...]``\n* @param {number} tension\n## renderRect\nStroked and or Filled rectangle\n\n* @param {Object} ctx - canvas reference\n* @param {number} x - canvas pixel position\n* @param {number} y - canvas pixel position\n* @param {number} w - width pixel distance\n* @param {number} h - height pixel distance\n* @param {Object} opts - {fill, size, border}\n## renderRectRound\nRounded filled rectangle with border\n\n* @param {Object} ctx - canvas reference\n* @param {number} x - canvas pixel position\n* @param {number} y - canvas pixel position\n* @param {number} w - width pixel distance\n* @param {number} h - height pixel distance\n* @param {number} r - radius pixel distance\n* @param {Object} opts - {fill, border, size}\n## renderPolygonRegular\nDraw Regular Polygon \n\n* @param {canvas} ctx - HTML Canvas\n* @param {number} x\n* @param {number} y\n* @param {number} radius\n* @param {number} sides\n* @param {number} rotateAngle - 90 degrees(negative direction i.e., -Math.PI/2) \n* @param {Object} opts - {fill, size, border, rotate}\n## renderPolygonIrregular\nDraw Irregular Polygon\n\n* @param {canvas} ctx - HTML Canvas\n* @param {Array} points - array of points ``[{x:x, y:y}, ...]``\n* @param {Object} opts - {fill, size, border, rotate}\n## renderTriangle\nRender triangle\n\n* @param {Object} ctx - canvas reference\n* @param {number} x - canvas pixel position\n* @param {number} y - canvas pixel position\n* @param {number} h - height pixel distance\n* @param {Object} opts - {fill, size, border, rotate}\n## renderDiamond\nRender diamond\n\n* @param {Object} ctx - canvas reference\n* @param {number} x - canvas pixel position\n* @param {number} y - canvas pixel position\n* @param {number} w - width pixel distance\n* @param {number} h - height pixel distance\n* @param {Object} opts - {fill, size, border, rotate}\n## renderCircle\nDraw a solid circle with border\n\n* @param {Object} ctx - canvas reference\n* @param {number} x - canvas pixel position\n* @param {number} y - canvas pixel position\n* @param {number} r - radius pixel distance\n* @param {Object} opts - {border, size, fill}\n## renderImage\nDraw image to canvas\nhttps://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images\n\n* @param {canvas} cxt\n* @param {image} image - (CSSImageValue or HTMLImageElement or SVGImageElement or HTMLVideoElement or HTMLCanvasElement or ImageBitmap or OffscreenCanvas)\n* @param {number} sx - x or source x\n* @param {number} sy - y or source y\n* @param {number} sWidth - width or source width\n* @param {number} sHeight - height or source height\n* @param {number} dx - destination x\n* @param {number} dy - destination y\n* @param {number} dWidth - destination width\n* @param {number} dHeight - destination height\n";
						const data = {title:"Canvas Methods",editUrl:true,head:[],template:"doc"};
						const _internal = {
							type: 'content',
							filePath: "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/canvas_methods.md",
							rawData: "\ntitle: Canvas Methods",
						};

export { _internal, body, collection, data, id, slug };
