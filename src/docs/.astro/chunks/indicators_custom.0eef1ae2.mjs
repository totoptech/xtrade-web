import { i as createVNode, F as Fragment, s as spreadAttributes } from './astro.7b6fbd1f.mjs';
import '@astrojs/internal-helpers/path';
import 'node:fs';
import 'node:path';
import 'node:url';
import 'slash';
import 'node:fs/promises';
import './pages/404.astro.1d69ba63.mjs';
import 'html-escaper';
import 'fs';
import 'path';
/* empty css                        */import 'zod';
/* empty css                                                             */import 'execa';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<p>Developers are not restricted to using only the <a href=\"../indicators_default\">default indicators</a> provided by TradeX-chart. After all, everybody has their own secret methods for finding signals in the market.</p>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p>Please first read the <a href=\"../indicators\">Indicators</a> documentation before proceeding with custom indicators, as the later extends the former and inherits the bulk of it’s properties, methods and functionality from it.</p></section></aside>\n<p>If you examine the repo for the <code>Indicator</code> class <code>./src/components/overlays/indicator.js</code> you will note that the Indicator class itself extends the <code>Overlay</code> class <code>./src/components/overlays/overlay.js</code> which provides all of the methods for it to be rendered to the chart pane in the render loop. It also provides the canvas for your indicator to draw on.</p>\n<h3 id=\"registering-custom-indicators\">Registering Custom Indicators</h3>\n<p>Before any custom indicator can be used, it first must be registered with the chart.</p>\n<p>During the registration of custom indicators, there is the option to expunge all of the default indicators, thereby allowing the developer to replace them all, or select which to keep.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6B737C\">// custom indicator class</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> TEST </span><span style=\"color: #F97583\">from</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"testIndicator\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6B737C\">/**</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\"> * set indicators</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\"> * </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Object}</span><span style=\"color: #6B737C\"> i - indicators {id, name, event, ind}</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\"> * </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{boolean}</span><span style=\"color: #6B737C\"> flush - expunge default indicators</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\"> * </span><span style=\"color: #F97583\">@returns</span><span style=\"color: #6B737C\"> boolean</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\"> */</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">chart</span><span style=\"color: #B392F0\">.setIndicators({</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  TEST</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {id</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"TEST\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> name</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"Custom Indicator\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> event</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"addIndicator\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> ind</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">TEST</span><span style=\"color: #B392F0\">}</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> false</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">})</span></span></code></pre>\n<p>The list of registered indicators, both default and custom can be accessed via the chart API.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6B737C\">// returns a Map() iterator of indicators</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">primaryPaneIndicators</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">Indicators</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">primary</span><span style=\"color: #B392F0\">.entries()</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">secondaryPaneIndicators</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">Indicators</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">secondary</span><span style=\"color: #B392F0\">.entries()</span></span></code></pre>\n<h3 id=\"indicator-definitions\">Indicator Definitions</h3>\n<h4 id=\"local-y-axis-range\">Local Y-Axis Range</h4>\n<p>If the indicator is not overlaid on the Primary Chart Pane, and instead on a Secondary Chart Pane, there is the option to set the local Y-Axis range, min and max values which will be used for the scale and plotting the indicator.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">chart</span><span style=\"color: #B392F0\">.setLocalRange(</span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">150</span><span style=\"color: #B392F0\">)</span></span></code></pre>\n<h4 id=\"legend\">Legend</h4>\n<p>Each <a href=\"../legends\">indicator</a> has a legend to display it’s information. The legend also provides a simple GUI of icons to modify the indicator.</p>\n<p>Indicators must provide a <code>legendInputs(pos)</code> method. The chart will pass the current mouse position to the indicator in an array, <code>[x, y]</code>.</p>\n<p>Legends can display multiple values if formatted correctly.</p>\n<p>If the indicator provides no values for it’s legend then simply return false.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">legendInputs() {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">false</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">}</span></span></code></pre>\n<p>When the indicator does provide values for it’s legend, then the <code>legendInputs()</code> method must return an object with three entries.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> {inputs</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> colours</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> labels}</span></span></code></pre>\n<p>where the three entries are defined as the following:</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6B737C\">/**</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">  </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Object}</span><span style=\"color: #6B737C\"> inputs - property names are used as labels</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">  </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Array}</span><span style=\"color: #6B737C\"> colours - array of #rrggbb(aa) values</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">  </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Array}</span><span style=\"color: #6B737C\"> labels - array of which input labels to dispaly [true, false, ...]</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">*/</span></span></code></pre>\n<h5 id=\"inputs\">inputs</h5>\n<p>is an object that provides the legend labels and values.\nFor example the Bollinger Band indicator has three values. It’s returned <code>inputs</code> object would look like the following:</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">{ Hi</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"13016.1\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> Mid</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"13011.2\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> Lo</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"13006.2\"</span><span style=\"color: #B392F0\"> }</span></span></code></pre>\n<p>The object property names are used as the labels for the indicator.\nThe Bollinger Band indicator legend would look like this on the chart:</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\"> Hi</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">13016.1</span><span style=\"color: #B392F0\">  Mid</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">13011.2</span><span style=\"color: #B392F0\">  Lo</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">13006.2</span></span></code></pre>\n<p>If you wanted a label with spaces, then the object property name would have to be quoted. <code>\"some value\": 12345</code></p>\n<h5 id=\"colours\">colours</h5>\n<p>is an array of <code>\"#rrggbb(aa)\"</code> string values corresponding to the legend values</p>\n<h5 id=\"lables\">lables</h5>\n<p>is an array that specifies which of the legend labels are displayed.\nIn the Bollinger Band example, if you wanted to silence all labels, use an array of <code>[false, false, false]</code>.</p>\n<h4 id=\"canvas-drawing-methods\">Canvas Drawing Methods</h4>\n<p>The base <code>Indicator</code> class which all others, including custom indicators are built atop, offers the <code>plot()</code> method for drawing to the canvas.</p>\n<p>The <code>Indicator</code> class also exposes a pointer to the canvas directly, so you could also use your own functions instead.</p>\n<p>Refer to the <a href=\"../canvas_mehtods\">Canvas Methods documentation</a> for the available functions.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.plot (plots</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> type</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> opts )</span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Parameters</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>plots</td><td>Array</td><td>array of x y coords [ { x, y }, …]</td></tr><tr><td>type</td><td>string</td><td><a href=\"../canvas_mehtods\">Canvas Methods documentation</a></td></tr><tr><td>opts</td><td>object</td><td><a href=\"../canvas_mehtods\">Canvas Methods documentation</a></td></tr></tbody></table>\n<h4 id=\"minimal-custom-indicator-definition\">Minimal Custom Indicator Definition</h4>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6B737C\">// custom-indicator.js</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// proof of concept for user defined indicators</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// importing talibAPI is only required if you intend to use the talib functions provided by the chart to calculate your indicator</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> { Indicator</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> Range</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> talibAPI</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> uid } </span><span style=\"color: #F97583\">from</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"tradex-chart\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">default</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> Test </span><span style=\"color: #F97583\">extends</span><span style=\"color: #B392F0\"> Indicator {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  name </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"Test Custom Inicator\"</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  shortName </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"Test\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  timePeriod </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">20</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  #defaultStyle </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    stroke</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"#0088cc\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    width</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"1\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    dash</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">undefined</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  style </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">static</span><span style=\"color: #B392F0\"> inCnt </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">0</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">static</span><span style=\"color: #B392F0\"> primaryPane </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">true</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// static scale is required for off chart indicators</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// static scale = YAXIS_TYPES[0] // YAXIS_TYPES - default</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">static</span><span style=\"color: #B392F0\"> colours </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> []</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">/**</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * Creates an instance of Test.</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Object}</span><span style=\"color: #6B737C\"> target - canvas scene</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Object}</span><span style=\"color: #6B737C\"> xAxis - timeline axis instance</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Object}</span><span style=\"color: #6B737C\"> yAxis - scale axis instance</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Object}</span><span style=\"color: #6B737C\"> config - theme / styling</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Object}</span><span style=\"color: #6B737C\"> parent - chart pane instance that hosts the indicator</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Object}</span><span style=\"color: #6B737C\"> params - contains minimum of overlay instance</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * </span><span style=\"color: #F97583\">@memberof</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">Test</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   */</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">constructor</span><span style=\"color: #B392F0\">(target</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> xAxis</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">false</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> yAxis</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">false</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> config</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> parent</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> params) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    super(target</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> xAxis</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> yAxis</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> config</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> parent</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> params)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">overlay</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">params</span><span style=\"color: #B392F0\">.overlay</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// initialize indicator values</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.id </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">params</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">overlay</span><span style=\"color: #B392F0\">?.id </span><span style=\"color: #F97583\">||</span><span style=\"color: #B392F0\"> uid(</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.shortName)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// merge user defined settings (if any) with defaults</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.style </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">overlay</span><span style=\"color: #B392F0\">?.</span><span style=\"color: #79B8FF\">settings</span><span style=\"color: #B392F0\">?.style) </span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">?</span><span style=\"color: #B392F0\"> { </span><span style=\"color: #F97583\">...</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.#defaultStyle</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">...</span><span style=\"color: #79B8FF\">overlay</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">settings</span><span style=\"color: #B392F0\">.style } </span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> { </span><span style=\"color: #F97583\">...</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.#defaultStyle</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">...</span><span style=\"color: #79B8FF\">config</span><span style=\"color: #B392F0\">.style }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// calculate back history if missing</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.calcIndicatorHistory()</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// enable processing of price stream</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.setUpdateValue </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> (value) </span><span style=\"color: #F97583\">=></span><span style=\"color: #B392F0\"> { </span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.updateValue(value) </span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// add the indicator legend to the chart pane</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.addLegend()</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// set the local range max min Y-Axis values if required</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// this.chart.setLocalRange(0, 150)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">/**</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * define where indicator should be displayed</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * valid returned values can be: true, false (boolean), both (string)</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * </span><span style=\"color: #F97583\">@readonly</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   */</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">get</span><span style=\"color: #B392F0\"> primaryPane() { </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">Test</span><span style=\"color: #B392F0\">.primaryPane }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">get</span><span style=\"color: #B392F0\"> defaultStyle() { </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.#defaultStyle }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">/**</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * return inputs required to display indicator legend on chart pane</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * legends can display multiple values</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Array}</span><span style=\"color: #6B737C\"> [pos</span><span style=\"color: #F97583\">=</span><span style=\"color: #6B737C\">this.chart.cursorPos] - optional</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * </span><span style=\"color: #F97583\">@returns</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Object}</span><span style=\"color: #6B737C\"> - {inputs, colours, labels}</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   */</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  legendInputs(pos</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">chart</span><span style=\"color: #B392F0\">.cursorPos) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">overlay</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">data</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">length</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">==</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">) </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">false</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// determine which legend labels to display</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> labels </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> [</span><span style=\"color: #79B8FF\">false</span><span style=\"color: #B392F0\">]</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// c - retrieve data index</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> {c</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> colours} </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> super.legendInputs(pos)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// build an object of input keys (labels) and values</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> inputs </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> {x</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">scale</span><span style=\"color: #B392F0\">.nicePrice(</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">overlay</span><span style=\"color: #B392F0\">.data[c][</span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #B392F0\">])}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">/**</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">      </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Object}</span><span style=\"color: #6B737C\"> inputs - property names are used as labels</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">      </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Array}</span><span style=\"color: #6B737C\"> colours - array of #rrggbb(aa) values</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">      </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Array}</span><span style=\"color: #6B737C\"> labels - array of which input labels to dispaly [true, false, ...]</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">    */</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> {inputs</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> colours</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> labels}</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">/**</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * process new candle stream value</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Array}</span><span style=\"color: #6B737C\"> candle - [timestamp, open, high, low, close, volume]</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * </span><span style=\"color: #F97583\">@memberof</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">Test</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   */</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  updateValue(candle) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.value </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> candle</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  calcIndicator(range</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.range) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> start</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> end;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// number of values to use in indicator calculation</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> p </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.timePeriod</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// is it a Range instance?</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\">(range </span><span style=\"color: #F97583\">instanceof</span><span style=\"color: #B392F0\"> Range) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #6B737C\">// if not calculate entire history</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      start </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">0</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      end </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">range</span><span style=\"color: #B392F0\">.dataLength </span><span style=\"color: #F97583\">-</span><span style=\"color: #B392F0\"> p </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">1</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">else</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> ( </span><span style=\"color: #FFAB70\">\"indexStart\"</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">in</span><span style=\"color: #B392F0\"> range </span><span style=\"color: #F97583\">||</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"indexEnd\"</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">in</span><span style=\"color: #B392F0\"> range </span><span style=\"color: #F97583\">||</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">              </span><span style=\"color: #FFAB70\">\"tsStart\"</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">in</span><span style=\"color: #B392F0\"> range </span><span style=\"color: #F97583\">||</span><span style=\"color: #B392F0\">  </span><span style=\"color: #FFAB70\">\"tsEnd\"</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">in</span><span style=\"color: #B392F0\"> range ) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      start </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">range</span><span style=\"color: #B392F0\">.indexStart </span><span style=\"color: #F97583\">||</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">Timeline</span><span style=\"color: #B392F0\">.t2Index(</span><span style=\"color: #79B8FF\">range</span><span style=\"color: #B392F0\">.tsStart </span><span style=\"color: #F97583\">||</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">) </span><span style=\"color: #F97583\">||</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">0</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      end </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">range</span><span style=\"color: #B392F0\">.indexEnd </span><span style=\"color: #F97583\">||</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">Timeline</span><span style=\"color: #B392F0\">.t2Index(</span><span style=\"color: #79B8FF\">range</span><span style=\"color: #B392F0\">.tsEnd) </span><span style=\"color: #F97583\">||</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">range</span><span style=\"color: #B392F0\">.Length </span><span style=\"color: #F97583\">-</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">1</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      end </span><span style=\"color: #F97583\">-</span><span style=\"color: #B392F0\"> p</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">else</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">false</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// if not enough data for calculation fail</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> ( end </span><span style=\"color: #F97583\">-</span><span style=\"color: #B392F0\"> start </span><span style=\"color: #F97583\">&#x3C;</span><span style=\"color: #B392F0\"> p ) </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">false</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> data </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> [];</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> i</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> v</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> entry;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">while</span><span style=\"color: #B392F0\"> (start </span><span style=\"color: #F97583\">&#x3C;</span><span style=\"color: #B392F0\"> end) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #6B737C\">// fetch the data required to calculate the indicator</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      input </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.indicatorInput(start</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> start </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> p)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\"> </span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #6B737C\">// do your indicator calculation</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      v </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> doSomething(input)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #79B8FF\">data</span><span style=\"color: #B392F0\">.push([</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">range</span><span style=\"color: #B392F0\">.value(start </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> p </span><span style=\"color: #F97583\">-</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #B392F0\">)[</span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">]</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> v])</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      start</span><span style=\"color: #F97583\">++</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> data</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  calcIndicatorHistory() {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// if overlay history is missing, calculate it</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">overlay</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">data</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">length</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">&#x3C;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.timePeriod) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">data</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.calcIndicator()</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (data) </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">overlay</span><span style=\"color: #B392F0\">.data </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> data</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">/**</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * draw the indicator</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   * </span><span style=\"color: #F97583\">@param</span><span style=\"color: #6B737C\"> </span><span style=\"color: #B392F0\">{Object}</span><span style=\"color: #6B737C\"> range - current displayed range of candles</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">   */</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  draw(range</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.range) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// minimum of two candles are required for this indicator</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">overlay</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">data</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">length</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">&#x3C;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">2</span><span style=\"color: #B392F0\"> ) </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">false</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// clear the indicator overlay (chart layer)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\">.clear()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// draw your indicator...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// array to hold sequence points to draw</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">plots</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> []</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// indicator data</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">data</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">overlay</span><span style=\"color: #B392F0\">.data</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// current candle width, chart zoom modifies this</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">width</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">xAxis</span><span style=\"color: #B392F0\">.candleW</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// basic plot entry</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">plot</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      w</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> width</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// first timestamp in current range</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> t </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">range</span><span style=\"color: #B392F0\">.value(</span><span style=\"color: #79B8FF\">range</span><span style=\"color: #B392F0\">.indexStart)[</span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">]</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> s </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">overlay</span><span style=\"color: #B392F0\">.data[</span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">][</span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">]</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> c </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> (t </span><span style=\"color: #F97583\">-</span><span style=\"color: #B392F0\"> s) </span><span style=\"color: #F97583\">/</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">range</span><span style=\"color: #B392F0\">.interval</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> o </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">Timeline</span><span style=\"color: #B392F0\">.rangeScrollOffset;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> i </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">range</span><span style=\"color: #B392F0\">.Length </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> o </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">2</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> style </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">while</span><span style=\"color: #B392F0\">(i) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (c </span><span style=\"color: #F97583\">&#x3C;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">||</span><span style=\"color: #B392F0\"> c </span><span style=\"color: #F97583\">>=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">overlay</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">data</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">length</span><span style=\"color: #B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">plots</span><span style=\"color: #B392F0\">.push({x</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> y</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #B392F0\">})</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">else</span><span style=\"color: #B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">plot</span><span style=\"color: #B392F0\">.x </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">xAxis</span><span style=\"color: #B392F0\">.xPos(data[c][</span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">])</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">plot</span><span style=\"color: #B392F0\">.y </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">yAxis</span><span style=\"color: #B392F0\">.yPos(data[c][</span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #B392F0\">])</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">plots</span><span style=\"color: #B392F0\">.push({</span><span style=\"color: #F97583\">...</span><span style=\"color: #B392F0\">plot})</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      c</span><span style=\"color: #F97583\">++</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      i</span><span style=\"color: #F97583\">--</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// process the plots</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.plot(plots</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"renderLine\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.style)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// render the indicator</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">target</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">viewport</span><span style=\"color: #B392F0\">.render();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">}</span></span></code></pre>\n<h2 id=\"settings\">Settings</h2>\n<p>Current indicator settings can be retrieved with the following call:</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.getIndicator(</span><span style=\"color: #FFAB70\">\"TX_lj7216mu_vq6_0-Chart_0-EMA_1\"</span><span style=\"color: #B392F0\">).settings()</span></span></code></pre>\n<p>Indicator settings can also modified with the same call by passing an object:</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">newSettings</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> {}</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.getIndicator(</span><span style=\"color: #FFAB70\">\"TX_lj7216mu_vq6_0-Chart_0-EMA_1\"</span><span style=\"color: #B392F0\">).settings(newSettings)</span></span></code></pre>\n<h3 id=\"invokeing-the-settings-dialogue\">Invokeing the Settings Dialogue</h3>\n<p>The indicator Settings Dialogue can be invoked with the following:</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.getIndicator(</span><span style=\"color: #FFAB70\">\"TX_lj7216mu_vq6_0-Chart_0-EMA_1\"</span><span style=\"color: #B392F0\">).invokeSettings()</span></span></code></pre>\n<p>Invocation of the Settings Dialogue can be modified or replaced with a user defined function, either by passing an object to the method:</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">callback</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    indicatorSettings</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {fn</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> (c)</span><span style=\"color: #F97583\">=></span><span style=\"color: #B392F0\">{ alert(</span><span style=\"color: #79B8FF\">c</span><span style=\"color: #B392F0\">.id) }</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> own</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">true</span><span style=\"color: #B392F0\">}</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  }</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.getIndicator(</span><span style=\"color: #FFAB70\">\"TX_lj7216mu_vq6_0-Chart_0-EMA_1\"</span><span style=\"color: #B392F0\">).invokeSettings(callback)</span></span></code></pre>\n<p>Setting <code>own: true</code> will cause the default dialogue not to be invoked.</p>\n<p>Alternatively, if in the initial chart configuration, the <code>config.callbacks.indicatorSettings</code> is given a callback object, this will make the change permanent.</p>\n<h2 id=\"how-the-indicator-updates\">How the Indicator Updates</h2>\n<p>Initial data is passed to the indicator via the <a href=\"../state\">Chart State</a>. It can also be <a href=\"../state#merging-data-into-the-state\">added later (updated)</a> via the API which handles the Chart State.\n<a href=\"../streaming_price_data\">Streaming data (OHLCV)</a> can also be fed to the custom indicator.\nIf you take a look at the example in the repo <code>./custom-indicator.js</code>  you will see the following methods:</p>\n<ul>\n<li><code>updateValue()</code> - accepts the streaming data <code>{Array.&#x3C;number>} candle - [timestamp, open, high, low, close, volume]</code></li>\n<li><code>calcIndicator()</code> - accepts the Range <code>range=this.range</code></li>\n<li><code>legendInputs()</code> - accepts cursor pos on chart which is automatically passed to it by the chart</li>\n<li><code>draw()</code> - accepts the Range <code>range=this.range</code></li>\n</ul>\n<p>These are the four main methods of your custom indicator, which extends the default indicator class.</p>\n<p>If you examine the demo test page ./index.js and examine the function <code>kline_Binance()</code> you will see that the data stream is passed to the chart via <code>mergeData()</code>. The chart distributes this value to all indicators active on the chart via their <code>updateValue()</code> method, which is why this method is required for your own custom indicator.</p>\n<p>Any<code> mergeData()</code> call, whether for a block of back history or a single streaming candle, will automatically invoke each indicator’s <code>calcIndicator()</code>, which is why it is also a requirement for your own custom indicators.</p>\n<p><code>draw()</code> is also automatically invoked on all indicators, including custom indicators if there is any chart event that triggers the chart to update and redraw. This too must be provided by your custom indicator. </p>\n<h2 id=\"indicator-calculation\">Indicator Calculation</h2>\n<p>Of course the <a href=\"indicators_talib\">functions provided by the TA-Lib</a> can be leveraged for custom indicators via the chart API. The chart will take care of initializing the TA-Lib wasm component and return a promise.</p>\n<p>Firstly your indicator needs to import the <code>talibAPI</code> that the chart exports. Doing so provides you with all of the talib function definitions which tell you what inputs the function requires and what output it will return.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> { talibAPI } </span><span style=\"color: #F97583\">from</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"../definitions/talib-api\"</span><span style=\"color: #B392F0\">;</span></span></code></pre>\n<p>You can also import only the required definitions for the functions you want to work with.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> { AROON } </span><span style=\"color: #F97583\">from</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"../definitions/talib-api\"</span><span style=\"color: #B392F0\">;</span></span></code></pre>\n<p>All indicators relying upon TA-Lib functions should defer any data processing until the promise is fulfilled.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">core</span><span style=\"color: #B392F0\">.TALibReady) calc()</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">else</span><span style=\"color: #B392F0\">  </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">core</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">talibAwait</span><span style=\"color: #B392F0\">.push(</span><span style=\"color: #79B8FF\">calc</span><span style=\"color: #B392F0\">.bind(</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">))</span></span></code></pre>");

				const frontmatter = {"title":"Custom Indicators","description":"Defining, registering and working with custom indicators"};
				const file = "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/indicators_custom.md";
				const url = undefined;
				function rawContent() {
					return "\nDevelopers are not restricted to using only the [default indicators](../indicators_default) provided by TradeX-chart. After all, everybody has their own secret methods for finding signals in the market.\n\n:::note\nPlease first read the [Indicators](../indicators) documentation before proceeding with custom indicators, as the later extends the former and inherits the bulk of it's properties, methods and functionality from it.\n:::\n\nIf you examine the repo for the ``Indicator`` class ``./src/components/overlays/indicator.js`` you will note that the Indicator class itself extends the ``Overlay`` class ``./src/components/overlays/overlay.js`` which provides all of the methods for it to be rendered to the chart pane in the render loop. It also provides the canvas for your indicator to draw on.\n\n### Registering Custom Indicators\n\nBefore any custom indicator can be used, it first must be registered with the chart.\n\nDuring the registration of custom indicators, there is the option to expunge all of the default indicators, thereby allowing the developer to replace them all, or select which to keep.\n\n```javascript\n// custom indicator class\nimport TEST from \"testIndicator\"\n\n/**\n * set indicators\n * @param {Object} i - indicators {id, name, event, ind}\n * @param {boolean} flush - expunge default indicators\n * @returns boolean\n */\nchart.setIndicators({\n  TEST: {id: \"TEST\", name: \"Custom Indicator\", event: \"addIndicator\", ind: TEST}, false\n})\n```\n\nThe list of registered indicators, both default and custom can be accessed via the chart API.\n\n```javascript\n// returns a Map() iterator of indicators\nconst primaryPaneIndicators = chart.Indicators.primary.entries()\nconst secondaryPaneIndicators = chart.Indicators.secondary.entries()\n```\n\n### Indicator Definitions\n\n#### Local Y-Axis Range\n\nIf the indicator is not overlaid on the Primary Chart Pane, and instead on a Secondary Chart Pane, there is the option to set the local Y-Axis range, min and max values which will be used for the scale and plotting the indicator.\n\n```javascript\nthis.chart.setLocalRange(0, 150)\n```\n\n#### Legend\n\nEach [indicator](../legends) has a legend to display it's information. The legend also provides a simple GUI of icons to modify the indicator.\n\nIndicators must provide a ``legendInputs(pos)`` method. The chart will pass the current mouse position to the indicator in an array, ``[x, y]``.\n\nLegends can display multiple values if formatted correctly.\n\nIf the indicator provides no values for it's legend then simply return false.\n\n```javascript\nlegendInputs() {\n  return false;\n}\n```\n\nWhen the indicator does provide values for it's legend, then the `legendInputs()` method must return an object with three entries.\n\n```javascript\n return {inputs, colours, labels}\n```\n\nwhere the three entries are defined as the following:\n\n```javascript\n/**\n  @param {Object} inputs - property names are used as labels\n  @param {Array} colours - array of #rrggbb(aa) values\n  @param {Array} labels - array of which input labels to dispaly [true, false, ...]\n*/\n```\n\n##### inputs\n\nis an object that provides the legend labels and values.\nFor example the Bollinger Band indicator has three values. It's returned ``inputs`` object would look like the following:\n\n```javascript\n{ Hi: \"13016.1\", Mid: \"13011.2\", Lo: \"13006.2\" }\n```\n\nThe object property names are used as the labels for the indicator.\nThe Bollinger Band indicator legend would look like this on the chart:\n\n```javascript\n Hi: 13016.1  Mid: 13011.2  Lo: 13006.2\n```\n\nIf you wanted a label with spaces, then the object property name would have to be quoted. ``\"some value\": 12345``\n\n##### colours\n\nis an array of ``\"#rrggbb(aa)\"`` string values corresponding to the legend values\n\n##### lables\n\nis an array that specifies which of the legend labels are displayed.\nIn the Bollinger Band example, if you wanted to silence all labels, use an array of ``[false, false, false]``.\n\n#### Canvas Drawing Methods\n\nThe base ``Indicator`` class which all others, including custom indicators are built atop, offers the ``plot()`` method for drawing to the canvas.\n\nThe ``Indicator`` class also exposes a pointer to the canvas directly, so you could also use your own functions instead.\n\nRefer to the [Canvas Methods documentation](../canvas_mehtods) for the available functions.\n\n```javascript\nthis.plot (plots, type, opts )\n```\n\n\n| Parameters | Type   | Description                                       |\n| ------------ | -------- | --------------------------------------------------- |\n| plots      | Array  | array of x y coords [ { x, y }, ...]             |\n| type       | string | [Canvas Methods documentation](../canvas_mehtods) |\n| opts       | object | [Canvas Methods documentation](../canvas_mehtods) |\n\n#### Minimal Custom Indicator Definition\n\n```javascript\n// custom-indicator.js\n// proof of concept for user defined indicators\n\n// importing talibAPI is only required if you intend to use the talib functions provided by the chart to calculate your indicator\nimport { Indicator, Range, talibAPI, uid } from \"tradex-chart\"\n\nexport default class Test extends Indicator {\n\n  name = \"Test Custom Inicator\"\n  shortName = \"Test\"\n\n  timePeriod = 20\n\n  #defaultStyle = {\n    stroke: \"#0088cc\",\n    width: \"1\",\n    dash: undefined,\n  }\n\n  style = {}\n\n  static inCnt = 0\n  static primaryPane = true\n  // static scale is required for off chart indicators\n  // static scale = YAXIS_TYPES[0] // YAXIS_TYPES - default\n  static colours = []\n\n\n  /**\n   * Creates an instance of Test.\n   * @param {Object} target - canvas scene\n   * @param {Object} xAxis - timeline axis instance\n   * @param {Object} yAxis - scale axis instance\n   * @param {Object} config - theme / styling\n   * @param {Object} parent - chart pane instance that hosts the indicator\n   * @param {Object} params - contains minimum of overlay instance\n   * @memberof Test\n   */\n  constructor(target, xAxis=false, yAxis=false, config, parent, params) {\n    super(target, xAxis, yAxis, config, parent, params)\n\n    const overlay = params.overlay\n    // initialize indicator values\n    this.id = params.overlay?.id || uid(this.shortName)\n    // merge user defined settings (if any) with defaults\n    this.style = (overlay?.settings?.style) \n      ? { ...this.#defaultStyle, ...overlay.settings.style } \n      : { ...this.#defaultStyle, ...config.style }\n    // calculate back history if missing\n    this.calcIndicatorHistory()\n    // enable processing of price stream\n    this.setUpdateValue = (value) => { \n      this.updateValue(value) \n    }\n    // add the indicator legend to the chart pane\n    this.addLegend()\n    // set the local range max min Y-Axis values if required\n    // this.chart.setLocalRange(0, 150)\n  }\n\n  /**\n   * define where indicator should be displayed\n   * valid returned values can be: true, false (boolean), both (string)\n   * @readonly\n   */\n  get primaryPane() { return Test.primaryPane }\n  get defaultStyle() { return this.#defaultStyle }\n\n\n  /**\n   * return inputs required to display indicator legend on chart pane\n   * legends can display multiple values\n   * @param {Array} [pos=this.chart.cursorPos] - optional\n   * @returns {Object} - {inputs, colours, labels}\n   */\n  legendInputs(pos=this.chart.cursorPos) {\n    if (this.overlay.data.length == 0) return false\n\n    // determine which legend labels to display\n    let labels = [false]\n    // c - retrieve data index\n    let {c, colours} = super.legendInputs(pos)\n    // build an object of input keys (labels) and values\n    let inputs = {x: this.scale.nicePrice(this.overlay.data[c][1])}\n\n    /**\n      @param {Object} inputs - property names are used as labels\n      @param {Array} colours - array of #rrggbb(aa) values\n      @param {Array} labels - array of which input labels to dispaly [true, false, ...]\n    */\n    return {inputs, colours, labels}\n  }\n\n  /**\n   * process new candle stream value\n   * @param {Array} candle - [timestamp, open, high, low, close, volume]\n   * @memberof Test\n   */\n  updateValue(candle) {\n    this.value = candle\n  }\n\n  calcIndicator(range=this.range) {\n    let start, end;\n    // number of values to use in indicator calculation\n    let p = this.timePeriod\n\n    // is it a Range instance?\n    if(range instanceof Range) {\n      // if not calculate entire history\n      start = 0\n      end = range.dataLength - p + 1\n    }\n    else if ( \"indexStart\" in range || \"indexEnd\" in range ||\n              \"tsStart\" in range ||  \"tsEnd\" in range ) {\n      start = range.indexStart || this.Timeline.t2Index(range.tsStart || 0) || 0\n      end = range.indexEnd || this.Timeline.t2Index(range.tsEnd) || this.range.Length - 1\n      end - p\n    }\n    else return false\n\n    // if not enough data for calculation fail\n    if ( end - start < p ) return false\n\n    let data = [];\n    let i, v, entry;\n\n    while (start < end) {\n      // fetch the data required to calculate the indicator\n      input = this.indicatorInput(start, start + p)\n \n      // do your indicator calculation\n      v = doSomething(input)\n\n      data.push([this.range.value(start + p - 1)[0], v])\n      start++\n    }\n    return data\n  }\n\n  calcIndicatorHistory() {\n    // if overlay history is missing, calculate it\n    if (this.overlay.data.length < this.timePeriod) {\n      const data = this.calcIndicator()\n      if (data) this.overlay.data = data\n    }\n  }\n  \n  /**\n   * draw the indicator\n   * @param {Object} range - current displayed range of candles\n   */\n  draw(range=this.range) {\n    // minimum of two candles are required for this indicator\n    if (this.overlay.data.length < 2 ) return false\n    // clear the indicator overlay (chart layer)\n    this.scene.clear()\n\n    // draw your indicator...\n\n    // array to hold sequence points to draw\n    const plots = []\n    // indicator data\n    const data = this.overlay.data\n    // current candle width, chart zoom modifies this\n    const width = this.xAxis.candleW\n    // basic plot entry\n    const plot = {\n      w: width,\n    }\n    // first timestamp in current range\n    let t = range.value(range.indexStart)[0]\n    let s = this.overlay.data[0][0]\n    let c = (t - s) / range.interval\n    let o = this.Timeline.rangeScrollOffset;\n    let i = range.Length + o + 2\n    let style = {}\n\n    while(i) {\n      if (c < 0 || c >= this.overlay.data.length) {\n        plots.push({x: null, y: null})\n      }\n      else {\n        plot.x = this.xAxis.xPos(data[c][0])\n        plot.y = this.yAxis.yPos(data[c][1])\n        plots.push({...plot})\n      }\n      c++\n      i--\n    }\n    // process the plots\n    this.plot(plots, \"renderLine\", this.style)\n    // render the indicator\n    this.target.viewport.render();\n  }\n}\n```\n\n## Settings\n\nCurrent indicator settings can be retrieved with the following call:\n\n```javascript\nchart0.getIndicator(\"TX_lj7216mu_vq6_0-Chart_0-EMA_1\").settings()\n```\n\nIndicator settings can also modified with the same call by passing an object:\n\n```javascript\nconst newSettings = {}\nchart0.getIndicator(\"TX_lj7216mu_vq6_0-Chart_0-EMA_1\").settings(newSettings)\n```\n\n### Invokeing the Settings Dialogue\n\nThe indicator Settings Dialogue can be invoked with the following:\n\n```javascript\nchart0.getIndicator(\"TX_lj7216mu_vq6_0-Chart_0-EMA_1\").invokeSettings()\n```\n\nInvocation of the Settings Dialogue can be modified or replaced with a user defined function, either by passing an object to the method:\n\n```javascript\nconst callback = {\n    indicatorSettings: {fn: (c)=>{ alert(c.id) }, own: true}\n  }\nchart0.getIndicator(\"TX_lj7216mu_vq6_0-Chart_0-EMA_1\").invokeSettings(callback)\n```\n\nSetting ``own: true`` will cause the default dialogue not to be invoked.\n\nAlternatively, if in the initial chart configuration, the ``config.callbacks.indicatorSettings`` is given a callback object, this will make the change permanent.\n\n## How the Indicator Updates\n\nInitial data is passed to the indicator via the [Chart State](../state). It can also be [added later (updated)](../state#merging-data-into-the-state) via the API which handles the Chart State.\n[Streaming data (OHLCV)](../streaming_price_data) can also be fed to the custom indicator.\nIf you take a look at the example in the repo ``./custom-indicator.js``  you will see the following methods:\n\n* ``updateValue()`` - accepts the streaming data ``{Array.<number>} candle - [timestamp, open, high, low, close, volume]``\n* ``calcIndicator()`` - accepts the Range ``range=this.range``\n* ``legendInputs()`` - accepts cursor pos on chart which is automatically passed to it by the chart\n* ``draw()`` - accepts the Range ``range=this.range``\n\nThese are the four main methods of your custom indicator, which extends the default indicator class.\n\nIf you examine the demo test page ./index.js and examine the function ``kline_Binance()`` you will see that the data stream is passed to the chart via ``mergeData()``. The chart distributes this value to all indicators active on the chart via their ``updateValue()`` method, which is why this method is required for your own custom indicator.\n\nAny`` mergeData()`` call, whether for a block of back history or a single streaming candle, will automatically invoke each indicator's ``calcIndicator()``, which is why it is also a requirement for your own custom indicators.\n\n``draw()`` is also automatically invoked on all indicators, including custom indicators if there is any chart event that triggers the chart to update and redraw. This too must be provided by your custom indicator. \n\n## Indicator Calculation\n\nOf course the [functions provided by the TA-Lib](indicators_talib) can be leveraged for custom indicators via the chart API. The chart will take care of initializing the TA-Lib wasm component and return a promise.\n\nFirstly your indicator needs to import the ``talibAPI`` that the chart exports. Doing so provides you with all of the talib function definitions which tell you what inputs the function requires and what output it will return.\n\n```javascript\nimport { talibAPI } from \"../definitions/talib-api\";\n```\nYou can also import only the required definitions for the functions you want to work with.\n\n```javascript\nimport { AROON } from \"../definitions/talib-api\";\n```\n\nAll indicators relying upon TA-Lib functions should defer any data processing until the promise is fulfilled.\n\n```javascript\n      if (this.core.TALibReady) calc()\n      else  this.core.talibAwait.push(calc.bind(this))\n```";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":3,"slug":"registering-custom-indicators","text":"Registering Custom Indicators"},{"depth":3,"slug":"indicator-definitions","text":"Indicator Definitions"},{"depth":4,"slug":"local-y-axis-range","text":"Local Y-Axis Range"},{"depth":4,"slug":"legend","text":"Legend"},{"depth":5,"slug":"inputs","text":"inputs"},{"depth":5,"slug":"colours","text":"colours"},{"depth":5,"slug":"lables","text":"lables"},{"depth":4,"slug":"canvas-drawing-methods","text":"Canvas Drawing Methods"},{"depth":4,"slug":"minimal-custom-indicator-definition","text":"Minimal Custom Indicator Definition"},{"depth":2,"slug":"settings","text":"Settings"},{"depth":3,"slug":"invokeing-the-settings-dialogue","text":"Invokeing the Settings Dialogue"},{"depth":2,"slug":"how-the-indicator-updates","text":"How the Indicator Updates"},{"depth":2,"slug":"indicator-calculation","text":"Indicator Calculation"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
