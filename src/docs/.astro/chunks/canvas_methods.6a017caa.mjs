import { i as createVNode, F as Fragment, s as spreadAttributes } from './astro.8a1fcc00.mjs';
import '@astrojs/internal-helpers/path';
import 'node:fs';
import 'node:path';
import 'node:url';
import 'slash';
import 'node:fs/promises';
import './pages/404.astro.3b1f3a71.mjs';
import 'html-escaper';
import 'fs';
import 'path';
/* empty css                        */import 'zod';
/* empty css                                                             */import 'execa';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<p>TradeX-chart provides a collection of <code>canvas</code> drawing methods.</p>\n<p>They are available via the exported <code>canvas</code> object.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> { canvas } </span><span style=\"color: #F97583\">from</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">'tradex-chart'</span></span></code></pre>\n<p>And also via the <code>Indicator</code> class used for <a href=\"../indicators/#custom-indicators\">building custom indicators</a>, accessable via the <code>plot( plots, type, opts )</code> method.</p>\n<ul>\n<li><a href=\"#renderline\"><code>renderLine</code></a></li>\n<li><a href=\"#renderlinehorizontal\"><code>renderLineHorizontal</code></a></li>\n<li><a href=\"#renderlinevertical\"><code>renderLineVertical</code></a></li>\n<li><a href=\"#renderpathstroke\"><code>renderPathStroke</code></a></li>\n<li><a href=\"#renderpathclosed\"><code>renderPathClosed</code></a></li>\n<li><a href=\"#renderspline\"><code>renderSpline</code></a></li>\n<li><a href=\"#renderrect\"><code>renderRect</code></a></li>\n<li><a href=\"#renderpolygonregular\"><code>renderPolygonRegular</code></a></li>\n<li><a href=\"#renderpolygonirregular\"><code>renderPolygonIrregular</code></a></li>\n<li><a href=\"#renderrectround\"><code>renderRectRound</code></a></li>\n<li><a href=\"#rendertriangle\"><code>renderTriangle</code></a></li>\n<li><a href=\"#renderdiamond\"><code>renderDiamond</code></a></li>\n<li><a href=\"#rendercircle\"><code>renderCircle</code></a></li>\n<li><a href=\"#renderimage\"><code>renderImage</code></a></li>\n</ul>\n<h2 id=\"renderline\">renderLine</h2>\n<p>Render line - open path</p>\n<ul>\n<li>@param {Object} ctx - canvas reference</li>\n<li>@param {Array} coords - array of x y coords <code>[{x:x, y:y}, ...]</code></li>\n<li>@param {Object} opts</li>\n</ul>\n<h2 id=\"renderlinehorizontal\">renderLineHorizontal</h2>\n<p>Draw a horizontal straight line</p>\n<ul>\n<li>@param {Object} ctx - canvas reference</li>\n<li>@param {number} y - canvas pixel position</li>\n<li>@param {number} left - canvas pixel position</li>\n<li>@param {number} right - canvas pixel position</li>\n<li>@param {Object} opts</li>\n</ul>\n<h2 id=\"renderlinevertical\">renderLineVertical</h2>\n<p>Draw a vertical straight line</p>\n<ul>\n<li>@param {Object} ctx - canvas reference</li>\n<li>@param {number} x - canvas pixel position</li>\n<li>@param {number} top - canvas pixel position</li>\n<li>@param {number} bottom - canvas pixel position</li>\n<li>@param {Object} opts</li>\n</ul>\n<h2 id=\"renderpathstroke\">renderPathStroke</h2>\n<p>Render an open path of multiple points</p>\n<ul>\n<li>@param {Object} ctx - canvas reference</li>\n<li>@param {Array} coords - array of x y coords <code>[{x:x, y:y}, ...]</code></li>\n<li>@param {Object} style - {width, stroke, dash}</li>\n</ul>\n<h2 id=\"renderpathclosed\">renderPathClosed</h2>\n<p>Render unfilled closed path of multiple points</p>\n<ul>\n<li>@param {Object} ctx - canvas reference</li>\n<li>@param {Array} coords - array of x y coords <code>[{x:x, y:y}, ...]</code></li>\n<li>@param {Object} style - {width, stroke, fill, dash}</li>\n</ul>\n<h2 id=\"renderspline\">renderSpline</h2>\n<p>Draw Spline of multiple points</p>\n<ul>\n<li>@param {canvas} ctx - HTML Canvas</li>\n<li>@param {Array} points - array of points <code>[{x:x, y:y}, ...]</code></li>\n<li>@param {number} tension</li>\n</ul>\n<h2 id=\"renderrect\">renderRect</h2>\n<p>Stroked and or Filled rectangle</p>\n<ul>\n<li>@param {Object} ctx - canvas reference</li>\n<li>@param {number} x - canvas pixel position</li>\n<li>@param {number} y - canvas pixel position</li>\n<li>@param {number} w - width pixel distance</li>\n<li>@param {number} h - height pixel distance</li>\n<li>@param {Object} opts - {fill, size, border}</li>\n</ul>\n<h2 id=\"renderrectround\">renderRectRound</h2>\n<p>Rounded filled rectangle with border</p>\n<ul>\n<li>@param {Object} ctx - canvas reference</li>\n<li>@param {number} x - canvas pixel position</li>\n<li>@param {number} y - canvas pixel position</li>\n<li>@param {number} w - width pixel distance</li>\n<li>@param {number} h - height pixel distance</li>\n<li>@param {number} r - radius pixel distance</li>\n<li>@param {Object} opts - {fill, border, size}</li>\n</ul>\n<h2 id=\"renderpolygonregular\">renderPolygonRegular</h2>\n<p>Draw Regular Polygon</p>\n<ul>\n<li>@param {canvas} ctx - HTML Canvas</li>\n<li>@param {number} x</li>\n<li>@param {number} y</li>\n<li>@param {number} radius</li>\n<li>@param {number} sides</li>\n<li>@param {number} rotateAngle - 90 degrees(negative direction i.e., -Math.PI/2)</li>\n<li>@param {Object} opts - {fill, size, border, rotate}</li>\n</ul>\n<h2 id=\"renderpolygonirregular\">renderPolygonIrregular</h2>\n<p>Draw Irregular Polygon</p>\n<ul>\n<li>@param {canvas} ctx - HTML Canvas</li>\n<li>@param {Array} points - array of points <code>[{x:x, y:y}, ...]</code></li>\n<li>@param {Object} opts - {fill, size, border, rotate}</li>\n</ul>\n<h2 id=\"rendertriangle\">renderTriangle</h2>\n<p>Render triangle</p>\n<ul>\n<li>@param {Object} ctx - canvas reference</li>\n<li>@param {number} x - canvas pixel position</li>\n<li>@param {number} y - canvas pixel position</li>\n<li>@param {number} h - height pixel distance</li>\n<li>@param {Object} opts - {fill, size, border, rotate}</li>\n</ul>\n<h2 id=\"renderdiamond\">renderDiamond</h2>\n<p>Render diamond</p>\n<ul>\n<li>@param {Object} ctx - canvas reference</li>\n<li>@param {number} x - canvas pixel position</li>\n<li>@param {number} y - canvas pixel position</li>\n<li>@param {number} w - width pixel distance</li>\n<li>@param {number} h - height pixel distance</li>\n<li>@param {Object} opts - {fill, size, border, rotate}</li>\n</ul>\n<h2 id=\"rendercircle\">renderCircle</h2>\n<p>Draw a solid circle with border</p>\n<ul>\n<li>@param {Object} ctx - canvas reference</li>\n<li>@param {number} x - canvas pixel position</li>\n<li>@param {number} y - canvas pixel position</li>\n<li>@param {number} r - radius pixel distance</li>\n<li>@param {Object} opts - {border, size, fill}</li>\n</ul>\n<h2 id=\"renderimage\">renderImage</h2>\n<p>Draw image to canvas\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images\">https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images</a></p>\n<ul>\n<li>@param {canvas} cxt</li>\n<li>@param {image} image - (CSSImageValue or HTMLImageElement or SVGImageElement or HTMLVideoElement or HTMLCanvasElement or ImageBitmap or OffscreenCanvas)</li>\n<li>@param {number} sx - x or source x</li>\n<li>@param {number} sy - y or source y</li>\n<li>@param {number} sWidth - width or source width</li>\n<li>@param {number} sHeight - height or source height</li>\n<li>@param {number} dx - destination x</li>\n<li>@param {number} dy - destination y</li>\n<li>@param {number} dWidth - destination width</li>\n<li>@param {number} dHeight - destination height</li>\n</ul>");

				const frontmatter = {"title":"Canvas Methods"};
				const file = "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/canvas_methods.md";
				const url = undefined;
				function rawContent() {
					return "\n\nTradeX-chart provides a collection of ``canvas`` drawing methods.\n\nThey are available via the exported ``canvas`` object.\n\n```javascript\nimport { canvas } from 'tradex-chart'\n```\nAnd also via the ``Indicator`` class used for [building custom indicators](../indicators/#custom-indicators), accessable via the ``plot( plots, type, opts )`` method.\n\n* [``renderLine``](#renderline)\n* [``renderLineHorizontal``](#renderlinehorizontal)\n* [``renderLineVertical``](#renderlinevertical)\n* [``renderPathStroke``](#renderpathstroke)\n* [``renderPathClosed``](#renderpathclosed)\n* [``renderSpline``](#renderspline)\n* [``renderRect``](#renderrect)\n* [``renderPolygonRegular``](#renderpolygonregular)\n* [``renderPolygonIrregular``](#renderpolygonirregular)\n* [``renderRectRound``](#renderrectround)\n* [``renderTriangle``](#rendertriangle)\n* [``renderDiamond``](#renderdiamond)\n* [``renderCircle``](#rendercircle)\n* [``renderImage``](#renderimage)\n\n## renderLine\nRender line - open path\n\n* @param {Object} ctx - canvas reference\n* @param {Array} coords - array of x y coords ``[{x:x, y:y}, ...]``\n* @param {Object} opts \n\n## renderLineHorizontal\nDraw a horizontal straight line\n\n* @param {Object} ctx - canvas reference\n* @param {number} y - canvas pixel position\n* @param {number} left - canvas pixel position\n* @param {number} right - canvas pixel position\n* @param {Object} opts \n\n## renderLineVertical\nDraw a vertical straight line\n\n* @param {Object} ctx - canvas reference\n* @param {number} x - canvas pixel position\n* @param {number} top - canvas pixel position\n* @param {number} bottom - canvas pixel position\n* @param {Object} opts \n## renderPathStroke\nRender an open path of multiple points\n\n* @param {Object} ctx - canvas reference\n* @param {Array} coords - array of x y coords ``[{x:x, y:y}, ...]``\n* @param {Object} style - {width, stroke, dash}\n## renderPathClosed\nRender unfilled closed path of multiple points\n\n* @param {Object} ctx - canvas reference\n* @param {Array} coords - array of x y coords ``[{x:x, y:y}, ...]``\n* @param {Object} style - {width, stroke, fill, dash}\n## renderSpline\nDraw Spline of multiple points\n\n* @param {canvas} ctx - HTML Canvas\n* @param {Array} points - array of points ``[{x:x, y:y}, ...]``\n* @param {number} tension\n## renderRect\nStroked and or Filled rectangle\n\n* @param {Object} ctx - canvas reference\n* @param {number} x - canvas pixel position\n* @param {number} y - canvas pixel position\n* @param {number} w - width pixel distance\n* @param {number} h - height pixel distance\n* @param {Object} opts - {fill, size, border}\n## renderRectRound\nRounded filled rectangle with border\n\n* @param {Object} ctx - canvas reference\n* @param {number} x - canvas pixel position\n* @param {number} y - canvas pixel position\n* @param {number} w - width pixel distance\n* @param {number} h - height pixel distance\n* @param {number} r - radius pixel distance\n* @param {Object} opts - {fill, border, size}\n## renderPolygonRegular\nDraw Regular Polygon \n\n* @param {canvas} ctx - HTML Canvas\n* @param {number} x\n* @param {number} y\n* @param {number} radius\n* @param {number} sides\n* @param {number} rotateAngle - 90 degrees(negative direction i.e., -Math.PI/2) \n* @param {Object} opts - {fill, size, border, rotate}\n## renderPolygonIrregular\nDraw Irregular Polygon\n\n* @param {canvas} ctx - HTML Canvas\n* @param {Array} points - array of points ``[{x:x, y:y}, ...]``\n* @param {Object} opts - {fill, size, border, rotate}\n## renderTriangle\nRender triangle\n\n* @param {Object} ctx - canvas reference\n* @param {number} x - canvas pixel position\n* @param {number} y - canvas pixel position\n* @param {number} h - height pixel distance\n* @param {Object} opts - {fill, size, border, rotate}\n## renderDiamond\nRender diamond\n\n* @param {Object} ctx - canvas reference\n* @param {number} x - canvas pixel position\n* @param {number} y - canvas pixel position\n* @param {number} w - width pixel distance\n* @param {number} h - height pixel distance\n* @param {Object} opts - {fill, size, border, rotate}\n## renderCircle\nDraw a solid circle with border\n\n* @param {Object} ctx - canvas reference\n* @param {number} x - canvas pixel position\n* @param {number} y - canvas pixel position\n* @param {number} r - radius pixel distance\n* @param {Object} opts - {border, size, fill}\n## renderImage\nDraw image to canvas\nhttps://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images\n\n* @param {canvas} cxt\n* @param {image} image - (CSSImageValue or HTMLImageElement or SVGImageElement or HTMLVideoElement or HTMLCanvasElement or ImageBitmap or OffscreenCanvas)\n* @param {number} sx - x or source x\n* @param {number} sy - y or source y\n* @param {number} sWidth - width or source width\n* @param {number} sHeight - height or source height\n* @param {number} dx - destination x\n* @param {number} dy - destination y\n* @param {number} dWidth - destination width\n* @param {number} dHeight - destination height\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"renderline","text":"renderLine"},{"depth":2,"slug":"renderlinehorizontal","text":"renderLineHorizontal"},{"depth":2,"slug":"renderlinevertical","text":"renderLineVertical"},{"depth":2,"slug":"renderpathstroke","text":"renderPathStroke"},{"depth":2,"slug":"renderpathclosed","text":"renderPathClosed"},{"depth":2,"slug":"renderspline","text":"renderSpline"},{"depth":2,"slug":"renderrect","text":"renderRect"},{"depth":2,"slug":"renderrectround","text":"renderRectRound"},{"depth":2,"slug":"renderpolygonregular","text":"renderPolygonRegular"},{"depth":2,"slug":"renderpolygonirregular","text":"renderPolygonIrregular"},{"depth":2,"slug":"rendertriangle","text":"renderTriangle"},{"depth":2,"slug":"renderdiamond","text":"renderDiamond"},{"depth":2,"slug":"rendercircle","text":"renderCircle"},{"depth":2,"slug":"renderimage","text":"renderImage"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
