import { i as createVNode, F as Fragment, s as spreadAttributes } from './astro.7b6fbd1f.mjs';
import '@astrojs/internal-helpers/path';
import 'node:fs';
import 'node:path';
import 'node:url';
import 'slash';
import 'node:fs/promises';
import './pages/404.astro.1d69ba63.mjs';
import 'html-escaper';
import 'fs';
import 'path';
/* empty css                        */import 'zod';
/* empty css                                                             */import 'execa';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<hr>\n<h2 id=\"class-exports\">Class: exports</h2>\n<h2 id=\"class-tradexchart\">Class: TradeXchart</h2>\n<p>The root class for the entire chart</p>\n<h2 id=\"class-exports-1\">Class: exports</h2>\n<p><strong>version</strong>:<br>\n<strong>name</strong>:<br>\n<strong>shortName</strong>:<br>\n<strong>config</strong>:<br>\n<strong>Chart</strong>:<br>\n<strong>ChartPanes</strong>:<br>\n<strong>Indicators</strong>:<br>\n<strong>state</strong>:<br>\n<strong>allData</strong>:</p>\n<h3 id=\"exportscreatecontainer-txcfg-state\">exports.create(container, txCfg, state)</h3>\n<p>Create a new TradeXchart instance</p>\n<p><strong>Parameters</strong></p>\n<p><strong>container</strong>: <code>DOM_element</code>, HTML element to mount the chart on</p>\n<p><strong>txCfg</strong>: <code>Object</code>, chart config</p>\n<p><strong>state</strong>: <code>Object</code>, chart state</p>\n<p><strong>Returns</strong>: <code>instance</code>, TradeXchart</p>\n<h3 id=\"exportsdestroychart\">exports.destroy(chart)</h3>\n<p>Destroy a chart instance, clean up and remove data</p>\n<p><strong>Parameters</strong></p>\n<p><strong>chart</strong>: <code>instance</code>, Destroy a chart instance, clean up and remove data</p>\n<h3 id=\"exportsstartcfg\">exports.start(cfg)</h3>\n<p>Target element has been validated as a mount point,\nletâ€™s start building</p>\n<p><strong>Parameters</strong></p>\n<p><strong>cfg</strong>: <code>Object</code>, chart configuration</p>\n<h3 id=\"exportsdestroy\">exports.destroy()</h3>\n<p>Stop all chart event processing and remove the chart from DOM.\nIn other words, destroy the chart.</p>\n<h3 id=\"exportsontopic-handler-context\">exports.on(topic, handler, context)</h3>\n<p>Subscribe to a topic</p>\n<p><strong>Parameters</strong></p>\n<p><strong>topic</strong>: <code>string</code>, The topic name</p>\n<p><strong>handler</strong>: <code>function</code>, The function or method that is called</p>\n<p><strong>context</strong>: <code>Object</code>, The context the function(s) belongs to</p>\n<p><strong>Returns</strong>: <code>boolean</code></p>\n<h3 id=\"exportsofftopic-handler\">exports.off(topic, handler)</h3>\n<p>Unsubscribe from a topic</p>\n<p><strong>Parameters</strong></p>\n<p><strong>topic</strong>: <code>string</code>, The topic name</p>\n<p><strong>handler</strong>: <code>function</code>, function to remove</p>\n<p><strong>Returns</strong>: <code>boolean</code></p>\n<h3 id=\"exportsemittopic-data\">exports.emit(topic, data)</h3>\n<p>Publish a topic</p>\n<p><strong>Parameters</strong></p>\n<p><strong>topic</strong>: <code>string</code>, The topic name</p>\n<p><strong>data</strong>: <code>Object</code>, The data to publish</p>\n<p><strong>Returns</strong>: <code>boolean</code></p>\n<h3 id=\"exportsexecutetopic-data-cb\">exports.execute(topic, data, cb)</h3>\n<p>Execute a task</p>\n<p><strong>Parameters</strong></p>\n<p><strong>topic</strong>: <code>string</code>, The topic name</p>\n<p><strong>data</strong>: <code>Object</code>, The data that gets published</p>\n<p><strong>cb</strong>: <code>function</code>, callback method</p>\n<h3 id=\"exportssetdimensionsw-h\">exports.setDimensions(w, h)</h3>\n<p>Set chart width and height</p>\n<p><strong>Parameters</strong></p>\n<p><strong>w</strong>: <code>number</code>, width in pixels</p>\n<p><strong>h</strong>: <code>number</code>, height in pixels</p>\n<h3 id=\"exportssetpriceprecisionpriceprecision\">exports.setPricePrecision(pricePrecision)</h3>\n<p>Set the price accuracy</p>\n<p><strong>Parameters</strong></p>\n<p><strong>pricePrecision</strong>: <code>number</code>, Price accuracy</p>\n<h3 id=\"exportssetvolumeprecisionvolumeprecision\">exports.setVolumePrecision(volumePrecision)</h3>\n<p>Set the volume accuracy</p>\n<p><strong>Parameters</strong></p>\n<p><strong>volumePrecision</strong>: <code>number</code>, Volume accuracy</p>\n<h3 id=\"exportsaddthemetheme\">exports.addTheme(theme)</h3>\n<p>Add a theme to the chart,\nif no current theme is set, make this the current one.</p>\n<p><strong>Parameters</strong></p>\n<p><strong>theme</strong>: <code>Object</code>, Volume accuracy</p>\n<p><strong>Returns</strong>: <code>instance</code>, - theme instance</p>\n<h3 id=\"exportssetthemetheme\">exports.setTheme(theme)</h3>\n<p>Set the chart theme</p>\n<p><strong>Parameters</strong></p>\n<p><strong>theme</strong>: <code>string</code>, theme identifier</p>\n<p><strong>Returns</strong>: <code>boolean</code></p>\n<h3 id=\"exportssetstreamstream\">exports.setStream(stream)</h3>\n<p>specify a chart stream</p>\n<p><strong>Parameters</strong></p>\n<p><strong>stream</strong>: <code>Object</code>, specify a chart stream</p>\n<p><strong>Returns</strong>: <code>instance</code></p>\n<h3 id=\"exportsstopstream\">exports.stopStream()</h3>\n<p>stop a chart stream\nwill halt any updates to price or indicators</p>\n<h3 id=\"exportsgetrangestart-end\">exports.getRange(start, end)</h3>\n<p>initialize range</p>\n<p><strong>Parameters</strong></p>\n<p><strong>start</strong>: <code>number</code>, index</p>\n<p><strong>end</strong>: <code>number</code>, index</p>\n<h3 id=\"exportssetrangestart-end\">exports.setRange(start, end)</h3>\n<p>set start and end of range</p>\n<p><strong>Parameters</strong></p>\n<p><strong>start</strong>: <code>number</code>, index</p>\n<p><strong>end</strong>: <code>number</code>, index</p>\n<h3 id=\"exportsjumptoindexstart-nearest-centre\">exports.jumpToIndex(start, nearest, centre)</h3>\n<p>set Range start index</p>\n<p><strong>Parameters</strong></p>\n<p><strong>start</strong>: <code>number</code>, starting index of state data</p>\n<p><strong>nearest</strong>: <code>boolean</code>, limit range start - no out of range values</p>\n<p><strong>centre</strong>: <code>boolean</code>, center the range on the start value</p>\n<h3 id=\"exportsjumptotsts-nearest-centre\">exports.jumpToTS(ts, nearest, centre)</h3>\n<p>set Range start to time stamp</p>\n<p><strong>Parameters</strong></p>\n<p><strong>ts</strong>: <code>number</code>, timestamp</p>\n<p><strong>nearest</strong>: <code>boolean</code>, limit range start - no out of range values</p>\n<p><strong>centre</strong>: <code>boolean</code>, center the range on the start value</p>\n<h3 id=\"exportsjumptostartcentre\">exports.jumpToStart(centre)</h3>\n<p>set Range start to state data start</p>\n<p><strong>Parameters</strong></p>\n<p><strong>centre</strong>: <code>boolean</code>, center the range on the start value</p>\n<h3 id=\"exportsjumptoendcentre\">exports.jumpToEnd(centre)</h3>\n<p>set Range start to state data ende</p>\n<p><strong>Parameters</strong></p>\n<p><strong>centre</strong>: <code>boolean</code>, center the range on the end value</p>\n<h3 id=\"exportsmergedatamerge-newrange\">exports.mergeData(merge, newRange)</h3>\n<p>Merge a block of data into the chart state.\nUsed for populating a chart with back history.\nMerge data must be formatted to a Chart State.\nOptionally set a new range upon merge.</p>\n<p><strong>Parameters</strong></p>\n<p><strong>merge</strong>: <code>Object</code>, merge data must be formatted to a Chart State</p>\n<p><strong>newRange</strong>: <code>boolean | object</code>, false | {start: number, end: number}</p>\n<h3 id=\"exportsisindicatori\">exports.isIndicator(i)</h3>\n<p>validate indicator</p>\n<p><strong>Parameters</strong></p>\n<p><strong>i</strong>: <code>class</code>, indicator class</p>\n<h3 id=\"exportssetindicatorsi-flush\">exports.setIndicators(i, flush)</h3>\n<p>import Indicators</p>\n<p><strong>Parameters</strong></p>\n<p><strong>i</strong>: <code>Object</code>, indicators {id, name, event, ind}</p>\n<p><strong>flush</strong>: <code>boolean</code>, expunge default indicators</p>\n<p><strong>Returns</strong>: , boolean</p>\n<h3 id=\"exportsaddindicatori-name-params\">exports.addIndicator(i, name, params)</h3>\n<p>add an indicator - default or registered user defined</p>\n<p><strong>Parameters</strong></p>\n<p><strong>i</strong>: <code>string</code>, indicator</p>\n<p><strong>name</strong>: <code>string</code>, identifier</p>\n<p><strong>params</strong>: <code>Object</code>, {settings, data}</p>\n<p><strong>Returns</strong>: <code>Indicator | false</code>, - indicator instance or false</p>\n<h3 id=\"exportsgetindicatori\">exports.getIndicator(i)</h3>\n<p>retrieve indicator by ID</p>\n<p><strong>Parameters</strong></p>\n<p><strong>i</strong>: <code>string</code>, indicator ID</p>\n<h3 id=\"exportsremoveindicatori\">exports.removeIndicator(i)</h3>\n<p>remove an indicator - default or registered user defined</p>\n<p><strong>Parameters</strong></p>\n<p><strong>i</strong>: <code>string | Indicator</code>, indicator id or Indicator instance</p>\n<p><strong>Returns</strong>: <code>boolean</code>, - success / failure</p>\n<h3 id=\"exportsindicatorsettingsi-s\">exports.indicatorSettings(i, s)</h3>\n<p>set or get indicator settings</p>\n<p><strong>Parameters</strong></p>\n<p><strong>i</strong>: <code>string | Indicator</code>, indicator id or Indicator instance</p>\n<p><strong>s</strong>: <code>Object</code>, settings</p>\n<p><strong>Returns</strong>: <code>boolean</code>, - success / failure</p>\n<h3 id=\"exportshasstateindicatori-dataset\">exports.hasStateIndicator(i, dataset)</h3>\n<p>Does current chart state have indicator</p>\n<p><strong>Parameters</strong></p>\n<p><strong>i</strong>: <code>string</code>, indicator id or name</p>\n<p><strong>dataset</strong>: <code>string</code>, Does current chart state have indicator</p>\n<p><strong>Returns</strong>: , indicator or false</p>\n<h3 id=\"exportsresizewidth-height\">exports.resize(width, height)</h3>\n<p>Resize the chart</p>\n<p><strong>Parameters</strong></p>\n<p><strong>width</strong>: <code>number</code>, pixels</p>\n<p><strong>height</strong>: <code>number</code>, pixels</p>\n<p><strong>Returns</strong>: <code>boolean</code>, - success or failure</p>\n<h3 id=\"exportsrefresh\">exports.refresh()</h3>\n<p>refresh / redraw the chart</p>\n<hr>");

				const frontmatter = {"title":"core"};
				const file = "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/api/core2.md";
				const url = undefined;
				function rawContent() {
					return "\n* * *\n\n## Class: exports\n\n\n\n## Class: TradeXchart\nThe root class for the entire chart\n\n\n## Class: exports\n\n\n**version**:  \n**name**:  \n**shortName**:  \n**config**:  \n**Chart**:  \n**ChartPanes**:  \n**Indicators**:  \n**state**:  \n**allData**:  \n### exports.create(container, txCfg, state) \n\nCreate a new TradeXchart instance\n\n**Parameters**\n\n**container**: `DOM_element`, HTML element to mount the chart on\n\n**txCfg**: `Object`, chart config\n\n**state**: `Object`, chart state\n\n**Returns**: `instance`, TradeXchart\n\n### exports.destroy(chart) \n\nDestroy a chart instance, clean up and remove data\n\n**Parameters**\n\n**chart**: `instance`, Destroy a chart instance, clean up and remove data\n\n\n### exports.start(cfg) \n\nTarget element has been validated as a mount point, \nlet's start building\n\n**Parameters**\n\n**cfg**: `Object`, chart configuration\n\n\n### exports.destroy() \n\nStop all chart event processing and remove the chart from DOM.\nIn other words, destroy the chart.\n\n\n### exports.on(topic, handler, context) \n\nSubscribe to a topic\n\n**Parameters**\n\n**topic**: `string`, The topic name\n\n**handler**: `function`, The function or method that is called\n\n**context**: `Object`, The context the function(s) belongs to\n\n**Returns**: `boolean`\n\n### exports.off(topic, handler) \n\nUnsubscribe from a topic\n\n**Parameters**\n\n**topic**: `string`, The topic name\n\n**handler**: `function`, function to remove\n\n**Returns**: `boolean`\n\n### exports.emit(topic, data) \n\nPublish a topic\n\n**Parameters**\n\n**topic**: `string`, The topic name\n\n**data**: `Object`, The data to publish\n\n**Returns**: `boolean`\n\n### exports.execute(topic, data, cb) \n\nExecute a task\n\n**Parameters**\n\n**topic**: `string`, The topic name\n\n**data**: `Object`, The data that gets published\n\n**cb**: `function`, callback method\n\n\n### exports.setDimensions(w, h) \n\nSet chart width and height\n\n**Parameters**\n\n**w**: `number`, width in pixels\n\n**h**: `number`, height in pixels\n\n\n### exports.setPricePrecision(pricePrecision) \n\nSet the price accuracy\n\n**Parameters**\n\n**pricePrecision**: `number`, Price accuracy\n\n\n### exports.setVolumePrecision(volumePrecision) \n\nSet the volume accuracy\n\n**Parameters**\n\n**volumePrecision**: `number`, Volume accuracy\n\n\n### exports.addTheme(theme) \n\nAdd a theme to the chart,\nif no current theme is set, make this the current one.\n\n**Parameters**\n\n**theme**: `Object`, Volume accuracy\n\n**Returns**: `instance`, - theme instance\n\n### exports.setTheme(theme) \n\nSet the chart theme\n\n**Parameters**\n\n**theme**: `string`, theme identifier\n\n**Returns**: `boolean`\n\n### exports.setStream(stream) \n\nspecify a chart stream\n\n**Parameters**\n\n**stream**: `Object`, specify a chart stream\n\n**Returns**: `instance`\n\n### exports.stopStream() \n\nstop a chart stream\nwill halt any updates to price or indicators\n\n\n### exports.getRange(start, end) \n\ninitialize range\n\n**Parameters**\n\n**start**: `number`, index\n\n**end**: `number`, index\n\n\n### exports.setRange(start, end) \n\nset start and end of range\n\n**Parameters**\n\n**start**: `number`, index\n\n**end**: `number`, index\n\n\n### exports.jumpToIndex(start, nearest, centre) \n\nset Range start index\n\n**Parameters**\n\n**start**: `number`, starting index of state data\n\n**nearest**: `boolean`, limit range start - no out of range values\n\n**centre**: `boolean`, center the range on the start value\n\n\n### exports.jumpToTS(ts, nearest, centre) \n\nset Range start to time stamp\n\n**Parameters**\n\n**ts**: `number`, timestamp\n\n**nearest**: `boolean`, limit range start - no out of range values\n\n**centre**: `boolean`, center the range on the start value\n\n\n### exports.jumpToStart(centre) \n\nset Range start to state data start\n\n**Parameters**\n\n**centre**: `boolean`, center the range on the start value\n\n\n### exports.jumpToEnd(centre) \n\nset Range start to state data ende\n\n**Parameters**\n\n**centre**: `boolean`, center the range on the end value\n\n\n### exports.mergeData(merge, newRange) \n\nMerge a block of data into the chart state.\nUsed for populating a chart with back history.\nMerge data must be formatted to a Chart State.\nOptionally set a new range upon merge.\n\n**Parameters**\n\n**merge**: `Object`, merge data must be formatted to a Chart State\n\n**newRange**: `boolean | object`, false | {start: number, end: number}\n\n\n### exports.isIndicator(i) \n\nvalidate indicator\n\n**Parameters**\n\n**i**: `class`, indicator class\n\n\n### exports.setIndicators(i, flush) \n\nimport Indicators\n\n**Parameters**\n\n**i**: `Object`, indicators {id, name, event, ind}\n\n**flush**: `boolean`, expunge default indicators\n\n**Returns**: , boolean\n\n### exports.addIndicator(i, name, params) \n\nadd an indicator - default or registered user defined\n\n**Parameters**\n\n**i**: `string`, indicator\n\n**name**: `string`, identifier\n\n**params**: `Object`, {settings, data}\n\n**Returns**: `Indicator | false`, - indicator instance or false\n\n### exports.getIndicator(i) \n\nretrieve indicator by ID\n\n**Parameters**\n\n**i**: `string`, indicator ID\n\n\n### exports.removeIndicator(i) \n\nremove an indicator - default or registered user defined\n\n**Parameters**\n\n**i**: `string | Indicator`, indicator id or Indicator instance\n\n**Returns**: `boolean`, - success / failure\n\n### exports.indicatorSettings(i, s) \n\nset or get indicator settings\n\n**Parameters**\n\n**i**: `string | Indicator`, indicator id or Indicator instance\n\n**s**: `Object`, settings\n\n**Returns**: `boolean`, - success / failure\n\n### exports.hasStateIndicator(i, dataset) \n\nDoes current chart state have indicator\n\n**Parameters**\n\n**i**: `string`, indicator id or name\n\n**dataset**: `string`, Does current chart state have indicator\n\n**Returns**: , indicator or false\n\n### exports.resize(width, height) \n\nResize the chart\n\n**Parameters**\n\n**width**: `number`, pixels\n\n**height**: `number`, pixels\n\n**Returns**: `boolean`, - success or failure\n\n### exports.refresh() \n\nrefresh / redraw the chart\n\n\n\n\n* * *\n\n\n\n\n\n\n\n\n\n\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"class-exports","text":"Class: exports"},{"depth":2,"slug":"class-tradexchart","text":"Class: TradeXchart"},{"depth":2,"slug":"class-exports-1","text":"Class: exports"},{"depth":3,"slug":"exportscreatecontainer-txcfg-state","text":"exports.create(container, txCfg, state)"},{"depth":3,"slug":"exportsdestroychart","text":"exports.destroy(chart)"},{"depth":3,"slug":"exportsstartcfg","text":"exports.start(cfg)"},{"depth":3,"slug":"exportsdestroy","text":"exports.destroy()"},{"depth":3,"slug":"exportsontopic-handler-context","text":"exports.on(topic, handler, context)"},{"depth":3,"slug":"exportsofftopic-handler","text":"exports.off(topic, handler)"},{"depth":3,"slug":"exportsemittopic-data","text":"exports.emit(topic, data)"},{"depth":3,"slug":"exportsexecutetopic-data-cb","text":"exports.execute(topic, data, cb)"},{"depth":3,"slug":"exportssetdimensionsw-h","text":"exports.setDimensions(w, h)"},{"depth":3,"slug":"exportssetpriceprecisionpriceprecision","text":"exports.setPricePrecision(pricePrecision)"},{"depth":3,"slug":"exportssetvolumeprecisionvolumeprecision","text":"exports.setVolumePrecision(volumePrecision)"},{"depth":3,"slug":"exportsaddthemetheme","text":"exports.addTheme(theme)"},{"depth":3,"slug":"exportssetthemetheme","text":"exports.setTheme(theme)"},{"depth":3,"slug":"exportssetstreamstream","text":"exports.setStream(stream)"},{"depth":3,"slug":"exportsstopstream","text":"exports.stopStream()"},{"depth":3,"slug":"exportsgetrangestart-end","text":"exports.getRange(start, end)"},{"depth":3,"slug":"exportssetrangestart-end","text":"exports.setRange(start, end)"},{"depth":3,"slug":"exportsjumptoindexstart-nearest-centre","text":"exports.jumpToIndex(start, nearest, centre)"},{"depth":3,"slug":"exportsjumptotsts-nearest-centre","text":"exports.jumpToTS(ts, nearest, centre)"},{"depth":3,"slug":"exportsjumptostartcentre","text":"exports.jumpToStart(centre)"},{"depth":3,"slug":"exportsjumptoendcentre","text":"exports.jumpToEnd(centre)"},{"depth":3,"slug":"exportsmergedatamerge-newrange","text":"exports.mergeData(merge, newRange)"},{"depth":3,"slug":"exportsisindicatori","text":"exports.isIndicator(i)"},{"depth":3,"slug":"exportssetindicatorsi-flush","text":"exports.setIndicators(i, flush)"},{"depth":3,"slug":"exportsaddindicatori-name-params","text":"exports.addIndicator(i, name, params)"},{"depth":3,"slug":"exportsgetindicatori","text":"exports.getIndicator(i)"},{"depth":3,"slug":"exportsremoveindicatori","text":"exports.removeIndicator(i)"},{"depth":3,"slug":"exportsindicatorsettingsi-s","text":"exports.indicatorSettings(i, s)"},{"depth":3,"slug":"exportshasstateindicatori-dataset","text":"exports.hasStateIndicator(i, dataset)"},{"depth":3,"slug":"exportsresizewidth-height","text":"exports.resize(width, height)"},{"depth":3,"slug":"exportsrefresh","text":"exports.refresh()"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
