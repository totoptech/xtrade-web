import { i as createVNode, F as Fragment, s as spreadAttributes } from './astro.8a1fcc00.mjs';
import '@astrojs/internal-helpers/path';
import 'node:fs';
import 'node:path';
import 'node:url';
import 'slash';
import 'node:fs/promises';
import './pages/404.astro.3b1f3a71.mjs';
import 'html-escaper';
import 'fs';
import 'path';
/* empty css                        */import 'zod';
/* empty css                                                             */import 'execa';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<p>TradeX-chart implements a <a href=\"https://www.itemis.com/en/products/itemis-create/documentation/user-guide/overview_what_are_state_machines?hsLang=de\">State Machine</a> for management of some of it’s internal states.</p>\n<p>A good deal of inspiration from the excellent <a href=\"https://xstate.js.org/\">XState project</a> for it’s internal finite state machine.</p>\n<p>Why reinvent the wheel? While XState does offer a cut down version of it’s library, the aim of TradeX-chart is to have as few external dependencies as possible. Writing a custom state machine also allows for the selective implementation of required features, thus keeping the overhead down.</p>\n<h2 id=\"accessing-the-state-machine\">Accessing the State Machine</h2>\n<p>You too can leverage the power of a State Machine via the <code>class StateMachine</code> exported by the chart.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> {StateMachine} </span><span style=\"color: #F97583\">from</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"tradex-chart\"</span></span></code></pre>\n<h2 id=\"using-the-state-machine\">Using the State Machine</h2>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">let</span><span style=\"color: #B392F0\"> stateMachine </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> StateMachine(config</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> context)</span></span></code></pre>\n<p>@param {Object} config - state machine definition<br>\n@param {Object} context - reference to instance that the state machine operates on</p>\n<p>The definition context <strong>must</strong> provide a reference, <code>context.core</code> to the chart instance, as the chart provides the emitter and listener functionality for the events that trigger state transition.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">context</span><span style=\"color: #B392F0\">.core </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> chart</span></span></code></pre>\n<h2 id=\"state-machine-definition-config\">State Machine Definition (config)</h2>\n<p>The state machine definition is an object that requires the minimum properties:</p>\n<ul>\n<li>id {string} - identifier</li>\n<li>initial {string} - initial state</li>\n<li>context {Object} - reference to instance that the state machine operates on</li>\n<li>states {Object} - states (functions), that will only execute and progress to the next when condition is met.</li>\n</ul>\n<h3 id=\"optional-state-machine-definition-properties\">Optional State Machine Definition Properties</h3>\n<ul>\n<li>guards {Object} - logical test functions</li>\n<li>actions {Object} - functions</li>\n</ul>\n<h2 id=\"example-definition\">Example Definition</h2>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">definiton</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  id</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"main\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  initial</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"idle\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  context</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {}</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  states</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">}</span></span></code></pre>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p><a href=\"https://github.com/tradex-app/TradeX-chart/tree/master/src/state\">The States used by the chart</a> can be for practical reference.</p></section></aside>\n<h2 id=\"further-reading-on-state-machines\">Further Reading on State Machines</h2>\n<p><a href=\"https://www.itemis.com/en/yakindu/state-machine/documentation/user-guide/quick_ref\">https://www.itemis.com/en/yakindu/state-machine/documentation/user-guide/quick_ref</a></p>");

				const frontmatter = {"title":"State Machine"};
				const file = "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/state_machine.md";
				const url = undefined;
				function rawContent() {
					return "\nTradeX-chart implements a [State Machine](https://www.itemis.com/en/products/itemis-create/documentation/user-guide/overview_what_are_state_machines?hsLang=de) for management of some of it's internal states.\n\nA good deal of inspiration from the excellent [XState project](https://xstate.js.org/) for it's internal finite state machine.\n\nWhy reinvent the wheel? While XState does offer a cut down version of it's library, the aim of TradeX-chart is to have as few external dependencies as possible. Writing a custom state machine also allows for the selective implementation of required features, thus keeping the overhead down.\n\n## Accessing the State Machine\n\nYou too can leverage the power of a State Machine via the ``class StateMachine`` exported by the chart.\n\n```javascript\nimport {StateMachine} from \"tradex-chart\"\n```\n\n## Using the State Machine\n\n```javascript\nlet stateMachine = new StateMachine(config, context)\n```\n\n@param {Object} config - state machine definition  \n@param {Object} context - reference to instance that the state machine operates on\n\nThe definition context **must** provide a reference, ``context.core`` to the chart instance, as the chart provides the emitter and listener functionality for the events that trigger state transition.\n\n```javascript\ncontext.core = chart\n```\n\n## State Machine Definition (config)\n\nThe state machine definition is an object that requires the minimum properties:\n\n* id {string} - identifier\n* initial {string} - initial state\n* context {Object} - reference to instance that the state machine operates on\n* states {Object} - states (functions), that will only execute and progress to the next when condition is met.\n\n### Optional State Machine Definition Properties\n\n* guards {Object} - logical test functions\n* actions {Object} - functions\n\n## Example Definition\n\n```javascript\nconst definiton = {\n  id: \"main\",\n  initial: \"idle\",\n  context: {},\n  states: {\n\n  }\n}\n```\n:::note\n[The States used by the chart](https://github.com/tradex-app/TradeX-chart/tree/master/src/state) can be for practical reference.\n:::\n\n## Further Reading on State Machines\n\n[https://www.itemis.com/en/yakindu/state-machine/documentation/user-guide/quick_ref](https://www.itemis.com/en/yakindu/state-machine/documentation/user-guide/quick_ref)";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"accessing-the-state-machine","text":"Accessing the State Machine"},{"depth":2,"slug":"using-the-state-machine","text":"Using the State Machine"},{"depth":2,"slug":"state-machine-definition-config","text":"State Machine Definition (config)"},{"depth":3,"slug":"optional-state-machine-definition-properties","text":"Optional State Machine Definition Properties"},{"depth":2,"slug":"example-definition","text":"Example Definition"},{"depth":2,"slug":"further-reading-on-state-machines","text":"Further Reading on State Machines"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
