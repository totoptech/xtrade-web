const id = "reference/widgets.md";
						const collection = "docs";
						const slug = "reference/widgets";
						const body = "TradeX Chart has a number of widgets, but only a select number are exposed to the developer to make use of. The others are used by default with certain chart components.\n\nWidgets accessible via the API:\n\n* Config Dialogue\n* [Dialogue](#dialogue)\n* Progress\n* Window\n\nWidgets are not [chart overlays](../overlays). They are their own special component type that float above all of the other chart components.\n\nWidgets iterates through the registered widget classes and adding the ones required immediately. eg. Chart pane divider\n\nThose widgets not immediately required, such as Dialogue, can be added later via the API.\n\n# Config, Dialogue, Window\n\n[Window class](#Window) `./src/components/widgets/window.js` is the parent for Dialogue and Config.\n\n[Dialogue](#Dialogue) (modal) `./src/components/widgets/dialogue.js` extends Window. It provides an optional title bar, drag bar, close icon.\n\n[Config Dialogues](#Config) `./src/components/widgets/configDialouge.js` then further extend the Dialogue class (to be implemented), by offering special content formatting and positioning for form elements.\n\n## Window\n\nWindow provides a basic floating box with Event Listener that will close the it if you click anywhere outside of it. (TODO: close on key stroke) Windows accept HTML content. Windows will automatically reposition if a chart resize crops or hides them.\n\nTODO: Window API documentation\n\n## Dialogue\n\nA dialogue in essence is floating box layer which presents information over the chart content. By default, the dialogue will also inherit the click outside of behavior from Window that closes it.\n\nDialogues have the following configurable properties with some being optional.\n\n### Dialogue Config\n\n\n| Name       | Type    | Required | Description                                                                                                 |\n| :----------- | --------- | :--------- | ------------------------------------------------------------------------------------------------------------- |\n| dragBar    | boolean | no       | Enables the user to click and drag the dialogue, positioning it where they see fit                          |\n| closeIcon  | boolean | no       | Close / remove the dialogue from the chart                                                                  |\n| title      | string  | no       | Title displayed the top of the dialoge                                                                      |\n| content    | string  | yes      | Without HTML content, a dialogue is pointless so it is required that you provide some. =)                   |\n| dimensions | Object  | yes      | {w, h} object specifying width and height in pixels                                                         |\n| position   | Object  | yes      | ``{x, y, z}`` object specifying position in pixels                                                          |\n| styles     | Object  | no       | ``{window, dragBar, closeIcon, title, content}`` object of [styleable dialogue features](#dialogue-styling) |\n\nIf no ``position`` is specified, then the dialogue will default to positioning in the center of the chart.\n\n### Initialize and Start Dialogue\n\nThe dialogue can be initialized with a config before it is displayed\n\n```javascript\n// instantiate and start dialogue\nconst config = {dragBar, closeIcon, title, content, position, styles}\nconst dialogue = chart.WidgetsG.insert(\"Dialogue\", config)\n      dialogue.start()\n```\n\n### Display Dialogue\n\nCalling ``dialogue.open()`` will display the pre-configured dialogue. However you can optionally pass a new configuration to the dialogue when it opens to change or update it's content.\n\n```javascript\nconst config = {title, content, position, styles}\n// display dialogue\ndialogue.open(config)\n```\n\n### Hide Dialogue\n\n``dialogue.close()`` will cause the dialogue to be hidden from display.\n\n### Remove\n\n``dialogue.remove()`` will remove the dialogue from the chart, rendering it no longer accessible.\n\n### Dialogue Styling\n\nThere are five elements of the dialogue that can be styled.\n\n\n| Name      | Description                                         |\n| :---------- | ----------------------------------------------------- |\n| window    | parent element hostng the others                    |\n| dragBar   | optional bar at the top to allow manual positioning |\n| closeIcon | optional close icon                                 |\n| title     | optional title                                      |\n| content   | what you want to display                            |\n\nEach entry of the ``styles`` property is an object containing CSS properties and values.\n\n```javascript\nconst config = {\n  dragBar: true,\n  dimensions: {w: 199, y: 100}\n  position: {x: 100, y: 100},\n  styles: {\n    dragBar: { background: \"#888\" }\n    title: { color: \"#ccc\" }\n  }\n}\n```\n\n# Config Dialogue\n\n**TO BE IMPLEMENTED**\n\nBuilding upon the ancestor classes of Window and Dialogue, Config offers special formatting and content handling, specifically for forms.\n\nThe class allows for overriding the default handling of the form via a custom callback.\n\nConfig events can also be subscribed for further customization of the Config behaviour.\n";
						const data = {title:"Widgets",description:"How to use TradeX Chart widgets",editUrl:true,head:[],template:"doc"};
						const _internal = {
							type: 'content',
							filePath: "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/widgets.md",
							rawData: "\ntitle: Widgets\ndescription: How to use TradeX Chart widgets",
						};

export { _internal, body, collection, data, id, slug };
