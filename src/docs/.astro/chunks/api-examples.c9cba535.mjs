const id = "reference/api-examples.md";
						const collection = "docs";
						const slug = "reference/api-examples";
						const body = "This documentation gives example API work flows. TradeX-chart is organized in a hierarchical structure, which is reflected in the API, allowing you to reach down into the depths of the chart, giving you granular control of it's behavior and appearance.\n\n:::tip\nMany of these examples can be used in the browser developer tool console, to find out what the chart is doing.\nAssign the chart instance to a global variable and explore via the console.\n:::\n\n## Chart Root\n\n### Chart Version\n\nreturn TradeX-chart version number.\n\n```javascript\nchart0.version\n// 0.139.8\n```\n\n### Chart ID\n\nif no ID is provided in the chart config, a unique one will be auto-generated.\n\n```javascript\nchart0.id\n\n// \"TX_lixo8d6m_cy8_0\" \n```\n\n### Chart State\n\nchart0.state\n\nchart0.reset()\nchart0.expunge()\nchart0.state.create()\nchart0.state.export()\nchart0.use()\nchart0.has()\ndata\ndelete\nget\nid\nisEmpty\nstatus\n\nList all states available\n\n```javascript\nchart0.list()\n```\n\nexport (save) chart.state.exportState() the current chart state\ncreate a new state const NewState = chart.state.createState() , this adds to the in memory list of states\nselect the new state chart.state = NewState\n\n### Download Image\n\n``downloadImage()`` will trigger a file download, exporting a ``.png`` image snapshot of the chart, excluding the utils or tool bars.\n\n\n| Parameter | Type   | Description                                                  | Required |\n| :---------- | -------- | :------------------------------------------------------------- | ---------- |\n| fileName  | string | file name                                                    | false    |\n| type      | string | image type, \"image/png\" (default), \"image/jpg\", \"image/webp\" | false    |\n| quality   | number | image quality                                                | false    |\n| watermark | Object | {imgURL, x, y, width, height}                                | false    |\n\n```javascript\nchart0.downloadImage(\"mychart.png\")\n```\n\nBy default, ``downloadImage()`` will export a ``.png`` image for download. If no ``filename`` is supplied, it will use the chart id by default.\n\n``downloadImage()`` can export a watermarked image. The ``watermark`` object accepts a relative path to an image of type ``\"image/png\" (default), \"image/jpg\", \"image/webp\", \"image/svg\"``.\n\n### Data URL Export\n\n``toImageURL()`` will create a chart image snapshot as a data URL to use as an image source.\n\n\n| Parameter | Type     | Description                                                  | Required |\n| ----------- | ---------- | :------------------------------------------------------------- | ---------- |\n| cb        | function | callback to receive the data URL                             | false    |\n| type      | string   | image type, \"image/png\" (default), \"image/jpg\", \"image/webp\" | false    |\n| quality   | number   | image quality                                                | false    |\n| watermark | Object   | {imgURL, x, y, width, height}                                | false    |\n\n```javascript\nconst cb = (dataURL) => {\n  // do something with the dataURL\n  // examples: save to server, attach to email, send to an API\n}\nchart0.toImageURL(cb)\n```\n\nA callback function is optional to receive the data URL, if none is provided, a ``Promise`` will be returned instead.\n\n``toImageURL()`` will export a ``.png`` image by default.\n\n``toImageURL()`` can export a watermarked image. The ``watermark`` object accepts a relative path to an image of type ``\"image/png\" (default), \"image/jpg\", \"image/webp\", \"image/svg\"``.\n\n## Main Pane\n\n``MainPane.chartPanes`` returns a ``Map()`` of all existing chart panes.\n\n```javascript\nchart1.MainPane.chartPanes\n```\n\n```javascript\nMap { \"TradeX_test-Chart_2\" → {…}, \"TradeX_test-RSI__20_3\" → {} }\n```\n\nThe chart pane IDs are used as the ``Map()`` keys.\n\n## Chart Panes\n\n### Remove\n\n```javascript\nchart0.ChartPanes.removeChartPane(\"TX_lixi72el_tc8_0-RSI__20_1\")\n// or alternatively\nchart0.ChartPanes.get(\"TX_lixi72el_tc8_0-RSI__20_1\").remove() \n```\n\nThe primary chart pane (price history) cannot be deleted as it provides the main data state for the chart.\n\nHowever, loading a new data state will of course remove and replace it.\n\n### Re-order\n\nThe visual stacking of chart panes can be changed by raising or lowering them above their neighbours.\n\n```javascript\nchart0.ChartPanes.get(\"TX_lj4rpog3_ujm_0-RSI__20_1\").reorderUp()\nchart0.ChartPanes.get(\"TX_lj4rpog3_ujm_0-RSI__20_1\").reorderDown()\n```\n\n### Maximize Minimize\n\nToggle the chart pane maximize and minimize state.\n\n```javascript\nconst pane = chart0.ChartPanes.get(\"TradeX_test-RSI__20_1\")\nchart0.MainPane.paneMaximize(pane)\n\n```\n\n### Collapse Expand\n\nToggle the chart pane collapse and expand state.\n\n```javascript\nconst pane = chart0.ChartPanes.get(\"TradeX_test-RSI__20_1\")\nchart0.MainPane.paneCollapse(pane)\n```\n\n## Primary Chart Pane\n\nThe primary chart pane that displays the price history (candles) can be accessed like so:\n\n```javascript\nchart0.Chart\n```\n\nThis exposes the following methods.\n\n### Set Visibility for Legends on Primary\n\n```javascript\nchart0.Chart.legendsVisibility(\"hide\")\n```\n\nAccepts either ``show`` or ``hide`` to toggle the visibility of all indicator legends on the Primary pane.\n\n## Indicators\n\n### Add\n\nTo add an \"empty\" indicator is as simple as:\n\n```javascript\nchart0.addIndicator(\"RSI\", \"RSI\")\n```\n\nIf the chart has price history data, the indicator will automatically calculate it's values with it's defaults.\n\nHowever, indicators can also be added with data and or with custom settings.\n\n```javascript\nchart0.addIndicator(\"EMA\", \"EMA\", {data, settings})\n```\n\n``addIndicator()`` returns the indicator instance for your own storage or manipulation.\n\n```javascript\nconst myIndicator = chart0.addIndicator(\"RSI\", \"RSI\")\n```\n\n### Remove\n\nThe indicator can be removed in a number of ways.\n\n1. Directly via the instance\n\n```javascript\nconst myIndicator = chart0.addIndicator(\"RSI\", \"RSI\")\n      myIndicator.remove()\n```\n\n2. From the root API\n\n```javascript\nchart1.removeIndicator(\"TradeX_test-Chart_2-BB_4\")\n```\n\n3. Via the chart pane that hosts the indicator\n\n```javascript\nchart1.ChartPanes.get(\"TradeX_test-Chart_2\").removeIndicator(\"TradeX_test-Chart_2-BB_4\")\n\nchart1.ChartPanes.get(\"TradeX_test-RSI__20_3\").indicators[\"TradeX_test-RSI__20_3-RSI_5\"].instance.remove()\n```\n\n### Visible\n\nSet or get the indicator visibility. The method accepts a boolean to set the indicator visibility and also returns a boolean of the current state.\n\n``true`` visible\n``false`` not visible\n\n```javascript\nconst visible = chart1.ChartPanes.get(\"TradeX_test-RSI__20_3\").indicators[\"TradeX_test-RSI__20_3-RSI_5\"].instance.visible()\n\n// set indicator visibility to not visible (false)\nchart1.ChartPanes.get(\"TradeX_test-RSI__20_3\").indicators[\"TradeX_test-RSI__20_3-RSI_5\"].instance.visible(false)\n```\n";
						const data = {title:"API Examples",editUrl:true,head:[],template:"doc"};
						const _internal = {
							type: 'content',
							filePath: "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/api-examples.md",
							rawData: "\ntitle: API Examples",
						};

export { _internal, body, collection, data, id, slug };
