import { A as AstroError, f as AstroErrorData, i as createVNode, F as Fragment, s as spreadAttributes } from './astro.8a1fcc00.mjs';
import { g as getImage } from './pages/404.astro.3b1f3a71.mjs';
import '@astrojs/internal-helpers/path';
import 'html-escaper';
import 'fs';
import 'node:fs/promises';
import 'node:url';
import 'node:fs';
import 'node:path';
import 'slash';
import 'path';
/* empty css                        */import 'zod';
/* empty css                                                             */import 'execa';

const images = {
					'../../../assets/Overly-Regions.png': await getImageSafely((await import('./Overly-Regions.be5a8b77.mjs')).default, "../../../assets/Overly-Regions.png", "/src/assets/Overly-Regions.png")
				};

				async function getImageSafely(imageSrc, imagePath, resolvedImagePath) {
					if (!imageSrc) {
						throw new AstroError({
							...AstroErrorData.MarkdownImageNotFound,
							message: AstroErrorData.MarkdownImageNotFound.message(
								imagePath,
								resolvedImagePath
							),
							location: { file: "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/overlays.md" },
						});
					}

					return await getImage({src: imageSrc})
				}

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<p>Overlays in the simplest form are a layer, that exist either on:</p>\n<ul>\n<li>Primary chart (candlestick price view)</li>\n<li>Secondary chart panes (indicators that don’t live on the primary chart)</li>\n<li>Y Axis price scale</li>\n<li>X Axis time line</li>\n</ul>\n<p><img alt=\"Chart Overlay Regions\" __ASTRO_IMAGE_=\"../../../assets/Overly-Regions.png\"></p>\n<h2 id=\"features\">Features</h2>\n<p>Overlays (layers) have the following features:</p>\n<ul>\n<li>passive, responding the price date range that chart is viewing eg.:\n<ul>\n<li>candles</li>\n<li>indicators</li>\n</ul>\n</li>\n<li>active, can respond to input such as the cursor / mouse / pointer position eg.:\n<ul>\n<li>cursor cross hair,</li>\n<li>floating timeline label,</li>\n<li>Y Axis floating live streaming price label</li>\n</ul>\n</li>\n<li>static remain fixed and do not scroll with the chart or cursor / mouse / pointer eg:\n<ul>\n<li>watermark - can be text or image</li>\n</ul>\n</li>\n<li>stacked, which means their visual order can be changed</li>\n<li>visibility can be toggled on or off</li>\n<li>can be arbitrarily added or removed</li>\n<li>can have their own visual theme</li>\n<li>have access to the in-built canvas methods for drawing to the overlay, lines,</li>\n<li>boxes, circles, text, images…</li>\n<li>automatically resize with the chart or pane displaying them.</li>\n</ul>\n<h2 id=\"built-in-overlays\">Built-in Overlays</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Name</th><th>Key</th><th>Default</th></tr></thead><tbody><tr><td>Chart Candles</td><td></td><td></td></tr><tr><td>Chart Cursor</td><td></td><td></td></tr><tr><td>Chart Grid</td><td></td><td></td></tr><tr><td>Chart High Low</td><td></td><td>optional</td></tr><tr><td><a href=\"../overlays_news_events\">Chart News Events</a></td><td>events</td><td>optional</td></tr><tr><td>Chart Streaming Candle</td><td></td><td></td></tr><tr><td><a href=\"../overlays_trades\">Chart Trades</a></td><td>trades</td><td>optional</td></tr><tr><td>Chart Volume</td><td></td><td></td></tr><tr><td>Chart Watermark</td><td></td><td>optional</td></tr><tr><td><a href=\"../../indicators\">Indicators</a></td><td></td><td>optional</td></tr><tr><td>Scale Cursor</td><td></td><td></td></tr><tr><td>Scale Labels</td><td></td><td></td></tr><tr><td>Scale Price Line</td><td></td><td>optional</td></tr><tr><td>Time Cursor</td><td></td><td></td></tr><tr><td>Time Labels</td><td></td><td></td></tr></tbody></table>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p><a href=\"../indicators.md\">Indicators</a> are a special (child) class of overlays.\nBoth standard and custom indicators are extensions of the indicator class.\nIndicators draw a visual interpretation (calculation) of either the price history data (candles) or their own unique dataset.</p></section></aside>\n<h2 id=\"adding-optional-overlays\">Adding Optional Overlays</h2>\n<p>To add indicators to the chart, refer to the <a href=\"../indicators\">indicator documentation</a>.</p>\n<p>Optional overlays are always present, but must be enabled via the <a href=\"../02_configuration\">chart config</a>.</p>\n<ul>\n<li>Scale Price Line - <code>stream: {}</code> see: <a href=\"../streaming_price_data\">Streaming Price Data</a></li>\n<li>Chart High Low - <code>hightLow: true</code></li>\n<li>Chart Watermark - <code>watermark: { text: \"text goes here\" }</code> see: TODO: Watermark Options</li>\n</ul>\n<p>The following ovelays are an exception and are added via the <a href=\"../state\">initial chart state</a> supplied by the chart config, because they may provide a dataset to be included in the chart data state. See their corresponding documentation for more detail.</p>\n<ul>\n<li><a href=\"../../news_events\">Chart News Events</a></li>\n<li><a href=\"../../trades\">Chart Trades</a></li>\n</ul>\n<h2 id=\"custom-overlays\">Custom Overlays</h2>\n<p>TradeX-chart exports the <code>Overlay</code> class for you extend to build your own custom overlays.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> { overlays } </span><span style=\"color: #F97583\">from</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"tradex-chart\"</span></span></code></pre>\n<p>The <a href=\"https://github.com/tradex-app/TradeX-chart/tree/master/src/components/overlays\">TradeX-chart GitHub repository</a> is a good starting point for examples of how to build overlays.</p>\n<h3 id=\"basic-custom-overlay\">Basic Custom Overlay</h3>\n<p>The foundation of an overlay looks like the following:</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> { overlays } </span><span style=\"color: #F97583\">from</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"tradex-chart\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">default</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> customOverlay </span><span style=\"color: #F97583\">extends</span><span style=\"color: #B392F0\"> Overlay {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">constructor</span><span style=\"color: #B392F0\">(target</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> xAxis</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">false</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> yAxis</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">false</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> theme</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> parent) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// instantiate parent class Overlay</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    super(target</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> xAxis</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> yAxis</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> theme</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> parent)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// position() will pan / scroll your overlay with the rest of the chart</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">set</span><span style=\"color: #B392F0\"> position(p) { </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">target</span><span style=\"color: #B392F0\">.setPosition(p[</span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">]</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> p[</span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #B392F0\">]) }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// if you want your overlay NOT to pan / scroll, then replace the above with:</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// set position(p) { this.target.setPosition(0, 0) }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// draw your overlay</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  draw(range</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">core</span><span style=\"color: #B392F0\">.range) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// clear the layer provided to your overlay</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\">.clear()</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// HTML canvas context</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">ctx</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\">.context</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #79B8FF\">ctx</span><span style=\"color: #B392F0\">.save();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// draw something on the canvas</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #79B8FF\">ctx</span><span style=\"color: #B392F0\">.restore()</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">}</span></span></code></pre>\n<h3 id=\"what-the-parent-overlay-class-provides\">What the Parent Overlay Class Provides</h3>\n<p>The parent <code>Overlay</code> class provides everything needed to draw on the chart.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>core</td><td><a href=\"../../api/core\">chart root API</a></td></tr><tr><td>parent</td><td>pane that overlay is applied to</td></tr><tr><td>config</td><td><a href=\"../02_configuration\">chart config</a></td></tr><tr><td>theme</td><td><a href=\"../themes\">chart theme</a></td></tr><tr><td>params</td><td>parameters that the overlay was created with</td></tr><tr><td>target</td><td>layer methods and properties</td></tr><tr><td>scene</td><td>layer canvas provided to the overlay</td></tr><tr><td>chart</td><td>chart pane</td></tr><tr><td>xAxis</td><td>methods and properties for the timeline</td></tr><tr><td>yAxis</td><td>methods and properties for the (price) scale</td></tr><tr><td>context</td><td>“chart”, “xAxis”, “yAxis” - where the overlay is added</td></tr></tbody></table>\n<h3 id=\"drawing-on-the-overlay\">Drawing on the Overlay</h3>\n<p>TODO:</p>\n<h3 id=\"adding-a-custom-overlay-to-the-chart\">Adding a Custom Overlay to the Chart</h3>\n<p>TODO:</p>");

				const frontmatter = {"title":"Overlays","description":"Overlays in the simplest form are a chart pane layer"};
				const file = "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/overlays.md";
				const url = undefined;
				function rawContent() {
					return "Overlays in the simplest form are a layer, that exist either on:\n\n* Primary chart (candlestick price view)\n* Secondary chart panes (indicators that don't live on the primary chart)\n* Y Axis price scale\n* X Axis time line\n\n![Chart Overlay Regions](../../../assets/Overly-Regions.png)\n\n## Features\n\nOverlays (layers) have the following features:\n\n* passive, responding the price date range that chart is viewing eg.:\n  * candles\n  * indicators\n* active, can respond to input such as the cursor / mouse / pointer position eg.:\n  * cursor cross hair,\n  * floating timeline label,\n  * Y Axis floating live streaming price label\n* static remain fixed and do not scroll with the chart or cursor / mouse / pointer eg:\n  * watermark - can be text or image\n* stacked, which means their visual order can be changed\n* visibility can be toggled on or off\n* can be arbitrarily added or removed\n* can have their own visual theme\n* have access to the in-built canvas methods for drawing to the overlay, lines,\n* boxes, circles, text, images...\n* automatically resize with the chart or pane displaying them.\n\n## Built-in Overlays\n\n\n| Name                                   | Key    | Default  |\n| ---------------------------------------- | -------- | ---------- |\n| Chart Candles                          |        |          |\n| Chart Cursor                           |        |          |\n| Chart Grid                             |        |          |\n| Chart High Low                         |        | optional |\n| [Chart News Events](../overlays_news_events) | events | optional |\n| Chart Streaming Candle                 |        |          |\n| [Chart Trades](../overlays_trades)           | trades | optional |\n| Chart Volume                           |        |          |\n| Chart Watermark                        |        | optional |\n| [Indicators](../../indicators)         |        | optional |\n| Scale Cursor                           |        |          |\n| Scale Labels                           |        |          |\n| Scale Price Line                       |        | optional |\n| Time Cursor                            |        |          |\n| Time Labels                            |        |          |\n\n:::note\n[Indicators](../indicators.md) are a special (child) class of overlays.\nBoth standard and custom indicators are extensions of the indicator class.\nIndicators draw a visual interpretation (calculation) of either the price history data (candles) or their own unique dataset.\n:::\n\n## Adding Optional Overlays\n\nTo add indicators to the chart, refer to the [indicator documentation](../indicators).\n\nOptional overlays are always present, but must be enabled via the [chart config](../02_configuration).\n\n* Scale Price Line - ``stream: {}`` see: [Streaming Price Data](../streaming_price_data)\n* Chart High Low - ``hightLow: true``\n* Chart Watermark - ``watermark: { text: \"text goes here\" }`` see: TODO: Watermark Options\n\nThe following ovelays are an exception and are added via the [initial chart state](../state) supplied by the chart config, because they may provide a dataset to be included in the chart data state. See their corresponding documentation for more detail.\n\n* [Chart News Events](../../news_events)\n* [Chart Trades](../../trades)\n\n## Custom Overlays\n\nTradeX-chart exports the ``Overlay`` class for you extend to build your own custom overlays.\n\n```javascript\nimport { overlays } from \"tradex-chart\"\n```\n\nThe [TradeX-chart GitHub repository](https://github.com/tradex-app/TradeX-chart/tree/master/src/components/overlays) is a good starting point for examples of how to build overlays.\n\n### Basic Custom Overlay\n\nThe foundation of an overlay looks like the following:\n\n```javascript\nimport { overlays } from \"tradex-chart\"\n\nexport default class customOverlay extends Overlay {\n\n  constructor(target, xAxis=false, yAxis=false, theme, parent) {\n    // instantiate parent class Overlay\n    super(target, xAxis, yAxis, theme, parent)\n  }\n\n  // position() will pan / scroll your overlay with the rest of the chart\n  set position(p) { this.target.setPosition(p[0], p[1]) }\n  // if you want your overlay NOT to pan / scroll, then replace the above with:\n  // set position(p) { this.target.setPosition(0, 0) }\n\n  // draw your overlay\n  draw(range=this.core.range) {\n  \n    // clear the layer provided to your overlay\n    this.scene.clear()\n    // HTML canvas context\n    const ctx = this.scene.context\n    ctx.save();\n\n    // draw something on the canvas\n\n    ctx.restore()\n  }\n}\n```\n\n### What the Parent Overlay Class Provides\n\nThe parent ``Overlay`` class provides everything needed to draw on the chart.\n\n| Name    | Description                                            |\n| --------- | -------------------------------------------------------- |\n| core    | [chart root API](../../api/core)                       |\n| parent  | pane that overlay is applied to                        |\n| config  | [chart config](../02_configuration)                    |\n| theme   | [chart theme](../themes)                               |\n| params  | parameters that the overlay was created with           |\n| target  | layer methods and properties                           |\n| scene   | layer canvas provided to the overlay                   |\n| chart   | chart pane                                             |\n| xAxis   | methods and properties for the timeline                |\n| yAxis   | methods and properties for the (price) scale           |\n| context | \"chart\", \"xAxis\", \"yAxis\" - where the overlay is added |\n\n### Drawing on the Overlay\n\nTODO:\n\n### Adding a Custom Overlay to the Chart\n\nTODO:\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"features","text":"Features"},{"depth":2,"slug":"built-in-overlays","text":"Built-in Overlays"},{"depth":2,"slug":"adding-optional-overlays","text":"Adding Optional Overlays"},{"depth":2,"slug":"custom-overlays","text":"Custom Overlays"},{"depth":3,"slug":"basic-custom-overlay","text":"Basic Custom Overlay"},{"depth":3,"slug":"what-the-parent-overlay-class-provides","text":"What the Parent Overlay Class Provides"},{"depth":3,"slug":"drawing-on-the-overlay","text":"Drawing on the Overlay"},{"depth":3,"slug":"adding-a-custom-overlay-to-the-chart","text":"Adding a Custom Overlay to the Chart"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
