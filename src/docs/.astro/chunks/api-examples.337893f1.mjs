import { i as createVNode, F as Fragment, s as spreadAttributes } from './astro.7b6fbd1f.mjs';
import '@astrojs/internal-helpers/path';
import 'node:fs';
import 'node:path';
import 'node:url';
import 'slash';
import 'node:fs/promises';
import './pages/404.astro.1d69ba63.mjs';
import 'html-escaper';
import 'fs';
import 'path';
/* empty css                        */import 'zod';
/* empty css                                                             */import 'execa';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<p>This documentation gives example API work flows. TradeX-chart is organized in a hierarchical structure, which is reflected in the API, allowing you to reach down into the depths of the chart, giving you granular control of it’s behavior and appearance.</p>\n<aside aria-label=\"Tip\" class=\"starlight-aside starlight-aside--tip\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\"></path><path d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\"></path></svg>Tip</p><section class=\"starlight-aside__content\"><p>Many of these examples can be used in the browser developer tool console, to find out what the chart is doing.\nAssign the chart instance to a global variable and explore via the console.</p></section></aside>\n<h2 id=\"chart-root\">Chart Root</h2>\n<h3 id=\"chart-version\">Chart Version</h3>\n<p>return TradeX-chart version number.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.version</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// 0.139.8</span></span></code></pre>\n<h3 id=\"chart-id\">Chart ID</h3>\n<p>if no ID is provided in the chart config, a unique one will be auto-generated.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.id</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// \"TX_lixo8d6m_cy8_0\" </span></span></code></pre>\n<h3 id=\"chart-state\">Chart State</h3>\n<p>chart0.state</p>\n<p>chart0.reset()\nchart0.expunge()\nchart0.state.create()\nchart0.state.export()\nchart0.use()\nchart0.has()\ndata\ndelete\nget\nid\nisEmpty\nstatus</p>\n<p>List all states available</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.list()</span></span></code></pre>\n<p>export (save) chart.state.exportState() the current chart state\ncreate a new state const NewState = chart.state.createState() , this adds to the in memory list of states\nselect the new state chart.state = NewState</p>\n<h3 id=\"download-image\">Download Image</h3>\n<p><code>downloadImage()</code> will trigger a file download, exporting a <code>.png</code> image snapshot of the chart, excluding the utils or tool bars.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Parameter</th><th>Type</th><th align=\"left\">Description</th><th>Required</th></tr></thead><tbody><tr><td align=\"left\">fileName</td><td>string</td><td align=\"left\">file name</td><td>false</td></tr><tr><td align=\"left\">type</td><td>string</td><td align=\"left\">image type, “image/png” (default), “image/jpg”, “image/webp”</td><td>false</td></tr><tr><td align=\"left\">quality</td><td>number</td><td align=\"left\">image quality</td><td>false</td></tr><tr><td align=\"left\">watermark</td><td>Object</td><td align=\"left\">{imgURL, x, y, width, height}</td><td>false</td></tr></tbody></table>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.downloadImage(</span><span style=\"color: #FFAB70\">\"mychart.png\"</span><span style=\"color: #B392F0\">)</span></span></code></pre>\n<p>By default, <code>downloadImage()</code> will export a <code>.png</code> image for download. If no <code>filename</code> is supplied, it will use the chart id by default.</p>\n<p><code>downloadImage()</code> can export a watermarked image. The <code>watermark</code> object accepts a relative path to an image of type <code>\"image/png\" (default), \"image/jpg\", \"image/webp\", \"image/svg\"</code>.</p>\n<h3 id=\"data-url-export\">Data URL Export</h3>\n<p><code>toImageURL()</code> will create a chart image snapshot as a data URL to use as an image source.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Parameter</th><th>Type</th><th align=\"left\">Description</th><th>Required</th></tr></thead><tbody><tr><td>cb</td><td>function</td><td align=\"left\">callback to receive the data URL</td><td>false</td></tr><tr><td>type</td><td>string</td><td align=\"left\">image type, “image/png” (default), “image/jpg”, “image/webp”</td><td>false</td></tr><tr><td>quality</td><td>number</td><td align=\"left\">image quality</td><td>false</td></tr><tr><td>watermark</td><td>Object</td><td align=\"left\">{imgURL, x, y, width, height}</td><td>false</td></tr></tbody></table>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> cb </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> (dataURL) </span><span style=\"color: #F97583\">=></span><span style=\"color: #B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// do something with the dataURL</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// examples: save to server, attach to email, send to an API</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">}</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.toImageURL(cb)</span></span></code></pre>\n<p>A callback function is optional to receive the data URL, if none is provided, a <code>Promise</code> will be returned instead.</p>\n<p><code>toImageURL()</code> will export a <code>.png</code> image by default.</p>\n<p><code>toImageURL()</code> can export a watermarked image. The <code>watermark</code> object accepts a relative path to an image of type <code>\"image/png\" (default), \"image/jpg\", \"image/webp\", \"image/svg\"</code>.</p>\n<h2 id=\"main-pane\">Main Pane</h2>\n<p><code>MainPane.chartPanes</code> returns a <code>Map()</code> of all existing chart panes.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart1</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">MainPane</span><span style=\"color: #B392F0\">.chartPanes</span></span></code></pre>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">Map { </span><span style=\"color: #FFAB70\">\"TradeX_test-Chart_2\"</span><span style=\"color: #B392F0\"> → {…}</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"TradeX_test-RSI__20_3\"</span><span style=\"color: #B392F0\"> → {} }</span></span></code></pre>\n<p>The chart pane IDs are used as the <code>Map()</code> keys.</p>\n<h2 id=\"chart-panes\">Chart Panes</h2>\n<h3 id=\"remove\">Remove</h3>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">ChartPanes</span><span style=\"color: #B392F0\">.removeChartPane(</span><span style=\"color: #FFAB70\">\"TX_lixi72el_tc8_0-RSI__20_1\"</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// or alternatively</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">ChartPanes</span><span style=\"color: #B392F0\">.get(</span><span style=\"color: #FFAB70\">\"TX_lixi72el_tc8_0-RSI__20_1\"</span><span style=\"color: #B392F0\">).remove() </span></span></code></pre>\n<p>The primary chart pane (price history) cannot be deleted as it provides the main data state for the chart.</p>\n<p>However, loading a new data state will of course remove and replace it.</p>\n<h3 id=\"re-order\">Re-order</h3>\n<p>The visual stacking of chart panes can be changed by raising or lowering them above their neighbours.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">ChartPanes</span><span style=\"color: #B392F0\">.get(</span><span style=\"color: #FFAB70\">\"TX_lj4rpog3_ujm_0-RSI__20_1\"</span><span style=\"color: #B392F0\">).reorderUp()</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">ChartPanes</span><span style=\"color: #B392F0\">.get(</span><span style=\"color: #FFAB70\">\"TX_lj4rpog3_ujm_0-RSI__20_1\"</span><span style=\"color: #B392F0\">).reorderDown()</span></span></code></pre>\n<h3 id=\"maximize-minimize\">Maximize Minimize</h3>\n<p>Toggle the chart pane maximize and minimize state.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">pane</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">ChartPanes</span><span style=\"color: #B392F0\">.get(</span><span style=\"color: #FFAB70\">\"TradeX_test-RSI__20_1\"</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">MainPane</span><span style=\"color: #B392F0\">.paneMaximize(pane)</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"collapse-expand\">Collapse Expand</h3>\n<p>Toggle the chart pane collapse and expand state.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">pane</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">ChartPanes</span><span style=\"color: #B392F0\">.get(</span><span style=\"color: #FFAB70\">\"TradeX_test-RSI__20_1\"</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">MainPane</span><span style=\"color: #B392F0\">.paneCollapse(pane)</span></span></code></pre>\n<h2 id=\"primary-chart-pane\">Primary Chart Pane</h2>\n<p>The primary chart pane that displays the price history (candles) can be accessed like so:</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.Chart</span></span></code></pre>\n<p>This exposes the following methods.</p>\n<h3 id=\"set-visibility-for-legends-on-primary\">Set Visibility for Legends on Primary</h3>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">Chart</span><span style=\"color: #B392F0\">.legendsVisibility(</span><span style=\"color: #FFAB70\">\"hide\"</span><span style=\"color: #B392F0\">)</span></span></code></pre>\n<p>Accepts either <code>show</code> or <code>hide</code> to toggle the visibility of all indicator legends on the Primary pane.</p>\n<h2 id=\"indicators\">Indicators</h2>\n<h3 id=\"add\">Add</h3>\n<p>To add an “empty” indicator is as simple as:</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.addIndicator(</span><span style=\"color: #FFAB70\">\"RSI\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"RSI\"</span><span style=\"color: #B392F0\">)</span></span></code></pre>\n<p>If the chart has price history data, the indicator will automatically calculate it’s values with it’s defaults.</p>\n<p>However, indicators can also be added with data and or with custom settings.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.addIndicator(</span><span style=\"color: #FFAB70\">\"EMA\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"EMA\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> {data</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> settings})</span></span></code></pre>\n<p><code>addIndicator()</code> returns the indicator instance for your own storage or manipulation.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">myIndicator</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.addIndicator(</span><span style=\"color: #FFAB70\">\"RSI\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"RSI\"</span><span style=\"color: #B392F0\">)</span></span></code></pre>\n<h3 id=\"remove-1\">Remove</h3>\n<p>The indicator can be removed in a number of ways.</p>\n<ol>\n<li>Directly via the instance</li>\n</ol>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">myIndicator</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.addIndicator(</span><span style=\"color: #FFAB70\">\"RSI\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"RSI\"</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #79B8FF\">myIndicator</span><span style=\"color: #B392F0\">.remove()</span></span></code></pre>\n<ol start=\"2\">\n<li>From the root API</li>\n</ol>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart1</span><span style=\"color: #B392F0\">.removeIndicator(</span><span style=\"color: #FFAB70\">\"TradeX_test-Chart_2-BB_4\"</span><span style=\"color: #B392F0\">)</span></span></code></pre>\n<ol start=\"3\">\n<li>Via the chart pane that hosts the indicator</li>\n</ol>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">chart1</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">ChartPanes</span><span style=\"color: #B392F0\">.get(</span><span style=\"color: #FFAB70\">\"TradeX_test-Chart_2\"</span><span style=\"color: #B392F0\">).removeIndicator(</span><span style=\"color: #FFAB70\">\"TradeX_test-Chart_2-BB_4\"</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">chart1</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">ChartPanes</span><span style=\"color: #B392F0\">.get(</span><span style=\"color: #FFAB70\">\"TradeX_test-RSI__20_3\"</span><span style=\"color: #B392F0\">).indicators[</span><span style=\"color: #FFAB70\">\"TradeX_test-RSI__20_3-RSI_5\"</span><span style=\"color: #B392F0\">].</span><span style=\"color: #79B8FF\">instance</span><span style=\"color: #B392F0\">.remove()</span></span></code></pre>\n<h3 id=\"visible\">Visible</h3>\n<p>Set or get the indicator visibility. The method accepts a boolean to set the indicator visibility and also returns a boolean of the current state.</p>\n<p><code>true</code> visible\n<code>false</code> not visible</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">visible</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart1</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">ChartPanes</span><span style=\"color: #B392F0\">.get(</span><span style=\"color: #FFAB70\">\"TradeX_test-RSI__20_3\"</span><span style=\"color: #B392F0\">).indicators[</span><span style=\"color: #FFAB70\">\"TradeX_test-RSI__20_3-RSI_5\"</span><span style=\"color: #B392F0\">].</span><span style=\"color: #79B8FF\">instance</span><span style=\"color: #B392F0\">.visible()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// set indicator visibility to not visible (false)</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">chart1</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">ChartPanes</span><span style=\"color: #B392F0\">.get(</span><span style=\"color: #FFAB70\">\"TradeX_test-RSI__20_3\"</span><span style=\"color: #B392F0\">).indicators[</span><span style=\"color: #FFAB70\">\"TradeX_test-RSI__20_3-RSI_5\"</span><span style=\"color: #B392F0\">].</span><span style=\"color: #79B8FF\">instance</span><span style=\"color: #B392F0\">.visible(</span><span style=\"color: #79B8FF\">false</span><span style=\"color: #B392F0\">)</span></span></code></pre>");

				const frontmatter = {"title":"API Examples"};
				const file = "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/api-examples.md";
				const url = undefined;
				function rawContent() {
					return "This documentation gives example API work flows. TradeX-chart is organized in a hierarchical structure, which is reflected in the API, allowing you to reach down into the depths of the chart, giving you granular control of it's behavior and appearance.\n\n:::tip\nMany of these examples can be used in the browser developer tool console, to find out what the chart is doing.\nAssign the chart instance to a global variable and explore via the console.\n:::\n\n## Chart Root\n\n### Chart Version\n\nreturn TradeX-chart version number.\n\n```javascript\nchart0.version\n// 0.139.8\n```\n\n### Chart ID\n\nif no ID is provided in the chart config, a unique one will be auto-generated.\n\n```javascript\nchart0.id\n\n// \"TX_lixo8d6m_cy8_0\" \n```\n\n### Chart State\n\nchart0.state\n\nchart0.reset()\nchart0.expunge()\nchart0.state.create()\nchart0.state.export()\nchart0.use()\nchart0.has()\ndata\ndelete\nget\nid\nisEmpty\nstatus\n\nList all states available\n\n```javascript\nchart0.list()\n```\n\nexport (save) chart.state.exportState() the current chart state\ncreate a new state const NewState = chart.state.createState() , this adds to the in memory list of states\nselect the new state chart.state = NewState\n\n### Download Image\n\n``downloadImage()`` will trigger a file download, exporting a ``.png`` image snapshot of the chart, excluding the utils or tool bars.\n\n\n| Parameter | Type   | Description                                                  | Required |\n| :---------- | -------- | :------------------------------------------------------------- | ---------- |\n| fileName  | string | file name                                                    | false    |\n| type      | string | image type, \"image/png\" (default), \"image/jpg\", \"image/webp\" | false    |\n| quality   | number | image quality                                                | false    |\n| watermark | Object | {imgURL, x, y, width, height}                                | false    |\n\n```javascript\nchart0.downloadImage(\"mychart.png\")\n```\n\nBy default, ``downloadImage()`` will export a ``.png`` image for download. If no ``filename`` is supplied, it will use the chart id by default.\n\n``downloadImage()`` can export a watermarked image. The ``watermark`` object accepts a relative path to an image of type ``\"image/png\" (default), \"image/jpg\", \"image/webp\", \"image/svg\"``.\n\n### Data URL Export\n\n``toImageURL()`` will create a chart image snapshot as a data URL to use as an image source.\n\n\n| Parameter | Type     | Description                                                  | Required |\n| ----------- | ---------- | :------------------------------------------------------------- | ---------- |\n| cb        | function | callback to receive the data URL                             | false    |\n| type      | string   | image type, \"image/png\" (default), \"image/jpg\", \"image/webp\" | false    |\n| quality   | number   | image quality                                                | false    |\n| watermark | Object   | {imgURL, x, y, width, height}                                | false    |\n\n```javascript\nconst cb = (dataURL) => {\n  // do something with the dataURL\n  // examples: save to server, attach to email, send to an API\n}\nchart0.toImageURL(cb)\n```\n\nA callback function is optional to receive the data URL, if none is provided, a ``Promise`` will be returned instead.\n\n``toImageURL()`` will export a ``.png`` image by default.\n\n``toImageURL()`` can export a watermarked image. The ``watermark`` object accepts a relative path to an image of type ``\"image/png\" (default), \"image/jpg\", \"image/webp\", \"image/svg\"``.\n\n## Main Pane\n\n``MainPane.chartPanes`` returns a ``Map()`` of all existing chart panes.\n\n```javascript\nchart1.MainPane.chartPanes\n```\n\n```javascript\nMap { \"TradeX_test-Chart_2\" → {…}, \"TradeX_test-RSI__20_3\" → {} }\n```\n\nThe chart pane IDs are used as the ``Map()`` keys.\n\n## Chart Panes\n\n### Remove\n\n```javascript\nchart0.ChartPanes.removeChartPane(\"TX_lixi72el_tc8_0-RSI__20_1\")\n// or alternatively\nchart0.ChartPanes.get(\"TX_lixi72el_tc8_0-RSI__20_1\").remove() \n```\n\nThe primary chart pane (price history) cannot be deleted as it provides the main data state for the chart.\n\nHowever, loading a new data state will of course remove and replace it.\n\n### Re-order\n\nThe visual stacking of chart panes can be changed by raising or lowering them above their neighbours.\n\n```javascript\nchart0.ChartPanes.get(\"TX_lj4rpog3_ujm_0-RSI__20_1\").reorderUp()\nchart0.ChartPanes.get(\"TX_lj4rpog3_ujm_0-RSI__20_1\").reorderDown()\n```\n\n### Maximize Minimize\n\nToggle the chart pane maximize and minimize state.\n\n```javascript\nconst pane = chart0.ChartPanes.get(\"TradeX_test-RSI__20_1\")\nchart0.MainPane.paneMaximize(pane)\n\n```\n\n### Collapse Expand\n\nToggle the chart pane collapse and expand state.\n\n```javascript\nconst pane = chart0.ChartPanes.get(\"TradeX_test-RSI__20_1\")\nchart0.MainPane.paneCollapse(pane)\n```\n\n## Primary Chart Pane\n\nThe primary chart pane that displays the price history (candles) can be accessed like so:\n\n```javascript\nchart0.Chart\n```\n\nThis exposes the following methods.\n\n### Set Visibility for Legends on Primary\n\n```javascript\nchart0.Chart.legendsVisibility(\"hide\")\n```\n\nAccepts either ``show`` or ``hide`` to toggle the visibility of all indicator legends on the Primary pane.\n\n## Indicators\n\n### Add\n\nTo add an \"empty\" indicator is as simple as:\n\n```javascript\nchart0.addIndicator(\"RSI\", \"RSI\")\n```\n\nIf the chart has price history data, the indicator will automatically calculate it's values with it's defaults.\n\nHowever, indicators can also be added with data and or with custom settings.\n\n```javascript\nchart0.addIndicator(\"EMA\", \"EMA\", {data, settings})\n```\n\n``addIndicator()`` returns the indicator instance for your own storage or manipulation.\n\n```javascript\nconst myIndicator = chart0.addIndicator(\"RSI\", \"RSI\")\n```\n\n### Remove\n\nThe indicator can be removed in a number of ways.\n\n1. Directly via the instance\n\n```javascript\nconst myIndicator = chart0.addIndicator(\"RSI\", \"RSI\")\n      myIndicator.remove()\n```\n\n2. From the root API\n\n```javascript\nchart1.removeIndicator(\"TradeX_test-Chart_2-BB_4\")\n```\n\n3. Via the chart pane that hosts the indicator\n\n```javascript\nchart1.ChartPanes.get(\"TradeX_test-Chart_2\").removeIndicator(\"TradeX_test-Chart_2-BB_4\")\n\nchart1.ChartPanes.get(\"TradeX_test-RSI__20_3\").indicators[\"TradeX_test-RSI__20_3-RSI_5\"].instance.remove()\n```\n\n### Visible\n\nSet or get the indicator visibility. The method accepts a boolean to set the indicator visibility and also returns a boolean of the current state.\n\n``true`` visible\n``false`` not visible\n\n```javascript\nconst visible = chart1.ChartPanes.get(\"TradeX_test-RSI__20_3\").indicators[\"TradeX_test-RSI__20_3-RSI_5\"].instance.visible()\n\n// set indicator visibility to not visible (false)\nchart1.ChartPanes.get(\"TradeX_test-RSI__20_3\").indicators[\"TradeX_test-RSI__20_3-RSI_5\"].instance.visible(false)\n```\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"chart-root","text":"Chart Root"},{"depth":3,"slug":"chart-version","text":"Chart Version"},{"depth":3,"slug":"chart-id","text":"Chart ID"},{"depth":3,"slug":"chart-state","text":"Chart State"},{"depth":3,"slug":"download-image","text":"Download Image"},{"depth":3,"slug":"data-url-export","text":"Data URL Export"},{"depth":2,"slug":"main-pane","text":"Main Pane"},{"depth":2,"slug":"chart-panes","text":"Chart Panes"},{"depth":3,"slug":"remove","text":"Remove"},{"depth":3,"slug":"re-order","text":"Re-order"},{"depth":3,"slug":"maximize-minimize","text":"Maximize Minimize"},{"depth":3,"slug":"collapse-expand","text":"Collapse Expand"},{"depth":2,"slug":"primary-chart-pane","text":"Primary Chart Pane"},{"depth":3,"slug":"set-visibility-for-legends-on-primary","text":"Set Visibility for Legends on Primary"},{"depth":2,"slug":"indicators","text":"Indicators"},{"depth":3,"slug":"add","text":"Add"},{"depth":3,"slug":"remove-1","text":"Remove"},{"depth":3,"slug":"visible","text":"Visible"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
