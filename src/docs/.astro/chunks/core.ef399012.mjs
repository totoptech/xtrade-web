const id = "api/core.md";
						const collection = "docs";
						const slug = "api/core";
						const body = "\n## Classes\n\n<dl>\n<dt><a href=\"#TradeXchart\">TradeXchart</a> ⇐ <code>Tradex_chart</code></dt>\n<dd></dd>\n</dl>\n\n## Members\n\n<dl>\n<dt><a href=\"#version\">version</a> ⇒ <code>string</code></dt>\n<dd></dd>\n<dt><a href=\"#name\">name</a> ⇒ <code>string</code></dt>\n<dd></dd>\n<dt><a href=\"#shortName\">shortName</a> ⇒ <code>string</code></dt>\n<dd></dd>\n<dt><a href=\"#config\">config</a> ⇒ <code>object</code></dt>\n<dd></dd>\n<dt><a href=\"#Chart\">Chart</a> ⇒ <code>object</code></dt>\n<dd></dd>\n<dt><a href=\"#ChartPanes\">ChartPanes</a> ⇒ <code>Map</code></dt>\n<dd></dd>\n<dt><a href=\"#Indicators\">Indicators</a> ⇒ <code>object</code></dt>\n<dd></dd>\n<dt><a href=\"#state\">state</a> ⇒ <code>State</code></dt>\n<dd></dd>\n<dt><a href=\"#allData\">allData</a> ⇒ <code>object</code></dt>\n<dd></dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#start\">start(cfg)</a></dt>\n<dd><p>Target element has been validated as a mount point, \nlet&#39;s start building</p>\n</dd>\n<dt><a href=\"#on\">on(topic, handler, context)</a> ⇒ <code>boolean</code></dt>\n<dd><p>Subscribe to a topic</p>\n</dd>\n<dt><a href=\"#off\">off(topic, handler)</a> ⇒ <code>boolean</code></dt>\n<dd><p>Unsubscribe from a topic</p>\n</dd>\n<dt><a href=\"#emit\">emit(topic, data)</a> ⇒ <code>boolean</code></dt>\n<dd><p>Publish a topic</p>\n</dd>\n<dt><a href=\"#execute\">execute(topic, data, cb)</a></dt>\n<dd><p>Execute a task</p>\n</dd>\n<dt><a href=\"#stopStream\">stopStream()</a></dt>\n<dd><p>stop a chart stream\nwill halt any updates to price or indicators</p>\n</dd>\n<dt><a href=\"#jumpToIndex\">jumpToIndex(start, nearest, centre)</a></dt>\n<dd><p>set Range start index</p>\n</dd>\n<dt><a href=\"#jumpToTS\">jumpToTS(ts, nearest, centre)</a></dt>\n<dd><p>set Range start to time stamp</p>\n</dd>\n<dt><a href=\"#jumpToStart\">jumpToStart(centre)</a></dt>\n<dd><p>set Range start to state data start</p>\n</dd>\n<dt><a href=\"#jumpToEnd\">jumpToEnd(centre)</a></dt>\n<dd><p>set Range start to state data end</p>\n</dd>\n<dt><a href=\"#mergeData\">mergeData(merge, newRange)</a></dt>\n<dd><p>Merge a block of data into the chart state.\nUsed for populating a chart with back history.\nMerge data must be formatted to a Chart State.\nOptionally set a new range upon merge.</p>\n</dd>\n<dt><a href=\"#isIndicator\">isIndicator(i)</a> ⇒ <code>boolean</code></dt>\n<dd><p>validate indicator</p>\n</dd>\n<dt><a href=\"#setIndicators\">setIndicators(i, flush)</a> ⇒ <code>boolean</code></dt>\n<dd><p>import Indicators</p>\n</dd>\n<dt><a href=\"#addIndicator\">addIndicator(i, name, params)</a> ⇒ <code>Indicator</code> | <code>false</code></dt>\n<dd><p>add an indicator - default or registered user defined</p>\n</dd>\n<dt><a href=\"#getIndicator\">getIndicator(i)</a> ⇒ <code>Indicator</code> | <code>false</code></dt>\n<dd><p>retrieve indicator by ID</p>\n</dd>\n<dt><a href=\"#removeIndicator\">removeIndicator(i)</a> ⇒ <code>boolean</code></dt>\n<dd><p>remove an indicator - default or registered user defined</p>\n</dd>\n<dt><a href=\"#indicatorSettings\">indicatorSettings(i, s)</a> ⇒ <code>Object</code></dt>\n<dd><p>set or get indicator settings</p>\n</dd>\n<dt><a href=\"#hasStateIndicator\">hasStateIndicator(i, dataset)</a> ⇒ <code>Indicator</code> | <code>false</code></dt>\n<dd><p>Does current chart state have indicator</p>\n</dd>\n<dt><a href=\"#calcAllIndicators\">calcAllIndicators()</a></dt>\n<dd><p>calculate all indicators currently in use</p>\n</dd>\n</dl>\n\n<a name=\"TradeXchart\"></a>\n\n## TradeXchart ⇐ <code>Tradex\\_chart</code>\n**Kind**: global class  \n**Extends**: <code>Tradex\\_chart</code>  \n\n* [TradeXchart](#TradeXchart) ⇐ <code>Tradex\\_chart</code>\n    * [new TradeXchart()](#new_TradeXchart_new)\n    * [.create(container, [txCfg], state)](#TradeXchart.create) ⇒ <code>instance</code>\n    * [.destroy(chart)](#TradeXchart.destroy)\n    * [.destroy()](#TradeXchart.destroy)\n    * [.setDimensions(w, h)](#TradeXchart.setDimensions)\n    * [.setPricePrecision(pricePrecision)](#TradeXchart.setPricePrecision)\n    * [.setVolumePrecision(volumePrecision)](#TradeXchart.setVolumePrecision)\n    * [.addTheme(theme)](#TradeXchart.addTheme) ⇒ <code>instance</code>\n    * [.setTheme(theme)](#TradeXchart.setTheme) ⇒ <code>boolean</code>\n    * [.setStream(stream)](#TradeXchart.setStream) ⇒ <code>instance</code>\n    * [.getRange(start, end)](#TradeXchart.getRange)\n    * [.setRange(start, end)](#TradeXchart.setRange)\n    * [.resize(width, height)](#TradeXchart.resize) ⇒ <code>boolean</code>\n    * [.refresh()](#TradeXchart.refresh)\n\n<a name=\"new_TradeXchart_new\"></a>\n\n### new TradeXchart()\nThe root class for the entire chart\n\n<a name=\"TradeXchart.create\"></a>\n\n### TradeXchart.create(container, [txCfg], state) ⇒ <code>instance</code>\nCreate a new TradeXchart instance\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n**Returns**: <code>instance</code> - TradeXchart  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| container | <code>DOM\\_element</code> |  | HTML element to mount the chart on |\n| [txCfg] | <code>Object</code> | <code>{}</code> | chart config |\n| state | <code>Object</code> |  | chart state |\n\n<a name=\"TradeXchart.destroy\"></a>\n\n### TradeXchart.destroy(chart)\nDestroy a chart instance, clean up and remove data\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type |\n| --- | --- |\n| chart | <code>instance</code> | \n\n<a name=\"TradeXchart.destroy\"></a>\n\n### TradeXchart.destroy()\nStop all chart event processing and remove the chart from DOM.\nIn other words, destroy the chart.\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n<a name=\"TradeXchart.setDimensions\"></a>\n\n### TradeXchart.setDimensions(w, h)\nSet chart width and height\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| w | <code>number</code> | width in pixels |\n| h | <code>number</code> | height in pixels |\n\n<a name=\"TradeXchart.setPricePrecision\"></a>\n\n### TradeXchart.setPricePrecision(pricePrecision)\nSet the price accuracy\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| pricePrecision | <code>number</code> | Price accuracy |\n\n<a name=\"TradeXchart.setVolumePrecision\"></a>\n\n### TradeXchart.setVolumePrecision(volumePrecision)\nSet the volume accuracy\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| volumePrecision | <code>number</code> | Volume accuracy |\n\n<a name=\"TradeXchart.addTheme\"></a>\n\n### TradeXchart.addTheme(theme) ⇒ <code>instance</code>\nAdd a theme to the chart,\nif no current theme is set, make this the current one.\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n**Returns**: <code>instance</code> - - theme instance  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| theme | <code>Object</code> | Volume accuracy |\n\n<a name=\"TradeXchart.setTheme\"></a>\n\n### TradeXchart.setTheme(theme) ⇒ <code>boolean</code>\nSet the chart theme\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| theme | <code>string</code> | theme identifier |\n\n<a name=\"TradeXchart.setStream\"></a>\n\n### TradeXchart.setStream(stream) ⇒ <code>instance</code>\nspecify a chart stream\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type |\n| --- | --- |\n| stream | <code>Object</code> | \n\n<a name=\"TradeXchart.getRange\"></a>\n\n### TradeXchart.getRange(start, end)\ninitialize range\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| start | <code>number</code> | <code>0</code> | index |\n| end | <code>number</code> | <code>0</code> | index |\n\n<a name=\"TradeXchart.setRange\"></a>\n\n### TradeXchart.setRange(start, end)\nset start and end of range\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| start | <code>number</code> | <code>0</code> | index |\n| end | <code>number</code> |  | index |\n\n<a name=\"TradeXchart.resize\"></a>\n\n### TradeXchart.resize(width, height) ⇒ <code>boolean</code>\nResize the chart\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n**Returns**: <code>boolean</code> - - success or failure  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| width | <code>number</code> | pixels |\n| height | <code>number</code> | pixels |\n\n<a name=\"TradeXchart.refresh\"></a>\n\n### TradeXchart.refresh()\nrefresh / redraw the chart\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n<a name=\"version\"></a>\n\n## version ⇒ <code>string</code>\n**Kind**: global variable  \n**Returns**: <code>string</code> - - return TradeX Chart version number  \n<a name=\"name\"></a>\n\n## name ⇒ <code>string</code>\n**Kind**: global variable  \n**Returns**: <code>string</code> - - user defined chart name  \n<a name=\"shortName\"></a>\n\n## shortName ⇒ <code>string</code>\n**Kind**: global variable  \n**Returns**: <code>string</code> - - user defined short chart name  \n<a name=\"config\"></a>\n\n## config ⇒ <code>object</code>\n**Kind**: global variable  \n**Returns**: <code>object</code> - - current chart configuration including defaults  \n<a name=\"Chart\"></a>\n\n## Chart ⇒ <code>object</code>\n**Kind**: global variable  \n**Returns**: <code>object</code> - - primary chart pane - displays price history (candles)  \n<a name=\"ChartPanes\"></a>\n\n## ChartPanes ⇒ <code>Map</code>\n**Kind**: global variable  \n**Returns**: <code>Map</code> - - all chart panes, primary and secondary  \n<a name=\"Indicators\"></a>\n\n## Indicators ⇒ <code>object</code>\n**Kind**: global variable  \n**Returns**: <code>object</code> - - all chart indicators in use, grouped by chart panes  \n<a name=\"state\"></a>\n\n## state ⇒ <code>State</code>\n**Kind**: global variable  \n**Returns**: <code>State</code> - - current state instance  \n<a name=\"allData\"></a>\n\n## allData ⇒ <code>object</code>\n**Kind**: global variable  \n**Returns**: <code>object</code> - - all state datasets  \n<a name=\"start\"></a>\n\n## start(cfg)\nTarget element has been validated as a mount point, \nlet's start building\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| cfg | <code>Object</code> | chart configuration |\n\n<a name=\"on\"></a>\n\n## on(topic, handler, context) ⇒ <code>boolean</code>\nSubscribe to a topic\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| topic | <code>string</code> | The topic name |\n| handler | <code>function</code> | The function or method that is called |\n| context | <code>Object</code> | The context the function(s) belongs to |\n\n<a name=\"off\"></a>\n\n## off(topic, handler) ⇒ <code>boolean</code>\nUnsubscribe from a topic\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| topic | <code>string</code> | The topic name |\n| handler | <code>function</code> | function to remove |\n\n<a name=\"emit\"></a>\n\n## emit(topic, data) ⇒ <code>boolean</code>\nPublish a topic\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| topic | <code>string</code> | The topic name |\n| data | <code>Object</code> | The data to publish |\n\n<a name=\"execute\"></a>\n\n## execute(topic, data, cb)\nExecute a task\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| topic | <code>string</code> | The topic name |\n| data | <code>Object</code> | The data that gets published |\n| cb | <code>function</code> | callback method |\n\n<a name=\"stopStream\"></a>\n\n## stopStream()\nstop a chart stream\nwill halt any updates to price or indicators\n\n**Kind**: global function  \n<a name=\"jumpToIndex\"></a>\n\n## jumpToIndex(start, nearest, centre)\nset Range start index\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| start | <code>number</code> |  | starting index of state data |\n| nearest | <code>boolean</code> | <code>true</code> | limit range start - no out of range values |\n| centre | <code>boolean</code> | <code>true</code> | center the range on the start value |\n\n<a name=\"jumpToTS\"></a>\n\n## jumpToTS(ts, nearest, centre)\nset Range start to time stamp\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| ts | <code>number</code> |  | timestamp |\n| nearest | <code>boolean</code> | <code>true</code> | limit range start - no out of range values |\n| centre | <code>boolean</code> | <code>true</code> | center the range on the start value |\n\n<a name=\"jumpToStart\"></a>\n\n## jumpToStart(centre)\nset Range start to state data start\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| centre | <code>boolean</code> | <code>true</code> | center the range on the start value |\n\n<a name=\"jumpToEnd\"></a>\n\n## jumpToEnd(centre)\nset Range start to state data end\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| centre | <code>boolean</code> | <code>true</code> | center the range on the end value |\n\n<a name=\"mergeData\"></a>\n\n## mergeData(merge, newRange)\nMerge a block of data into the chart state.\nUsed for populating a chart with back history.\nMerge data must be formatted to a Chart State.\nOptionally set a new range upon merge.\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| merge | <code>Object</code> |  | merge data must be formatted to a Chart State |\n| newRange | <code>boolean</code> \\| <code>object</code> | <code>false</code> | false | {start: number, end: number} |\n\n<a name=\"isIndicator\"></a>\n\n## isIndicator(i) ⇒ <code>boolean</code>\nvalidate indicator\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| i | <code>class</code> | indicator class |\n\n<a name=\"setIndicators\"></a>\n\n## setIndicators(i, flush) ⇒ <code>boolean</code>\nimport Indicators\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| i | <code>Object</code> |  | indicators {id, name, event, ind} |\n| flush | <code>boolean</code> | <code>false</code> | expunge default indicators |\n\n<a name=\"addIndicator\"></a>\n\n## addIndicator(i, name, params) ⇒ <code>Indicator</code> \\| <code>false</code>\nadd an indicator - default or registered user defined\n\n**Kind**: global function  \n**Returns**: <code>Indicator</code> \\| <code>false</code> - - indicator instance or false  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| i | <code>string</code> | indicator |\n| name | <code>string</code> | identifier |\n| params | <code>Object</code> | {settings, data} |\n\n<a name=\"getIndicator\"></a>\n\n## getIndicator(i) ⇒ <code>Indicator</code> \\| <code>false</code>\nretrieve indicator by ID\n\n**Kind**: global function  \n**Returns**: <code>Indicator</code> \\| <code>false</code> - - indicator instance or false  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| i | <code>string</code> | indicator ID |\n\n<a name=\"removeIndicator\"></a>\n\n## removeIndicator(i) ⇒ <code>boolean</code>\nremove an indicator - default or registered user defined\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - - success / failure  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| i | <code>string</code> \\| <code>Indicator</code> | indicator id or Indicator instance |\n\n<a name=\"indicatorSettings\"></a>\n\n## indicatorSettings(i, s) ⇒ <code>Object</code>\nset or get indicator settings\n\n**Kind**: global function  \n**Returns**: <code>Object</code> - - settings  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| i | <code>string</code> \\| <code>Indicator</code> | indicator id or Indicator instance |\n| s | <code>Object</code> | settings |\n\n<a name=\"hasStateIndicator\"></a>\n\n## hasStateIndicator(i, dataset) ⇒ <code>Indicator</code> \\| <code>false</code>\nDoes current chart state have indicator\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| i | <code>string</code> |  | indicator id or name |\n| dataset | <code>string</code> | <code>&quot;searchAll&quot;</code> |  |\n\n<a name=\"calcAllIndicators\"></a>\n\n## calcAllIndicators()\ncalculate all indicators currently in use\n\n**Kind**: global function  \n";
						const data = {title:"core",editUrl:true,head:[],template:"doc"};
						const _internal = {
							type: 'content',
							filePath: "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/api/core.md",
							rawData: "\ntitle: core",
						};

export { _internal, body, collection, data, id, slug };
