import { i as createVNode, F as Fragment, s as spreadAttributes } from './astro.7b6fbd1f.mjs';
import '@astrojs/internal-helpers/path';
import 'node:fs';
import 'node:path';
import 'node:url';
import 'slash';
import 'node:fs/promises';
import './pages/404.astro.1d69ba63.mjs';
import 'html-escaper';
import 'fs';
import 'path';
/* empty css                        */import 'zod';
/* empty css                                                             */import 'execa';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<p>The TradeX-chart <a href=\"../canvas_extension_layers\">Canvas Extension Layers</a> (CEL)provides and API for pixel perfect <a href=\"../canvas_extension_layers#hit-detection\">hit detection</a> of pointers.</p>\n<p>The Hit Detection API is accessible for each layer created with CEL via the hit property.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">CEL</span><span style=\"color: #B392F0\">.Layer(cfg);</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.hit</span></span></code></pre>\n<p>However you typically will be accessing this through your own <a href=\"../indicators/#custom-indicators\">custom indicator</a> or <a href=\"../overlays/#custom-overlays\">overlays</a>.</p>\n<p>The Hit Detection is a non-visible <code>&#x3C;canvas>&#x3C;/canvas></code> of the same dimensions as itâ€™s parent layer. As it is a HTML canvas element, all of the same canvas methods are used to draw on it.</p>\n<p>Typically, the image (icon, line, candle) that you draw on your indicator or overlay layer, you repeat on the hit layer, but with one major difference.</p>\n<p>Images drawn on the hit layer are of one single colour and that colour is provided to you by the Hit API.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.hit</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">col</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.getIndexValue(key)</span></span></code></pre>\n<p>The <code>key</code> or <code>ID</code> value provided to <code>getIndexValue(key)</code> is a unique user assigned <code>number</code> for each item on the layer that you wish to detect any pointer interaction with.</p>\n<p>The returned value is used as the fill or stroke on the Hit canvas.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">ctx</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">scene</span><span style=\"color: #B392F0\">.context</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.hit</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">col</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.getIndexValue(key)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">ctx</span><span style=\"color: #B392F0\">.stroke </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> col</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">ctx</span><span style=\"color: #B392F0\">.fillStyle </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> col</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// draw something</span></span></code></pre>\n<p>Your custom indicator or overlay would subscribe to one of the chart pointer events and on a pointer event, test if the pointer x,y position returns a match from the Hit API.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">constructor() {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">core</span><span style=\"color: #B392F0\">.on(</span><span style=\"color: #FFAB70\">\"primary_pointerdown\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">isSelected</span><span style=\"color: #B392F0\">.bind(</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">))</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">isSelected(e) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">x</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> e[</span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">]</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">y</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> e[</span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #B392F0\">]</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">k</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">layer</span><span style=\"color: #B392F0\">.</span><span style=\"color: #79B8FF\">hit</span><span style=\"color: #B392F0\">.getIntersection(x</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\">y)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// no hit on layer</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (k </span><span style=\"color: #F97583\">==</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">-</span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #B392F0\">) </span><span style=\"color: #F97583\">return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">switch</span><span style=\"color: #B392F0\">(k) {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">: </span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #6B737C\">// do something for first item</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">break</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #B392F0\">:</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #6B737C\">// do something for second item</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">break</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">}</span></span></code></pre>\n<p>The Hit API can test for a potential maximum of 16777216 items, but effectively, this would very likely be much less owing to browser resource limitations.</p>");

				const frontmatter = {"title":"Hit Detection","description":"How to make use of pixel perfect hit detection for pointers"};
				const file = "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/hit_detection.md";
				const url = undefined;
				function rawContent() {
					return "\nThe TradeX-chart [Canvas Extension Layers](../canvas_extension_layers) (CEL)provides and API for pixel perfect [hit detection](../canvas_extension_layers#hit-detection) of pointers.\n\nThe Hit Detection API is accessible for each layer created with CEL via the hit property.\n\n```javascript\nconst layer = new CEL.Layer(cfg);\nconst hit = layer.hit\n```\nHowever you typically will be accessing this through your own [custom indicator](../indicators/#custom-indicators) or [overlays](../overlays/#custom-overlays).\n\nThe Hit Detection is a non-visible ``<canvas></canvas>`` of the same dimensions as it's parent layer. As it is a HTML canvas element, all of the same canvas methods are used to draw on it.\n\nTypically, the image (icon, line, candle) that you draw on your indicator or overlay layer, you repeat on the hit layer, but with one major difference.\n\nImages drawn on the hit layer are of one single colour and that colour is provided to you by the Hit API.\n\n```javascript\nconst hit = layer.hit\nconst col = hit.getIndexValue(key)\n```\nThe ``key`` or ``ID`` value provided to ``getIndexValue(key)`` is a unique user assigned ``number`` for each item on the layer that you wish to detect any pointer interaction with.\n\nThe returned value is used as the fill or stroke on the Hit canvas.\n\n```javascript\nconst ctx = layer.scene.context\nconst hit = layer.hit\nconst col = hit.getIndexValue(key)\n\nctx.stroke = col\nctx.fillStyle = col\n// draw something\n```\n\nYour custom indicator or overlay would subscribe to one of the chart pointer events and on a pointer event, test if the pointer x,y position returns a match from the Hit API.\n\n```javascript\nconstructor() {\n  this.core.on(\"primary_pointerdown\", this.isSelected.bind(this))\n}\n\nisSelected(e) {\n  const x = e[0]\n  const y = e[1]\n  const k = this.layer.hit.getIntersection(x,y)\n\n  // no hit on layer\n  if (k == -1) return\n\n  switch(k) {\n    case 0: \n      // do something for first item\n      break;\n    case 1:\n      // do something for second item\n      break;\n  }\n}\n```\n\nThe Hit API can test for a potential maximum of 16777216 items, but effectively, this would very likely be much less owing to browser resource limitations.";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
