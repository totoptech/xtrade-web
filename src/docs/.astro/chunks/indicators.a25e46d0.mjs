import { i as createVNode, F as Fragment, s as spreadAttributes } from './astro.7b6fbd1f.mjs';
import '@astrojs/internal-helpers/path';
import 'node:fs';
import 'node:path';
import 'node:url';
import 'slash';
import 'node:fs/promises';
import './pages/404.astro.1d69ba63.mjs';
import 'html-escaper';
import 'fs';
import 'path';
/* empty css                        */import 'zod';
/* empty css                                                             */import 'execa';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<p>TradeX-chart provides a set of <a href=\"../indicators_default\">default indicators</a> based upon TA-Lib. The chart uses a Web Assembly version of the library, <a href=\"https://github.com/newproplus/talib-web\">talib-web</a>.</p>\n<p>It is also possible to build and add your own <a href=\"../indicators_custom\">custom indicators</a> to the chart also.</p>\n<p>Indicators are grouped as:</p>\n<ul>\n<li><strong>Primary Chart Pane</strong> - those displayed atop the price history (candles)</li>\n<li><strong>Secondary Chart Panes</strong> - those displayed in their own pane.</li>\n</ul>\n<h2 id=\"adding-indicators-to-the-chart\">Adding Indicators to the Chart</h2>\n<p>Indicators can be added via the following methods:</p>\n<ul>\n<li><a href=\"#adding-indicators-via-api\">API</a></li>\n<li><a href=\"#adding-indicators-via-the-data-state\">State</a></li>\n<li><a href=\"#adding-indicators-via-the-utils-bar\">Utils Bar</a></li>\n</ul>\n<h3 id=\"adding-indicators-via-api\">Adding Indicators Via API</h3>\n<p>To add an “empty” indicator is as simple as:</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">i</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"RSI\"</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">name</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"RSI_1\"</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">myInd </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.addIndicator(i</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> name)</span></span></code></pre>\n<p>If the chart has price history data, the indicator will automatically calculate it’s values with it’s defaults.</p>\n<p>However, indicators can also be added with data and or with custom settings.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">data</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> [ [</span><span style=\"color: #F8F8F8\">1543572000000</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">4079.63478779</span><span style=\"color: #B392F0\">] ]</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">settings</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> {style</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\">{}}</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">params</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> {data</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> settings}</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">myInd</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">chart0</span><span style=\"color: #B392F0\">.addIndicator(</span><span style=\"color: #FFAB70\">\"EMA\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"EMA_1\"</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> params)</span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Parameters</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>indicator</td><td>string</td><td>yes</td><td>identifier the chart is registered with</td></tr><tr><td>name</td><td>string</td><td>yes</td><td>text label used in legends</td></tr><tr><td>params</td><td>object</td><td>no</td><td>optional indicator configuration</td></tr></tbody></table>\n<p>The third argument <strong>params</strong> is an object that can optionally contain array <code>data</code> and or an object <code>settings</code>.</p>\n<pre is:raw=\"\" class=\"astro-code min-dark\" style=\"background-color: #1f1f1f; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">settings</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  timePeriod</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">20</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  style</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    stroke</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">\"#C80\"</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    width</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">'1'</span><span style=\"color: #BBBBBB\">,</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  }</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">}</span></span></code></pre>\n<p>Each entry in the <code>data</code> array requires an array with minimum of [timestamp, value] depending upon the indicator.</p>\n<p>The <code>settings</code> object can contain an object <code>style</code> and or individual input settings specific to the indicator.</p>\n<p>The <code>params.settings.style</code> object is how indicator an indicator can have it’s default style (theme) modified.</p>\n<h3 id=\"adding-indicators-via-the-data-state\">Adding Indicators Via the Data State</h3>\n<p>Indicators can be added via <a href=\"state\">a valid chart state</a>.</p>\n<h3 id=\"adding-indicators-via-the-utils-bar\">Adding Indicators Via the Utils Bar</h3>\n<p>The chart GUI can add indicators via the Utils Bar with Indicators icon. Firstly the Utils bar needs to be enabled in the chart config.</p>\n<p>Clicking on the Indicators icon will open a menu listing all of the indicators currently registered with the chart, including any custom indicators. Simply selecting the indicator from the list with the pointer will add it to the chart.</p>\n<p>TODO: add screenshot</p>\n<h2 id=\"indicator-removal\">Indicator Removal</h2>\n<p>Removal of Indicators can be done via:</p>\n<ul>\n<li>API - programmatically <code>chart.removeIndicator(\"TradeX_test-Chart_2-BB_4\")</code></li>\n<li>GUI - indicator legend bar controls</li>\n</ul>\n<h2 id=\"default-indicators\">Default Indicators</h2>\n<p>The <a href=\"../indicators_default\">Default Indicators documentation</a> lists all of the currently available indicators.</p>\n<p>TradeX-chart may or may not implement all of the indicators provided by TA-Lib.</p>\n<p>More will be implemented soon.</p>\n<h2 id=\"custom-indicators\">Custom Indicators</h2>\n<p><a href=\"../indicators_custom\">Custom Idicators</a> are in important feature of TradeX-chart. They are an extension of the default indicator class and thus inherit all of their methods and properties. The documentation will show you how to <a href=\"../indicators_custom#minimal-custom-indicator-definition\">define</a>, <a href=\"../indicators_custom#registering-custom-indicators\">register</a> and <a href=\"../indicators_custom#how-the-indicator-updates\">how data is passed to them</a>.</p>");

				const frontmatter = {"title":"Indicators"};
				const file = "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/reference/indicators.md";
				const url = undefined;
				function rawContent() {
					return "TradeX-chart provides a set of [default indicators](../indicators_default) based upon TA-Lib. The chart uses a Web Assembly version of the library, [talib-web](https://github.com/newproplus/talib-web).\n\nIt is also possible to build and add your own [custom indicators](../indicators_custom) to the chart also.\n\nIndicators are grouped as:\n\n* **Primary Chart Pane** - those displayed atop the price history (candles)\n* **Secondary Chart Panes** - those displayed in their own pane.\n\n## Adding Indicators to the Chart\n\nIndicators can be added via the following methods:\n\n* [API](#adding-indicators-via-api)\n* [State](#adding-indicators-via-the-data-state)\n* [Utils Bar](#adding-indicators-via-the-utils-bar)\n\n### Adding Indicators Via API\n\nTo add an \"empty\" indicator is as simple as:\n\n```javascript\nconst i = \"RSI\"\nconst name = \"RSI_1\"\nmyInd = chart0.addIndicator(i, name)\n```\n\nIf the chart has price history data, the indicator will automatically calculate it's values with it's defaults.\n\nHowever, indicators can also be added with data and or with custom settings.\n\n```javascript\nconst data = [ [1543572000000, 4079.63478779] ]\nconst settings = {style:{}}\nconst params = {data, settings}\nconst myInd = chart0.addIndicator(\"EMA\", \"EMA_1\", params)\n```\n\n\n| Parameters | Type   | Required | Description                             |\n| ------------ | -------- | ---------- | ----------------------------------------- |\n| indicator  | string | yes      | identifier the chart is registered with |\n| name       | string | yes      | text label used in legends              |\n| params     | object | no       | optional indicator configuration        |\n\nThe third argument **params** is an object that can optionally contain array ``data`` and or an object ``settings``.\n\n```javascript\nconst settings = {\n  timePeriod: 20,\n  style: {\n    stroke: \"#C80\",\n    width: '1',\n  }\n}\n```\n\nEach entry in the ``data`` array requires an array with minimum of [timestamp, value] depending upon the indicator.\n\nThe ``settings`` object can contain an object ``style`` and or individual input settings specific to the indicator.\n\nThe ``params.settings.style`` object is how indicator an indicator can have it's default style (theme) modified. \n\n### Adding Indicators Via the Data State\n\nIndicators can be added via [a valid chart state](state).\n\n### Adding Indicators Via the Utils Bar\n\nThe chart GUI can add indicators via the Utils Bar with Indicators icon. Firstly the Utils bar needs to be enabled in the chart config.\n\nClicking on the Indicators icon will open a menu listing all of the indicators currently registered with the chart, including any custom indicators. Simply selecting the indicator from the list with the pointer will add it to the chart.\n\nTODO: add screenshot\n\n## Indicator Removal\n\nRemoval of Indicators can be done via:\n\n* API - programmatically ``chart.removeIndicator(\"TradeX_test-Chart_2-BB_4\")``\n* GUI - indicator legend bar controls\n\n## Default Indicators\n\nThe [Default Indicators documentation](../indicators_default) lists all of the currently available indicators.\n\nTradeX-chart may or may not implement all of the indicators provided by TA-Lib.\n\nMore will be implemented soon.\n\n## Custom Indicators\n\n[Custom Idicators](../indicators_custom) are in important feature of TradeX-chart. They are an extension of the default indicator class and thus inherit all of their methods and properties. The documentation will show you how to [define](../indicators_custom#minimal-custom-indicator-definition), [register](../indicators_custom#registering-custom-indicators) and [how data is passed to them](../indicators_custom#how-the-indicator-updates).\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"adding-indicators-to-the-chart","text":"Adding Indicators to the Chart"},{"depth":3,"slug":"adding-indicators-via-api","text":"Adding Indicators Via API"},{"depth":3,"slug":"adding-indicators-via-the-data-state","text":"Adding Indicators Via the Data State"},{"depth":3,"slug":"adding-indicators-via-the-utils-bar","text":"Adding Indicators Via the Utils Bar"},{"depth":2,"slug":"indicator-removal","text":"Indicator Removal"},{"depth":2,"slug":"default-indicators","text":"Default Indicators"},{"depth":2,"slug":"custom-indicators","text":"Custom Indicators"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
