import { i as createVNode, F as Fragment, s as spreadAttributes } from './astro.7b6fbd1f.mjs';
import '@astrojs/internal-helpers/path';
import 'node:fs';
import 'node:path';
import 'node:url';
import 'slash';
import 'node:fs/promises';
import './pages/404.astro.1d69ba63.mjs';
import 'html-escaper';
import 'fs';
import 'path';
/* empty css                        */import 'zod';
/* empty css                                                             */import 'execa';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<h2 id=\"classes\">Classes</h2>\n<dl>\n<dt><a href=\"#TradeXchart\">TradeXchart</a> ⇐ <code>Tradex_chart</code></dt>\n<dd></dd>\n</dl>\n<h2 id=\"members\">Members</h2>\n<dl>\n<dt><a href=\"#version\">version</a> ⇒ <code>string</code></dt>\n<dd></dd>\n<dt><a href=\"#name\">name</a> ⇒ <code>string</code></dt>\n<dd></dd>\n<dt><a href=\"#shortName\">shortName</a> ⇒ <code>string</code></dt>\n<dd></dd>\n<dt><a href=\"#config\">config</a> ⇒ <code>object</code></dt>\n<dd></dd>\n<dt><a href=\"#Chart\">Chart</a> ⇒ <code>object</code></dt>\n<dd></dd>\n<dt><a href=\"#ChartPanes\">ChartPanes</a> ⇒ <code>Map</code></dt>\n<dd></dd>\n<dt><a href=\"#Indicators\">Indicators</a> ⇒ <code>object</code></dt>\n<dd></dd>\n<dt><a href=\"#state\">state</a> ⇒ <code>State</code></dt>\n<dd></dd>\n<dt><a href=\"#allData\">allData</a> ⇒ <code>object</code></dt>\n<dd></dd>\n</dl>\n<h2 id=\"functions\">Functions</h2>\n<dl>\n<dt><a href=\"#start\">start(cfg)</a></dt>\n<dd><p>Target element has been validated as a mount point, \nlet's start building</p>\n</dd>\n<dt><a href=\"#on\">on(topic, handler, context)</a> ⇒ <code>boolean</code></dt>\n<dd><p>Subscribe to a topic</p>\n</dd>\n<dt><a href=\"#off\">off(topic, handler)</a> ⇒ <code>boolean</code></dt>\n<dd><p>Unsubscribe from a topic</p>\n</dd>\n<dt><a href=\"#emit\">emit(topic, data)</a> ⇒ <code>boolean</code></dt>\n<dd><p>Publish a topic</p>\n</dd>\n<dt><a href=\"#execute\">execute(topic, data, cb)</a></dt>\n<dd><p>Execute a task</p>\n</dd>\n<dt><a href=\"#stopStream\">stopStream()</a></dt>\n<dd><p>stop a chart stream\nwill halt any updates to price or indicators</p>\n</dd>\n<dt><a href=\"#jumpToIndex\">jumpToIndex(start, nearest, centre)</a></dt>\n<dd><p>set Range start index</p>\n</dd>\n<dt><a href=\"#jumpToTS\">jumpToTS(ts, nearest, centre)</a></dt>\n<dd><p>set Range start to time stamp</p>\n</dd>\n<dt><a href=\"#jumpToStart\">jumpToStart(centre)</a></dt>\n<dd><p>set Range start to state data start</p>\n</dd>\n<dt><a href=\"#jumpToEnd\">jumpToEnd(centre)</a></dt>\n<dd><p>set Range start to state data end</p>\n</dd>\n<dt><a href=\"#mergeData\">mergeData(merge, newRange)</a></dt>\n<dd><p>Merge a block of data into the chart state.\nUsed for populating a chart with back history.\nMerge data must be formatted to a Chart State.\nOptionally set a new range upon merge.</p>\n</dd>\n<dt><a href=\"#isIndicator\">isIndicator(i)</a> ⇒ <code>boolean</code></dt>\n<dd><p>validate indicator</p>\n</dd>\n<dt><a href=\"#setIndicators\">setIndicators(i, flush)</a> ⇒ <code>boolean</code></dt>\n<dd><p>import Indicators</p>\n</dd>\n<dt><a href=\"#addIndicator\">addIndicator(i, name, params)</a> ⇒ <code>Indicator</code> | <code>false</code></dt>\n<dd><p>add an indicator - default or registered user defined</p>\n</dd>\n<dt><a href=\"#getIndicator\">getIndicator(i)</a> ⇒ <code>Indicator</code> | <code>false</code></dt>\n<dd><p>retrieve indicator by ID</p>\n</dd>\n<dt><a href=\"#removeIndicator\">removeIndicator(i)</a> ⇒ <code>boolean</code></dt>\n<dd><p>remove an indicator - default or registered user defined</p>\n</dd>\n<dt><a href=\"#indicatorSettings\">indicatorSettings(i, s)</a> ⇒ <code>Object</code></dt>\n<dd><p>set or get indicator settings</p>\n</dd>\n<dt><a href=\"#hasStateIndicator\">hasStateIndicator(i, dataset)</a> ⇒ <code>Indicator</code> | <code>false</code></dt>\n<dd><p>Does current chart state have indicator</p>\n</dd>\n<dt><a href=\"#calcAllIndicators\">calcAllIndicators()</a></dt>\n<dd><p>calculate all indicators currently in use</p>\n</dd>\n</dl>\n<p><a name=\"TradeXchart\"></a></p>\n<h2 id=\"tradexchart--tradex_chart\">TradeXchart ⇐ <code>Tradex_chart</code></h2>\n<p><strong>Kind</strong>: global class<br>\n<strong>Extends</strong>: <code>Tradex_chart</code></p>\n<ul>\n<li><a href=\"#TradeXchart\">TradeXchart</a> ⇐ <code>Tradex_chart</code>\n<ul>\n<li><a href=\"#new_TradeXchart_new\">new TradeXchart()</a></li>\n<li><a href=\"#TradeXchart.create\">.create(container, [txCfg], state)</a> ⇒ <code>instance</code></li>\n<li><a href=\"#TradeXchart.destroy\">.destroy(chart)</a></li>\n<li><a href=\"#TradeXchart.destroy\">.destroy()</a></li>\n<li><a href=\"#TradeXchart.setDimensions\">.setDimensions(w, h)</a></li>\n<li><a href=\"#TradeXchart.setPricePrecision\">.setPricePrecision(pricePrecision)</a></li>\n<li><a href=\"#TradeXchart.setVolumePrecision\">.setVolumePrecision(volumePrecision)</a></li>\n<li><a href=\"#TradeXchart.addTheme\">.addTheme(theme)</a> ⇒ <code>instance</code></li>\n<li><a href=\"#TradeXchart.setTheme\">.setTheme(theme)</a> ⇒ <code>boolean</code></li>\n<li><a href=\"#TradeXchart.setStream\">.setStream(stream)</a> ⇒ <code>instance</code></li>\n<li><a href=\"#TradeXchart.getRange\">.getRange(start, end)</a></li>\n<li><a href=\"#TradeXchart.setRange\">.setRange(start, end)</a></li>\n<li><a href=\"#TradeXchart.resize\">.resize(width, height)</a> ⇒ <code>boolean</code></li>\n<li><a href=\"#TradeXchart.refresh\">.refresh()</a></li>\n</ul>\n</li>\n</ul>\n<p><a name=\"new_TradeXchart_new\"></a></p>\n<h3 id=\"new-tradexchart\">new TradeXchart()</h3>\n<p>The root class for the entire chart</p>\n<p><a name=\"TradeXchart.create\"></a></p>\n<h3 id=\"tradexchartcreatecontainer-txcfg-state--instance\">TradeXchart.create(container, [txCfg], state) ⇒ <code>instance</code></h3>\n<p>Create a new TradeXchart instance</p>\n<p><strong>Kind</strong>: static method of <a href=\"#TradeXchart\"><code>TradeXchart</code></a><br>\n<strong>Returns</strong>: <code>instance</code> - TradeXchart</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>container</td><td><code>DOM_element</code></td><td></td><td>HTML element to mount the chart on</td></tr><tr><td>[txCfg]</td><td><code>Object</code></td><td><code>{}</code></td><td>chart config</td></tr><tr><td>state</td><td><code>Object</code></td><td></td><td>chart state</td></tr></tbody></table>\n<p><a name=\"TradeXchart.destroy\"></a></p>\n<h3 id=\"tradexchartdestroychart\">TradeXchart.destroy(chart)</h3>\n<p>Destroy a chart instance, clean up and remove data</p>\n<p><strong>Kind</strong>: static method of <a href=\"#TradeXchart\"><code>TradeXchart</code></a></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>chart</td><td><code>instance</code></td></tr></tbody></table>\n<p><a name=\"TradeXchart.destroy\"></a></p>\n<h3 id=\"tradexchartdestroy\">TradeXchart.destroy()</h3>\n<p>Stop all chart event processing and remove the chart from DOM.\nIn other words, destroy the chart.</p>\n<p><strong>Kind</strong>: static method of <a href=\"#TradeXchart\"><code>TradeXchart</code></a><br>\n<a name=\"TradeXchart.setDimensions\"></a></p>\n<h3 id=\"tradexchartsetdimensionsw-h\">TradeXchart.setDimensions(w, h)</h3>\n<p>Set chart width and height</p>\n<p><strong>Kind</strong>: static method of <a href=\"#TradeXchart\"><code>TradeXchart</code></a></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>w</td><td><code>number</code></td><td>width in pixels</td></tr><tr><td>h</td><td><code>number</code></td><td>height in pixels</td></tr></tbody></table>\n<p><a name=\"TradeXchart.setPricePrecision\"></a></p>\n<h3 id=\"tradexchartsetpriceprecisionpriceprecision\">TradeXchart.setPricePrecision(pricePrecision)</h3>\n<p>Set the price accuracy</p>\n<p><strong>Kind</strong>: static method of <a href=\"#TradeXchart\"><code>TradeXchart</code></a></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>pricePrecision</td><td><code>number</code></td><td>Price accuracy</td></tr></tbody></table>\n<p><a name=\"TradeXchart.setVolumePrecision\"></a></p>\n<h3 id=\"tradexchartsetvolumeprecisionvolumeprecision\">TradeXchart.setVolumePrecision(volumePrecision)</h3>\n<p>Set the volume accuracy</p>\n<p><strong>Kind</strong>: static method of <a href=\"#TradeXchart\"><code>TradeXchart</code></a></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>volumePrecision</td><td><code>number</code></td><td>Volume accuracy</td></tr></tbody></table>\n<p><a name=\"TradeXchart.addTheme\"></a></p>\n<h3 id=\"tradexchartaddthemetheme--instance\">TradeXchart.addTheme(theme) ⇒ <code>instance</code></h3>\n<p>Add a theme to the chart,\nif no current theme is set, make this the current one.</p>\n<p><strong>Kind</strong>: static method of <a href=\"#TradeXchart\"><code>TradeXchart</code></a><br>\n<strong>Returns</strong>: <code>instance</code> - - theme instance</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>theme</td><td><code>Object</code></td><td>Volume accuracy</td></tr></tbody></table>\n<p><a name=\"TradeXchart.setTheme\"></a></p>\n<h3 id=\"tradexchartsetthemetheme--boolean\">TradeXchart.setTheme(theme) ⇒ <code>boolean</code></h3>\n<p>Set the chart theme</p>\n<p><strong>Kind</strong>: static method of <a href=\"#TradeXchart\"><code>TradeXchart</code></a></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>theme</td><td><code>string</code></td><td>theme identifier</td></tr></tbody></table>\n<p><a name=\"TradeXchart.setStream\"></a></p>\n<h3 id=\"tradexchartsetstreamstream--instance\">TradeXchart.setStream(stream) ⇒ <code>instance</code></h3>\n<p>specify a chart stream</p>\n<p><strong>Kind</strong>: static method of <a href=\"#TradeXchart\"><code>TradeXchart</code></a></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>stream</td><td><code>Object</code></td></tr></tbody></table>\n<p><a name=\"TradeXchart.getRange\"></a></p>\n<h3 id=\"tradexchartgetrangestart-end\">TradeXchart.getRange(start, end)</h3>\n<p>initialize range</p>\n<p><strong>Kind</strong>: static method of <a href=\"#TradeXchart\"><code>TradeXchart</code></a></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>start</td><td><code>number</code></td><td><code>0</code></td><td>index</td></tr><tr><td>end</td><td><code>number</code></td><td><code>0</code></td><td>index</td></tr></tbody></table>\n<p><a name=\"TradeXchart.setRange\"></a></p>\n<h3 id=\"tradexchartsetrangestart-end\">TradeXchart.setRange(start, end)</h3>\n<p>set start and end of range</p>\n<p><strong>Kind</strong>: static method of <a href=\"#TradeXchart\"><code>TradeXchart</code></a></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>start</td><td><code>number</code></td><td><code>0</code></td><td>index</td></tr><tr><td>end</td><td><code>number</code></td><td></td><td>index</td></tr></tbody></table>\n<p><a name=\"TradeXchart.resize\"></a></p>\n<h3 id=\"tradexchartresizewidth-height--boolean\">TradeXchart.resize(width, height) ⇒ <code>boolean</code></h3>\n<p>Resize the chart</p>\n<p><strong>Kind</strong>: static method of <a href=\"#TradeXchart\"><code>TradeXchart</code></a><br>\n<strong>Returns</strong>: <code>boolean</code> - - success or failure</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>width</td><td><code>number</code></td><td>pixels</td></tr><tr><td>height</td><td><code>number</code></td><td>pixels</td></tr></tbody></table>\n<p><a name=\"TradeXchart.refresh\"></a></p>\n<h3 id=\"tradexchartrefresh\">TradeXchart.refresh()</h3>\n<p>refresh / redraw the chart</p>\n<p><strong>Kind</strong>: static method of <a href=\"#TradeXchart\"><code>TradeXchart</code></a><br>\n<a name=\"version\"></a></p>\n<h2 id=\"version--string\">version ⇒ <code>string</code></h2>\n<p><strong>Kind</strong>: global variable<br>\n<strong>Returns</strong>: <code>string</code> - - return TradeX Chart version number<br>\n<a name=\"name\"></a></p>\n<h2 id=\"name--string\">name ⇒ <code>string</code></h2>\n<p><strong>Kind</strong>: global variable<br>\n<strong>Returns</strong>: <code>string</code> - - user defined chart name<br>\n<a name=\"shortName\"></a></p>\n<h2 id=\"shortname--string\">shortName ⇒ <code>string</code></h2>\n<p><strong>Kind</strong>: global variable<br>\n<strong>Returns</strong>: <code>string</code> - - user defined short chart name<br>\n<a name=\"config\"></a></p>\n<h2 id=\"config--object\">config ⇒ <code>object</code></h2>\n<p><strong>Kind</strong>: global variable<br>\n<strong>Returns</strong>: <code>object</code> - - current chart configuration including defaults<br>\n<a name=\"Chart\"></a></p>\n<h2 id=\"chart--object\">Chart ⇒ <code>object</code></h2>\n<p><strong>Kind</strong>: global variable<br>\n<strong>Returns</strong>: <code>object</code> - - primary chart pane - displays price history (candles)<br>\n<a name=\"ChartPanes\"></a></p>\n<h2 id=\"chartpanes--map\">ChartPanes ⇒ <code>Map</code></h2>\n<p><strong>Kind</strong>: global variable<br>\n<strong>Returns</strong>: <code>Map</code> - - all chart panes, primary and secondary<br>\n<a name=\"Indicators\"></a></p>\n<h2 id=\"indicators--object\">Indicators ⇒ <code>object</code></h2>\n<p><strong>Kind</strong>: global variable<br>\n<strong>Returns</strong>: <code>object</code> - - all chart indicators in use, grouped by chart panes<br>\n<a name=\"state\"></a></p>\n<h2 id=\"state--state\">state ⇒ <code>State</code></h2>\n<p><strong>Kind</strong>: global variable<br>\n<strong>Returns</strong>: <code>State</code> - - current state instance<br>\n<a name=\"allData\"></a></p>\n<h2 id=\"alldata--object\">allData ⇒ <code>object</code></h2>\n<p><strong>Kind</strong>: global variable<br>\n<strong>Returns</strong>: <code>object</code> - - all state datasets<br>\n<a name=\"start\"></a></p>\n<h2 id=\"startcfg\">start(cfg)</h2>\n<p>Target element has been validated as a mount point,\nlet’s start building</p>\n<p><strong>Kind</strong>: global function</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>cfg</td><td><code>Object</code></td><td>chart configuration</td></tr></tbody></table>\n<p><a name=\"on\"></a></p>\n<h2 id=\"ontopic-handler-context--boolean\">on(topic, handler, context) ⇒ <code>boolean</code></h2>\n<p>Subscribe to a topic</p>\n<p><strong>Kind</strong>: global function</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>topic</td><td><code>string</code></td><td>The topic name</td></tr><tr><td>handler</td><td><code>function</code></td><td>The function or method that is called</td></tr><tr><td>context</td><td><code>Object</code></td><td>The context the function(s) belongs to</td></tr></tbody></table>\n<p><a name=\"off\"></a></p>\n<h2 id=\"offtopic-handler--boolean\">off(topic, handler) ⇒ <code>boolean</code></h2>\n<p>Unsubscribe from a topic</p>\n<p><strong>Kind</strong>: global function</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>topic</td><td><code>string</code></td><td>The topic name</td></tr><tr><td>handler</td><td><code>function</code></td><td>function to remove</td></tr></tbody></table>\n<p><a name=\"emit\"></a></p>\n<h2 id=\"emittopic-data--boolean\">emit(topic, data) ⇒ <code>boolean</code></h2>\n<p>Publish a topic</p>\n<p><strong>Kind</strong>: global function</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>topic</td><td><code>string</code></td><td>The topic name</td></tr><tr><td>data</td><td><code>Object</code></td><td>The data to publish</td></tr></tbody></table>\n<p><a name=\"execute\"></a></p>\n<h2 id=\"executetopic-data-cb\">execute(topic, data, cb)</h2>\n<p>Execute a task</p>\n<p><strong>Kind</strong>: global function</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>topic</td><td><code>string</code></td><td>The topic name</td></tr><tr><td>data</td><td><code>Object</code></td><td>The data that gets published</td></tr><tr><td>cb</td><td><code>function</code></td><td>callback method</td></tr></tbody></table>\n<p><a name=\"stopStream\"></a></p>\n<h2 id=\"stopstream\">stopStream()</h2>\n<p>stop a chart stream\nwill halt any updates to price or indicators</p>\n<p><strong>Kind</strong>: global function<br>\n<a name=\"jumpToIndex\"></a></p>\n<h2 id=\"jumptoindexstart-nearest-centre\">jumpToIndex(start, nearest, centre)</h2>\n<p>set Range start index</p>\n<p><strong>Kind</strong>: global function</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>start</td><td><code>number</code></td><td></td><td>starting index of state data</td></tr><tr><td>nearest</td><td><code>boolean</code></td><td><code>true</code></td><td>limit range start - no out of range values</td></tr><tr><td>centre</td><td><code>boolean</code></td><td><code>true</code></td><td>center the range on the start value</td></tr></tbody></table>\n<p><a name=\"jumpToTS\"></a></p>\n<h2 id=\"jumptotsts-nearest-centre\">jumpToTS(ts, nearest, centre)</h2>\n<p>set Range start to time stamp</p>\n<p><strong>Kind</strong>: global function</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>ts</td><td><code>number</code></td><td></td><td>timestamp</td></tr><tr><td>nearest</td><td><code>boolean</code></td><td><code>true</code></td><td>limit range start - no out of range values</td></tr><tr><td>centre</td><td><code>boolean</code></td><td><code>true</code></td><td>center the range on the start value</td></tr></tbody></table>\n<p><a name=\"jumpToStart\"></a></p>\n<h2 id=\"jumptostartcentre\">jumpToStart(centre)</h2>\n<p>set Range start to state data start</p>\n<p><strong>Kind</strong>: global function</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>centre</td><td><code>boolean</code></td><td><code>true</code></td><td>center the range on the start value</td></tr></tbody></table>\n<p><a name=\"jumpToEnd\"></a></p>\n<h2 id=\"jumptoendcentre\">jumpToEnd(centre)</h2>\n<p>set Range start to state data end</p>\n<p><strong>Kind</strong>: global function</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>centre</td><td><code>boolean</code></td><td><code>true</code></td><td>center the range on the end value</td></tr></tbody></table>\n<p><a name=\"mergeData\"></a></p>\n<h2 id=\"mergedatamerge-newrange\">mergeData(merge, newRange)</h2>\n<p>Merge a block of data into the chart state.\nUsed for populating a chart with back history.\nMerge data must be formatted to a Chart State.\nOptionally set a new range upon merge.</p>\n<p><strong>Kind</strong>: global function</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>merge</td><td><code>Object</code></td><td></td><td>merge data must be formatted to a Chart State</td></tr><tr><td>newRange</td><td><code>boolean</code> | <code>object</code></td><td><code>false</code></td><td>false</td></tr></tbody></table>\n<p><a name=\"isIndicator\"></a></p>\n<h2 id=\"isindicatori--boolean\">isIndicator(i) ⇒ <code>boolean</code></h2>\n<p>validate indicator</p>\n<p><strong>Kind</strong>: global function</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>i</td><td><code>class</code></td><td>indicator class</td></tr></tbody></table>\n<p><a name=\"setIndicators\"></a></p>\n<h2 id=\"setindicatorsi-flush--boolean\">setIndicators(i, flush) ⇒ <code>boolean</code></h2>\n<p>import Indicators</p>\n<p><strong>Kind</strong>: global function</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>i</td><td><code>Object</code></td><td></td><td>indicators {id, name, event, ind}</td></tr><tr><td>flush</td><td><code>boolean</code></td><td><code>false</code></td><td>expunge default indicators</td></tr></tbody></table>\n<p><a name=\"addIndicator\"></a></p>\n<h2 id=\"addindicatori-name-params--indicator--false\">addIndicator(i, name, params) ⇒ <code>Indicator</code> | <code>false</code></h2>\n<p>add an indicator - default or registered user defined</p>\n<p><strong>Kind</strong>: global function<br>\n<strong>Returns</strong>: <code>Indicator</code> | <code>false</code> - - indicator instance or false</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>i</td><td><code>string</code></td><td>indicator</td></tr><tr><td>name</td><td><code>string</code></td><td>identifier</td></tr><tr><td>params</td><td><code>Object</code></td><td>{settings, data}</td></tr></tbody></table>\n<p><a name=\"getIndicator\"></a></p>\n<h2 id=\"getindicatori--indicator--false\">getIndicator(i) ⇒ <code>Indicator</code> | <code>false</code></h2>\n<p>retrieve indicator by ID</p>\n<p><strong>Kind</strong>: global function<br>\n<strong>Returns</strong>: <code>Indicator</code> | <code>false</code> - - indicator instance or false</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>i</td><td><code>string</code></td><td>indicator ID</td></tr></tbody></table>\n<p><a name=\"removeIndicator\"></a></p>\n<h2 id=\"removeindicatori--boolean\">removeIndicator(i) ⇒ <code>boolean</code></h2>\n<p>remove an indicator - default or registered user defined</p>\n<p><strong>Kind</strong>: global function<br>\n<strong>Returns</strong>: <code>boolean</code> - - success / failure</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>i</td><td><code>string</code> | <code>Indicator</code></td><td>indicator id or Indicator instance</td></tr></tbody></table>\n<p><a name=\"indicatorSettings\"></a></p>\n<h2 id=\"indicatorsettingsi-s--object\">indicatorSettings(i, s) ⇒ <code>Object</code></h2>\n<p>set or get indicator settings</p>\n<p><strong>Kind</strong>: global function<br>\n<strong>Returns</strong>: <code>Object</code> - - settings</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>i</td><td><code>string</code> | <code>Indicator</code></td><td>indicator id or Indicator instance</td></tr><tr><td>s</td><td><code>Object</code></td><td>settings</td></tr></tbody></table>\n<p><a name=\"hasStateIndicator\"></a></p>\n<h2 id=\"hasstateindicatori-dataset--indicator--false\">hasStateIndicator(i, dataset) ⇒ <code>Indicator</code> | <code>false</code></h2>\n<p>Does current chart state have indicator</p>\n<p><strong>Kind</strong>: global function</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>i</td><td><code>string</code></td><td></td><td>indicator id or name</td></tr><tr><td>dataset</td><td><code>string</code></td><td><code>“searchAll”</code></td><td></td></tr></tbody></table>\n<p><a name=\"calcAllIndicators\"></a></p>\n<h2 id=\"calcallindicators\">calcAllIndicators()</h2>\n<p>calculate all indicators currently in use</p>\n<p><strong>Kind</strong>: global function</p>");

				const frontmatter = {"title":"core"};
				const file = "/mnt/ext4/Home/neoarttec/Archives/Linux/Crypto/Trading/Mercury/MercuryTrader/component-module-tests/TradeX/tradex-chart/src/docs/src/content/docs/api/core.md";
				const url = undefined;
				function rawContent() {
					return "\n## Classes\n\n<dl>\n<dt><a href=\"#TradeXchart\">TradeXchart</a> ⇐ <code>Tradex_chart</code></dt>\n<dd></dd>\n</dl>\n\n## Members\n\n<dl>\n<dt><a href=\"#version\">version</a> ⇒ <code>string</code></dt>\n<dd></dd>\n<dt><a href=\"#name\">name</a> ⇒ <code>string</code></dt>\n<dd></dd>\n<dt><a href=\"#shortName\">shortName</a> ⇒ <code>string</code></dt>\n<dd></dd>\n<dt><a href=\"#config\">config</a> ⇒ <code>object</code></dt>\n<dd></dd>\n<dt><a href=\"#Chart\">Chart</a> ⇒ <code>object</code></dt>\n<dd></dd>\n<dt><a href=\"#ChartPanes\">ChartPanes</a> ⇒ <code>Map</code></dt>\n<dd></dd>\n<dt><a href=\"#Indicators\">Indicators</a> ⇒ <code>object</code></dt>\n<dd></dd>\n<dt><a href=\"#state\">state</a> ⇒ <code>State</code></dt>\n<dd></dd>\n<dt><a href=\"#allData\">allData</a> ⇒ <code>object</code></dt>\n<dd></dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#start\">start(cfg)</a></dt>\n<dd><p>Target element has been validated as a mount point, \nlet&#39;s start building</p>\n</dd>\n<dt><a href=\"#on\">on(topic, handler, context)</a> ⇒ <code>boolean</code></dt>\n<dd><p>Subscribe to a topic</p>\n</dd>\n<dt><a href=\"#off\">off(topic, handler)</a> ⇒ <code>boolean</code></dt>\n<dd><p>Unsubscribe from a topic</p>\n</dd>\n<dt><a href=\"#emit\">emit(topic, data)</a> ⇒ <code>boolean</code></dt>\n<dd><p>Publish a topic</p>\n</dd>\n<dt><a href=\"#execute\">execute(topic, data, cb)</a></dt>\n<dd><p>Execute a task</p>\n</dd>\n<dt><a href=\"#stopStream\">stopStream()</a></dt>\n<dd><p>stop a chart stream\nwill halt any updates to price or indicators</p>\n</dd>\n<dt><a href=\"#jumpToIndex\">jumpToIndex(start, nearest, centre)</a></dt>\n<dd><p>set Range start index</p>\n</dd>\n<dt><a href=\"#jumpToTS\">jumpToTS(ts, nearest, centre)</a></dt>\n<dd><p>set Range start to time stamp</p>\n</dd>\n<dt><a href=\"#jumpToStart\">jumpToStart(centre)</a></dt>\n<dd><p>set Range start to state data start</p>\n</dd>\n<dt><a href=\"#jumpToEnd\">jumpToEnd(centre)</a></dt>\n<dd><p>set Range start to state data end</p>\n</dd>\n<dt><a href=\"#mergeData\">mergeData(merge, newRange)</a></dt>\n<dd><p>Merge a block of data into the chart state.\nUsed for populating a chart with back history.\nMerge data must be formatted to a Chart State.\nOptionally set a new range upon merge.</p>\n</dd>\n<dt><a href=\"#isIndicator\">isIndicator(i)</a> ⇒ <code>boolean</code></dt>\n<dd><p>validate indicator</p>\n</dd>\n<dt><a href=\"#setIndicators\">setIndicators(i, flush)</a> ⇒ <code>boolean</code></dt>\n<dd><p>import Indicators</p>\n</dd>\n<dt><a href=\"#addIndicator\">addIndicator(i, name, params)</a> ⇒ <code>Indicator</code> | <code>false</code></dt>\n<dd><p>add an indicator - default or registered user defined</p>\n</dd>\n<dt><a href=\"#getIndicator\">getIndicator(i)</a> ⇒ <code>Indicator</code> | <code>false</code></dt>\n<dd><p>retrieve indicator by ID</p>\n</dd>\n<dt><a href=\"#removeIndicator\">removeIndicator(i)</a> ⇒ <code>boolean</code></dt>\n<dd><p>remove an indicator - default or registered user defined</p>\n</dd>\n<dt><a href=\"#indicatorSettings\">indicatorSettings(i, s)</a> ⇒ <code>Object</code></dt>\n<dd><p>set or get indicator settings</p>\n</dd>\n<dt><a href=\"#hasStateIndicator\">hasStateIndicator(i, dataset)</a> ⇒ <code>Indicator</code> | <code>false</code></dt>\n<dd><p>Does current chart state have indicator</p>\n</dd>\n<dt><a href=\"#calcAllIndicators\">calcAllIndicators()</a></dt>\n<dd><p>calculate all indicators currently in use</p>\n</dd>\n</dl>\n\n<a name=\"TradeXchart\"></a>\n\n## TradeXchart ⇐ <code>Tradex\\_chart</code>\n**Kind**: global class  \n**Extends**: <code>Tradex\\_chart</code>  \n\n* [TradeXchart](#TradeXchart) ⇐ <code>Tradex\\_chart</code>\n    * [new TradeXchart()](#new_TradeXchart_new)\n    * [.create(container, [txCfg], state)](#TradeXchart.create) ⇒ <code>instance</code>\n    * [.destroy(chart)](#TradeXchart.destroy)\n    * [.destroy()](#TradeXchart.destroy)\n    * [.setDimensions(w, h)](#TradeXchart.setDimensions)\n    * [.setPricePrecision(pricePrecision)](#TradeXchart.setPricePrecision)\n    * [.setVolumePrecision(volumePrecision)](#TradeXchart.setVolumePrecision)\n    * [.addTheme(theme)](#TradeXchart.addTheme) ⇒ <code>instance</code>\n    * [.setTheme(theme)](#TradeXchart.setTheme) ⇒ <code>boolean</code>\n    * [.setStream(stream)](#TradeXchart.setStream) ⇒ <code>instance</code>\n    * [.getRange(start, end)](#TradeXchart.getRange)\n    * [.setRange(start, end)](#TradeXchart.setRange)\n    * [.resize(width, height)](#TradeXchart.resize) ⇒ <code>boolean</code>\n    * [.refresh()](#TradeXchart.refresh)\n\n<a name=\"new_TradeXchart_new\"></a>\n\n### new TradeXchart()\nThe root class for the entire chart\n\n<a name=\"TradeXchart.create\"></a>\n\n### TradeXchart.create(container, [txCfg], state) ⇒ <code>instance</code>\nCreate a new TradeXchart instance\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n**Returns**: <code>instance</code> - TradeXchart  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| container | <code>DOM\\_element</code> |  | HTML element to mount the chart on |\n| [txCfg] | <code>Object</code> | <code>{}</code> | chart config |\n| state | <code>Object</code> |  | chart state |\n\n<a name=\"TradeXchart.destroy\"></a>\n\n### TradeXchart.destroy(chart)\nDestroy a chart instance, clean up and remove data\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type |\n| --- | --- |\n| chart | <code>instance</code> | \n\n<a name=\"TradeXchart.destroy\"></a>\n\n### TradeXchart.destroy()\nStop all chart event processing and remove the chart from DOM.\nIn other words, destroy the chart.\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n<a name=\"TradeXchart.setDimensions\"></a>\n\n### TradeXchart.setDimensions(w, h)\nSet chart width and height\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| w | <code>number</code> | width in pixels |\n| h | <code>number</code> | height in pixels |\n\n<a name=\"TradeXchart.setPricePrecision\"></a>\n\n### TradeXchart.setPricePrecision(pricePrecision)\nSet the price accuracy\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| pricePrecision | <code>number</code> | Price accuracy |\n\n<a name=\"TradeXchart.setVolumePrecision\"></a>\n\n### TradeXchart.setVolumePrecision(volumePrecision)\nSet the volume accuracy\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| volumePrecision | <code>number</code> | Volume accuracy |\n\n<a name=\"TradeXchart.addTheme\"></a>\n\n### TradeXchart.addTheme(theme) ⇒ <code>instance</code>\nAdd a theme to the chart,\nif no current theme is set, make this the current one.\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n**Returns**: <code>instance</code> - - theme instance  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| theme | <code>Object</code> | Volume accuracy |\n\n<a name=\"TradeXchart.setTheme\"></a>\n\n### TradeXchart.setTheme(theme) ⇒ <code>boolean</code>\nSet the chart theme\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| theme | <code>string</code> | theme identifier |\n\n<a name=\"TradeXchart.setStream\"></a>\n\n### TradeXchart.setStream(stream) ⇒ <code>instance</code>\nspecify a chart stream\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type |\n| --- | --- |\n| stream | <code>Object</code> | \n\n<a name=\"TradeXchart.getRange\"></a>\n\n### TradeXchart.getRange(start, end)\ninitialize range\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| start | <code>number</code> | <code>0</code> | index |\n| end | <code>number</code> | <code>0</code> | index |\n\n<a name=\"TradeXchart.setRange\"></a>\n\n### TradeXchart.setRange(start, end)\nset start and end of range\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| start | <code>number</code> | <code>0</code> | index |\n| end | <code>number</code> |  | index |\n\n<a name=\"TradeXchart.resize\"></a>\n\n### TradeXchart.resize(width, height) ⇒ <code>boolean</code>\nResize the chart\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n**Returns**: <code>boolean</code> - - success or failure  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| width | <code>number</code> | pixels |\n| height | <code>number</code> | pixels |\n\n<a name=\"TradeXchart.refresh\"></a>\n\n### TradeXchart.refresh()\nrefresh / redraw the chart\n\n**Kind**: static method of [<code>TradeXchart</code>](#TradeXchart)  \n<a name=\"version\"></a>\n\n## version ⇒ <code>string</code>\n**Kind**: global variable  \n**Returns**: <code>string</code> - - return TradeX Chart version number  \n<a name=\"name\"></a>\n\n## name ⇒ <code>string</code>\n**Kind**: global variable  \n**Returns**: <code>string</code> - - user defined chart name  \n<a name=\"shortName\"></a>\n\n## shortName ⇒ <code>string</code>\n**Kind**: global variable  \n**Returns**: <code>string</code> - - user defined short chart name  \n<a name=\"config\"></a>\n\n## config ⇒ <code>object</code>\n**Kind**: global variable  \n**Returns**: <code>object</code> - - current chart configuration including defaults  \n<a name=\"Chart\"></a>\n\n## Chart ⇒ <code>object</code>\n**Kind**: global variable  \n**Returns**: <code>object</code> - - primary chart pane - displays price history (candles)  \n<a name=\"ChartPanes\"></a>\n\n## ChartPanes ⇒ <code>Map</code>\n**Kind**: global variable  \n**Returns**: <code>Map</code> - - all chart panes, primary and secondary  \n<a name=\"Indicators\"></a>\n\n## Indicators ⇒ <code>object</code>\n**Kind**: global variable  \n**Returns**: <code>object</code> - - all chart indicators in use, grouped by chart panes  \n<a name=\"state\"></a>\n\n## state ⇒ <code>State</code>\n**Kind**: global variable  \n**Returns**: <code>State</code> - - current state instance  \n<a name=\"allData\"></a>\n\n## allData ⇒ <code>object</code>\n**Kind**: global variable  \n**Returns**: <code>object</code> - - all state datasets  \n<a name=\"start\"></a>\n\n## start(cfg)\nTarget element has been validated as a mount point, \nlet's start building\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| cfg | <code>Object</code> | chart configuration |\n\n<a name=\"on\"></a>\n\n## on(topic, handler, context) ⇒ <code>boolean</code>\nSubscribe to a topic\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| topic | <code>string</code> | The topic name |\n| handler | <code>function</code> | The function or method that is called |\n| context | <code>Object</code> | The context the function(s) belongs to |\n\n<a name=\"off\"></a>\n\n## off(topic, handler) ⇒ <code>boolean</code>\nUnsubscribe from a topic\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| topic | <code>string</code> | The topic name |\n| handler | <code>function</code> | function to remove |\n\n<a name=\"emit\"></a>\n\n## emit(topic, data) ⇒ <code>boolean</code>\nPublish a topic\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| topic | <code>string</code> | The topic name |\n| data | <code>Object</code> | The data to publish |\n\n<a name=\"execute\"></a>\n\n## execute(topic, data, cb)\nExecute a task\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| topic | <code>string</code> | The topic name |\n| data | <code>Object</code> | The data that gets published |\n| cb | <code>function</code> | callback method |\n\n<a name=\"stopStream\"></a>\n\n## stopStream()\nstop a chart stream\nwill halt any updates to price or indicators\n\n**Kind**: global function  \n<a name=\"jumpToIndex\"></a>\n\n## jumpToIndex(start, nearest, centre)\nset Range start index\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| start | <code>number</code> |  | starting index of state data |\n| nearest | <code>boolean</code> | <code>true</code> | limit range start - no out of range values |\n| centre | <code>boolean</code> | <code>true</code> | center the range on the start value |\n\n<a name=\"jumpToTS\"></a>\n\n## jumpToTS(ts, nearest, centre)\nset Range start to time stamp\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| ts | <code>number</code> |  | timestamp |\n| nearest | <code>boolean</code> | <code>true</code> | limit range start - no out of range values |\n| centre | <code>boolean</code> | <code>true</code> | center the range on the start value |\n\n<a name=\"jumpToStart\"></a>\n\n## jumpToStart(centre)\nset Range start to state data start\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| centre | <code>boolean</code> | <code>true</code> | center the range on the start value |\n\n<a name=\"jumpToEnd\"></a>\n\n## jumpToEnd(centre)\nset Range start to state data end\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| centre | <code>boolean</code> | <code>true</code> | center the range on the end value |\n\n<a name=\"mergeData\"></a>\n\n## mergeData(merge, newRange)\nMerge a block of data into the chart state.\nUsed for populating a chart with back history.\nMerge data must be formatted to a Chart State.\nOptionally set a new range upon merge.\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| merge | <code>Object</code> |  | merge data must be formatted to a Chart State |\n| newRange | <code>boolean</code> \\| <code>object</code> | <code>false</code> | false | {start: number, end: number} |\n\n<a name=\"isIndicator\"></a>\n\n## isIndicator(i) ⇒ <code>boolean</code>\nvalidate indicator\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| i | <code>class</code> | indicator class |\n\n<a name=\"setIndicators\"></a>\n\n## setIndicators(i, flush) ⇒ <code>boolean</code>\nimport Indicators\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| i | <code>Object</code> |  | indicators {id, name, event, ind} |\n| flush | <code>boolean</code> | <code>false</code> | expunge default indicators |\n\n<a name=\"addIndicator\"></a>\n\n## addIndicator(i, name, params) ⇒ <code>Indicator</code> \\| <code>false</code>\nadd an indicator - default or registered user defined\n\n**Kind**: global function  \n**Returns**: <code>Indicator</code> \\| <code>false</code> - - indicator instance or false  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| i | <code>string</code> | indicator |\n| name | <code>string</code> | identifier |\n| params | <code>Object</code> | {settings, data} |\n\n<a name=\"getIndicator\"></a>\n\n## getIndicator(i) ⇒ <code>Indicator</code> \\| <code>false</code>\nretrieve indicator by ID\n\n**Kind**: global function  \n**Returns**: <code>Indicator</code> \\| <code>false</code> - - indicator instance or false  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| i | <code>string</code> | indicator ID |\n\n<a name=\"removeIndicator\"></a>\n\n## removeIndicator(i) ⇒ <code>boolean</code>\nremove an indicator - default or registered user defined\n\n**Kind**: global function  \n**Returns**: <code>boolean</code> - - success / failure  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| i | <code>string</code> \\| <code>Indicator</code> | indicator id or Indicator instance |\n\n<a name=\"indicatorSettings\"></a>\n\n## indicatorSettings(i, s) ⇒ <code>Object</code>\nset or get indicator settings\n\n**Kind**: global function  \n**Returns**: <code>Object</code> - - settings  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| i | <code>string</code> \\| <code>Indicator</code> | indicator id or Indicator instance |\n| s | <code>Object</code> | settings |\n\n<a name=\"hasStateIndicator\"></a>\n\n## hasStateIndicator(i, dataset) ⇒ <code>Indicator</code> \\| <code>false</code>\nDoes current chart state have indicator\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| i | <code>string</code> |  | indicator id or name |\n| dataset | <code>string</code> | <code>&quot;searchAll&quot;</code> |  |\n\n<a name=\"calcAllIndicators\"></a>\n\n## calcAllIndicators()\ncalculate all indicators currently in use\n\n**Kind**: global function  \n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"classes","text":"Classes"},{"depth":2,"slug":"members","text":"Members"},{"depth":2,"slug":"functions","text":"Functions"},{"depth":2,"slug":"tradexchart--tradex_chart","text":"TradeXchart ⇐ Tradex_chart"},{"depth":3,"slug":"new-tradexchart","text":"new TradeXchart()"},{"depth":3,"slug":"tradexchartcreatecontainer-txcfg-state--instance","text":"TradeXchart.create(container, [txCfg], state) ⇒ instance"},{"depth":3,"slug":"tradexchartdestroychart","text":"TradeXchart.destroy(chart)"},{"depth":3,"slug":"tradexchartdestroy","text":"TradeXchart.destroy()"},{"depth":3,"slug":"tradexchartsetdimensionsw-h","text":"TradeXchart.setDimensions(w, h)"},{"depth":3,"slug":"tradexchartsetpriceprecisionpriceprecision","text":"TradeXchart.setPricePrecision(pricePrecision)"},{"depth":3,"slug":"tradexchartsetvolumeprecisionvolumeprecision","text":"TradeXchart.setVolumePrecision(volumePrecision)"},{"depth":3,"slug":"tradexchartaddthemetheme--instance","text":"TradeXchart.addTheme(theme) ⇒ instance"},{"depth":3,"slug":"tradexchartsetthemetheme--boolean","text":"TradeXchart.setTheme(theme) ⇒ boolean"},{"depth":3,"slug":"tradexchartsetstreamstream--instance","text":"TradeXchart.setStream(stream) ⇒ instance"},{"depth":3,"slug":"tradexchartgetrangestart-end","text":"TradeXchart.getRange(start, end)"},{"depth":3,"slug":"tradexchartsetrangestart-end","text":"TradeXchart.setRange(start, end)"},{"depth":3,"slug":"tradexchartresizewidth-height--boolean","text":"TradeXchart.resize(width, height) ⇒ boolean"},{"depth":3,"slug":"tradexchartrefresh","text":"TradeXchart.refresh()"},{"depth":2,"slug":"version--string","text":"version ⇒ string"},{"depth":2,"slug":"name--string","text":"name ⇒ string"},{"depth":2,"slug":"shortname--string","text":"shortName ⇒ string"},{"depth":2,"slug":"config--object","text":"config ⇒ object"},{"depth":2,"slug":"chart--object","text":"Chart ⇒ object"},{"depth":2,"slug":"chartpanes--map","text":"ChartPanes ⇒ Map"},{"depth":2,"slug":"indicators--object","text":"Indicators ⇒ object"},{"depth":2,"slug":"state--state","text":"state ⇒ State"},{"depth":2,"slug":"alldata--object","text":"allData ⇒ object"},{"depth":2,"slug":"startcfg","text":"start(cfg)"},{"depth":2,"slug":"ontopic-handler-context--boolean","text":"on(topic, handler, context) ⇒ boolean"},{"depth":2,"slug":"offtopic-handler--boolean","text":"off(topic, handler) ⇒ boolean"},{"depth":2,"slug":"emittopic-data--boolean","text":"emit(topic, data) ⇒ boolean"},{"depth":2,"slug":"executetopic-data-cb","text":"execute(topic, data, cb)"},{"depth":2,"slug":"stopstream","text":"stopStream()"},{"depth":2,"slug":"jumptoindexstart-nearest-centre","text":"jumpToIndex(start, nearest, centre)"},{"depth":2,"slug":"jumptotsts-nearest-centre","text":"jumpToTS(ts, nearest, centre)"},{"depth":2,"slug":"jumptostartcentre","text":"jumpToStart(centre)"},{"depth":2,"slug":"jumptoendcentre","text":"jumpToEnd(centre)"},{"depth":2,"slug":"mergedatamerge-newrange","text":"mergeData(merge, newRange)"},{"depth":2,"slug":"isindicatori--boolean","text":"isIndicator(i) ⇒ boolean"},{"depth":2,"slug":"setindicatorsi-flush--boolean","text":"setIndicators(i, flush) ⇒ boolean"},{"depth":2,"slug":"addindicatori-name-params--indicator--false","text":"addIndicator(i, name, params) ⇒ Indicator | false"},{"depth":2,"slug":"getindicatori--indicator--false","text":"getIndicator(i) ⇒ Indicator | false"},{"depth":2,"slug":"removeindicatori--boolean","text":"removeIndicator(i) ⇒ boolean"},{"depth":2,"slug":"indicatorsettingsi-s--object","text":"indicatorSettings(i, s) ⇒ Object"},{"depth":2,"slug":"hasstateindicatori-dataset--indicator--false","text":"hasStateIndicator(i, dataset) ⇒ Indicator | false"},{"depth":2,"slug":"calcallindicators","text":"calcAllIndicators()"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
